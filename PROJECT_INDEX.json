{
  "indexed_at": "2025-08-30T20:36:24.641751",
  "root": ".",
  "project_structure": {
    "type": "tree",
    "root": ".",
    "tree": [
      ".",
      "\u251c\u2500\u2500 backend/ (4769 files)",
      "\u2502   \u251c\u2500\u2500 database/ (9 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 migrations/ (5 files)",
      "\u2502   \u251c\u2500\u2500 logs/",
      "\u2502   \u251c\u2500\u2500 public/ (6 files)",
      "\u2502   \u251c\u2500\u2500 src/ (45 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Blockchain/ (5 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Commands/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Controllers/ (10 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Exceptions/ (3 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Middleware/ (4 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Models/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Services/ (12 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Utils/ (5 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Validators/ (1 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 Workers/ (3 files)",
      "\u2502   \u251c\u2500\u2500 tests/ (55 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 E2E/ (7 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 Integration/ (6 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 API/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 CircularProtocol/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 Database/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 Services/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 Workers/ (1 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 Unit/ (18 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 Blockchain/ (1 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 CircularProtocol/ (1 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 Controllers/ (1 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 Middleware/ (4 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 Models/ (1 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 Services/ (5 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 Utils/ (2 files)",
      "\u2502   \u2502       \u251c\u2500\u2500 Validators/ (1 files)",
      "\u2502   \u2502       \u2514\u2500\u2500 Workers/ (2 files)",
      "\u2502   \u251c\u2500\u2500 tmp/",
      "\u2502   \u2514\u2500\u2500 README.md",
      "\u251c\u2500\u2500 iroh-bridge/ (592 files)",
      "\u2502   \u251c\u2500\u2500 config/",
      "\u2502   \u251c\u2500\u2500 src/ (6 files)",
      "\u2502   \u2514\u2500\u2500 Cargo.toml",
      "\u251c\u2500\u2500 testing/ (16 files)",
      "\u2502   \u251c\u2500\u2500 data/ (1 files)",
      "\u2502   \u251c\u2500\u2500 docker/",
      "\u2502   \u251c\u2500\u2500 e2e/ (6 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 frontend/ (6 files)",
      "\u2502   \u251c\u2500\u2500 scripts/ (7 files)",
      "\u2502   \u2514\u2500\u2500 README.md",
      "\u251c\u2500\u2500 ui/ (78932 files)",
      "\u2502   \u251c\u2500\u2500 assets/ (1 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 css/ (1 files)",
      "\u2502   \u251c\u2500\u2500 components/ (21 files)",
      "\u2502   \u251c\u2500\u2500 composables/ (19 files)",
      "\u2502   \u251c\u2500\u2500 config/ (1 files)",
      "\u2502   \u251c\u2500\u2500 layouts/ (1 files)",
      "\u2502   \u251c\u2500\u2500 pages/ (2 files)",
      "\u2502   \u251c\u2500\u2500 plugins/ (1 files)",
      "\u2502   \u251c\u2500\u2500 public/ (2 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 icons/",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 wallets/",
      "\u2502   \u2502   \u251c\u2500\u2500 images/",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 logo/",
      "\u2502   \u2502   \u2502       \u251c\u2500\u2500 PNG/",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 SVG/",
      "\u2502   \u2502   \u2514\u2500\u2500 swap/ (1 files)",
      "\u2502   \u251c\u2500\u2500 scripts/ (1 files)",
      "\u2502   \u251c\u2500\u2500 services/ (2 files)",
      "\u2502   \u251c\u2500\u2500 utils/ (5 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 __tests__/ (1 files)",
      "\u2502   \u251c\u2500\u2500 package.json",
      "\u2502   \u2514\u2500\u2500 README.md",
      "\u251c\u2500\u2500 package.json",
      "\u2514\u2500\u2500 README.md"
    ]
  },
  "documentation_map": {
    "TODO.md": {
      "sections": [
        "Testing & Code Quality",
        "Frontend",
        "**CRITICAL: Centralize Wallet Connection State Management**",
        "**Other Frontend Issues**"
      ],
      "architecture_hints": []
    },
    "README.md": {
      "sections": [
        "CIRX Swap Platform",
        "\ud83d\ude80 Quick Start",
        "Prerequisites",
        "Development Setup",
        "\ud83e\uddea E2E Testing Quick Start",
        "Run all tests (frontend + backend + integration)",
        "Run only frontend tests",
        "Run only backend tests  ",
        "Run with detailed logs",
        "Frontend E2E tests"
      ],
      "architecture_hints": []
    },
    "CLAUDE.md": {
      "sections": [
        "CLAUDE.md",
        "Project Overview",
        "\u2705 RECENT PROGRESS SUMMARY (2025-08-29)",
        "**Critical AppKit/WalletConnect Integration RESOLVED**",
        "**Current System Status**",
        "**What's Working**",
        "**Next Steps for Development**",
        "**Files Modified in Recent Sessions**",
        "**Technical Improvements Completed**"
      ],
      "architecture_hints": []
    },
    "backend/README.md": {
      "sections": [
        "\ud83c\udf7e CIRX OTC Backend API - **TRANSACTION BREAKTHROUGH SUCCESS!**",
        "\ud83d\ude80 Quick Start",
        "Prerequisites",
        "Start Development Server",
        "Enter Nix development environment",
        "Start the backend server",
        "Server available at http://localhost:8080",
        "Test CIRX Transfer (\ud83c\udfaf WORKING!)",
        "\ud83c\udfc6 Breakthrough Technical Solution",
        "Working Transaction Parameters"
      ],
      "architecture_hints": []
    },
    "backend/TRANSACTION_READINESS.md": {
      "sections": [
        "Transaction Readiness Health Check System",
        "Endpoint",
        "Purpose",
        "Response Format",
        "Success Response (HTTP 200)",
        "Failure Response (HTTP 503)",
        "Health Checks Performed",
        "1. Database Connectivity & Write Capability",
        "2. Circular Protocol API Connectivity & Authentication",
        "3. Payment Verification Service Availability"
      ],
      "architecture_hints": []
    },
    "ui/README.md": {
      "sections": [
        "Circular CIRX OTC Platform - Frontend",
        "Features",
        "\u2705 Completed",
        "\ud83c\udfa8 Design Features",
        "\ud83d\udcb0 OTC Discount Tiers",
        "Quick Start",
        "1. Install Dependencies",
        "2. Environment Setup",
        "Edit .env with your configuration",
        "3. Development Server"
      ],
      "architecture_hints": []
    },
    "testing/README.md": {
      "sections": [
        "Testing Directory",
        "Structure",
        "Running Tests",
        "E2E Tests with Docker",
        "Start the complete E2E stack",
        "Run PHPUnit E2E tests",
        "Run Playwright tests",
        "Backend Tests",
        "Run all tests",
        "Run E2E tests only"
      ],
      "architecture_hints": []
    },
    ".github/workflows/PRs/Pull-Request-List.md": {
      "sections": [
        "Instructions",
        "\ud83d\udd34 PR 0: Fix Test Infrastructure (Unskipped Tests)",
        "\ud83d\udd34 PR 1: CI/CD Test Execution (GitHub Actions)",
        "\ud83d\udfe0 PR 2: Runtime Config & Hardcoded Values",
        "\ud83d\udfe0 PR 3: Lock Down Admin Endpoints"
      ],
      "architecture_hints": [
        "ui/test-results/junit.xml"
      ]
    }
  },
  "directory_purposes": {
    "backend": "Test files and test utilities",
    "ui": "Test files and test utilities",
    "testing": "Test files and test utilities",
    "backend/tests": "Test files and test utilities",
    "backend/public": "Publicly accessible files",
    "ui/utils": "Shared utility functions and helpers",
    "ui/services": "Business logic and external service integrations",
    "ui/components": "Reusable UI components",
    "ui/scripts": "Build and utility scripts",
    "ui/public": "Publicly accessible files",
    "ui/config": "Configuration files and settings",
    "iroh-bridge/src": "Source code root directory",
    "testing/scripts": "Build and utility scripts",
    "testing/e2e/frontend": "Test files and test utilities",
    "ui/utils/__tests__": "Test files and test utilities",
    "backend/tests/Integration": "Test files and test utilities",
    "backend/tests/E2E": "Test files and test utilities",
    "backend/database/migrations": "Database migration files",
    "backend/src/Middleware": "Middleware functions and handlers",
    "backend/src/Utils": "Shared utility functions and helpers",
    "backend/src/Controllers": "Request handlers and business logic",
    "backend/src/Models": "Data models and database schemas",
    "backend/src/Services": "Business logic and external service integrations",
    "backend/tests/Integration/API": "API endpoints and route handlers",
    "backend/tests/Integration/CircularProtocol": "Test files and test utilities",
    "backend/tests/Integration/Database": "Test files and test utilities",
    "backend/tests/Integration/Services": "Business logic and external service integrations",
    "backend/tests/Integration/Workers": "Test files and test utilities",
    "backend/tests/Unit/Middleware": "Middleware functions and handlers",
    "backend/tests/Unit/Utils": "Shared utility functions and helpers",
    "backend/tests/Unit/Blockchain": "Test files and test utilities",
    "backend/tests/Unit/CircularProtocol": "Test files and test utilities",
    "backend/tests/Unit/Controllers": "Request handlers and business logic",
    "backend/tests/Unit/Models": "Data models and database schemas",
    "backend/tests/Unit/Services": "Business logic and external service integrations",
    "backend/tests/Unit/Workers": "Test files and test utilities",
    "backend/tests/Unit/Validators": "Test files and test utilities"
  },
  "stats": {
    "total_files": 221,
    "total_directories": 74,
    "fully_parsed": {
      "shell": 2,
      "typescript": 9,
      "javascript": 33
    },
    "listed_only": {
      "json": 10,
      "shell": 1,
      "php": 129,
      "vue": 25,
      "html": 3,
      "sql": 2,
      "rs": 6,
      "css": 1
    },
    "markdown_files": 8
  },
  "files": {
    "package.json": {
      "language": "json",
      "parsed": false
    },
    "PROJECT_INDEX.json": {
      "language": "json",
      "parsed": false
    },
    "build.sh": {
      "language": "shell",
      "parsed": false
    },
    "start-dev.sh": {
      "language": "shell",
      "parsed": true,
      "functions": {
        "check_port": {
          "doc": "Function to check if port is in use",
          "signature": "()"
        },
        "cleanup": {
          "doc": "Function to cleanup on exit",
          "signature": "()",
          "called_by": [
            "monitorTransaction"
          ]
        }
      },
      "variables": [
        "BACKEND_PID",
        "FRONTEND_PID"
      ],
      "call_graph": {}
    },
    "package-lock.json": {
      "language": "json",
      "parsed": false
    },
    "backend/show_schema.php": {
      "language": "php",
      "parsed": false
    },
    "backend/debug.php": {
      "language": "php",
      "parsed": false
    },
    "backend/monitoring-check.php": {
      "language": "php",
      "parsed": false
    },
    "backend/debug_hash_validation.php": {
      "language": "php",
      "parsed": false
    },
    "backend/PROJECT_INDEX.json": {
      "language": "json",
      "parsed": false
    },
    "backend/test_transaction_ready.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/migrate.php": {
      "language": "php",
      "parsed": false
    },
    "backend/composer.json": {
      "language": "json",
      "parsed": false
    },
    "backend/debug-server.php": {
      "language": "php",
      "parsed": false
    },
    "backend/cleanup_stuck_transactions.php": {
      "language": "php",
      "parsed": false
    },
    "backend/fix_bogus_transaction.php": {
      "language": "php",
      "parsed": false
    },
    "backend/debug_validator.php": {
      "language": "php",
      "parsed": false
    },
    "backend/analyze_transaction_failures.php": {
      "language": "php",
      "parsed": false
    },
    "backend/check_transactions.php": {
      "language": "php",
      "parsed": false
    },
    "backend/worker.php": {
      "language": "php",
      "parsed": false
    },
    "ui/tsconfig.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "ui/package.json": {
      "language": "json",
      "parsed": false
    },
    "ui/app.vue": {
      "language": "vue",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "ui/_routes.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Route definitions"
    },
    "ui/nuxt.config.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Configuration"
    },
    "ui/test-page.html": {
      "language": "html",
      "parsed": false,
      "purpose": "Test file"
    },
    "ui/tailwind.config.js": {
      "language": "javascript",
      "parsed": false,
      "purpose": "Configuration"
    },
    "ui/package-lock.json": {
      "language": "json",
      "parsed": false
    },
    "testing/playwright.config.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Configuration"
    },
    "testing/vitest.config.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/data/e2e-setup.sql": {
      "language": "sql",
      "parsed": false
    },
    "testing/scripts/run-tests.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/scripts/test-api.html": {
      "language": "html",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/scripts/test_telegram.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/scripts/check-console.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "http"
      ],
      "functions": {
        "checkApp": "()"
      },
      "classes": {},
      "variables": [
        "http",
        "options",
        "req",
        "data",
        "hasError",
        "hasUndefined",
        "hasConsole",
        "lines",
        "errorLines",
        "scriptMatches"
      ],
      "call_graph": {}
    },
    "testing/scripts/validate-e2e-setup.sh": {
      "language": "shell",
      "parsed": true,
      "functions": {
        "check_file": {
          "doc": "Function to check if file exists",
          "signature": "()"
        },
        "check_directory": {
          "doc": "Function to check if directory exists",
          "signature": "()"
        },
        "count_test_methods": {
          "doc": "Count test methods in each file",
          "signature": "()"
        }
      },
      "variables": [
        "ERRORS",
        "ENV_VARS",
        "TOTAL_TESTS"
      ],
      "call_graph": {}
    },
    "testing/scripts/test-api.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/scripts/test-auto-worker.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "functions": {
        "testWorkerEndpoint": {
          "signature": "async (endpoint, method = 'GET')",
          "called_by": [
            "runTest"
          ]
        },
        "runTest": {
          "calls": [
            "testWorkerEndpoint"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "constants": {
        "API_BASE": "str"
      },
      "variables": [
        "response",
        "data",
        "health",
        "stats",
        "pv",
        "ct",
        "process",
        "payment",
        "cirx",
        "i",
        "result",
        "total"
      ],
      "call_graph": {}
    },
    "testing/e2e/frontend/wallet-integration.spec.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/e2e/frontend/performance.spec.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/e2e/frontend/error-scenarios.spec.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/e2e/frontend/frontend-backend-integration.spec.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/e2e/frontend/app.spec.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Test file"
    },
    "testing/e2e/frontend/swap-flow.spec.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@playwright/test"
      ],
      "functions": {
        "connectWallet": "async (page)"
      },
      "classes": {},
      "variables": [
        "url",
        "method",
        "walletButton",
        "otcTab",
        "amountInput",
        "tokenSelector",
        "recipientInput",
        "discountSelector",
        "swapSummary",
        "initiateButton",
        "paymentInstructions",
        "successMessage",
        "transactionId",
        "txId",
        "liquidTab",
        "swapButton",
        "response",
        "errorMessage",
        "walletPrompt",
        "validationError",
        "retryButton",
        "swapForm",
        "mobileMenu"
      ],
      "call_graph": {}
    },
    "iroh-bridge/src/service_registry.rs": {
      "language": "rs",
      "parsed": false
    },
    "iroh-bridge/src/iroh_client.rs": {
      "language": "rs",
      "parsed": false
    },
    "iroh-bridge/src/http_bridge.rs": {
      "language": "rs",
      "parsed": false
    },
    "iroh-bridge/src/config.rs": {
      "language": "rs",
      "parsed": false,
      "purpose": "Configuration"
    },
    "iroh-bridge/src/main.rs": {
      "language": "rs",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "iroh-bridge/src/error.rs": {
      "language": "rs",
      "parsed": false
    },
    "ui/utils/formatting.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "formatNumber": {
          "signature": "(value, options = {})",
          "called_by": [
            "formatTokenAmount",
            "formatCurrency",
            "calculateQuote"
          ]
        },
        "formatTokenAmount": {
          "calls": [
            "formatNumber"
          ],
          "signature": "(amount, options = {})"
        },
        "formatCurrency": {
          "calls": [
            "formatNumber"
          ],
          "signature": "(amount, options = {})"
        },
        "formatPercentage": "(value, options = {})",
        "formatDuration": "(seconds, options = {})",
        "formatFileSize": "(bytes, options = {})",
        "formatTransactionHash": "(hash, options = {})",
        "formatTimeAgo": "(date, options = {})"
      },
      "classes": {},
      "variables": [
        "numValue",
        "formatOptions",
        "numAmount",
        "displayValue",
        "units",
        "parts",
        "remaining",
        "count",
        "k",
        "sizes",
        "i",
        "size",
        "now",
        "targetDate",
        "rtf",
        "diffInSeconds",
        "interval"
      ],
      "call_graph": {}
    },
    "ui/utils/toast.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "checkForToast": "()"
      },
      "classes": {},
      "variables": [
        "safeToast",
        "checkForToast",
        "toastCheckInterval"
      ],
      "call_graph": {}
    },
    "ui/utils/addressFormatting.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "isValidEthereumAddress": {
          "signature": "(address)",
          "called_by": [
            "isValidCircularAddress",
            "getAddressType",
            "isValidAddressForChain"
          ]
        },
        "isValidSolanaAddress": {
          "signature": "(address)",
          "called_by": [
            "getAddressType",
            "isValidAddressForChain"
          ]
        },
        "isValidCircularAddress": {
          "calls": [
            "isValidEthereumAddress"
          ],
          "signature": "(address)",
          "called_by": [
            "getAddressType",
            "isValidAddressForChain"
          ]
        },
        "getAddressType": {
          "calls": [
            "isValidCircularAddress",
            "isValidEthereumAddress",
            "isValidSolanaAddress"
          ],
          "signature": "(address)"
        },
        "formatAddress": "(address, prefixLength = 6, suffixLength = 4)",
        "isValidAddressForChain": {
          "calls": [
            "isValidCircularAddress",
            "isValidEthereumAddress",
            "isValidSolanaAddress"
          ],
          "signature": "(address, chain)"
        }
      },
      "classes": {},
      "call_graph": {}
    },
    "ui/utils/validation.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "./addressFormatting.js"
      ],
      "functions": {
        "validateTokenAmount": "(amount, options = {})",
        "validateWalletAddress": "(address, type = 'auto')",
        "validateEmail": "(email, required = true)",
        "validatePassword": "(password, options = {})",
        "validateForm": "(formData, rules)"
      },
      "classes": {},
      "variables": [
        "result",
        "numAmount",
        "decimalsRegex",
        "cleanAddress",
        "emailRegex",
        "results",
        "isFormValid",
        "fieldRules",
        "fieldResult",
        "customResult"
      ],
      "call_graph": {}
    },
    "ui/services/tokenService.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "getETHBalance": {
          "signature": "async (address, provider)",
          "called_by": [
            "getAllTokenBalances",
            "hasSufficientBalance"
          ]
        },
        "getTokenBalance": {
          "calls": [
            "getTokenDecimals"
          ],
          "signature": "async (tokenSymbol, address, provider)",
          "called_by": [
            "getAllTokenBalances",
            "hasSufficientBalance"
          ]
        },
        "getTokenDecimals": {
          "signature": "(tokenSymbol)",
          "called_by": [
            "getTokenBalance",
            "getTokenBalance",
            "approveToken",
            "getAllowance",
            "getLiquidQuote",
            "getOTCQuote",
            "executeLiquidSwap",
            "executeOTCSwap"
          ]
        },
        "getAllTokenBalances": {
          "calls": [
            "getETHBalance",
            "getTokenBalance"
          ],
          "signature": "async (address, provider)"
        },
        "validateTokenContract": "async (tokenSymbol, provider)",
        "formatBalance": "(balance, decimals = 6)",
        "hasSufficientBalance": {
          "calls": [
            "getETHBalance",
            "getTokenBalance"
          ],
          "signature": "async (address, tokenSymbol, amount, provider)"
        }
      },
      "classes": {},
      "constants": {
        "TOKEN_ADDRESSES": "collection"
      },
      "variables": [
        "getETHBalance",
        "balanceWei",
        "balanceEth",
        "getTokenBalance",
        "contractAddress",
        "data",
        "result",
        "balance",
        "decimals",
        "formattedBalance",
        "getTokenDecimals",
        "getAllTokenBalances",
        "validateTokenContract",
        "formatBalance",
        "num",
        "hasSufficientBalance",
        "available",
        "required",
        "gasReserve"
      ],
      "call_graph": {}
    },
    "ui/services/priceService.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "fetchCIRXPrice": {
          "signature": "async ()",
          "called_by": [
            "getTokenPrices",
            "testCirxFetch"
          ]
        },
        "fetchCoinGeckoPrices": {
          "signature": "async ()",
          "called_by": [
            "getTokenPrices"
          ]
        },
        "getFallbackPrices": {
          "signature": "()",
          "called_by": [
            "getTokenPrices"
          ]
        },
        "getTokenPrices": {
          "calls": [
            "fetchCIRXPrice",
            "fetchCoinGeckoPrices",
            "getFallbackPrices"
          ],
          "signature": "async ()",
          "called_by": [
            "getTokenPrice",
            "refreshPrices",
            "getCirxPriceInfo"
          ]
        },
        "getTokenPrice": {
          "calls": [
            "getTokenPrices"
          ],
          "signature": "async (tokenSymbol)",
          "called_by": [
            "calculateQuote",
            "calculateReverseQuote",
            "validateSwap",
            "qualifiesForOTC"
          ]
        },
        "getPriceSource": "()",
        "refreshPrices": {
          "calls": [
            "getTokenPrices"
          ],
          "signature": "async ()"
        },
        "getCacheInfo": {
          "signature": "()",
          "called_by": [
            "getCirxPriceInfo"
          ]
        },
        "getCirxPriceInfo": {
          "calls": [
            "getCacheInfo",
            "getTokenPrices"
          ],
          "signature": "async ()"
        },
        "testCirxFetch": {
          "calls": [
            "fetchCIRXPrice"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "constants": {
        "PRICE_CACHE_DURATION": "value"
      },
      "variables": [
        "priceCache",
        "lastFetch",
        "fetchCIRXPrice",
        "market",
        "marketData",
        "price",
        "fetchCoinGeckoPrices",
        "response",
        "data",
        "getFallbackPrices",
        "getTokenPrices",
        "now",
        "majorTokenPrices",
        "cirxPriceInUsdt",
        "usdtPrice",
        "cirxPriceInUsd",
        "allPrices",
        "fallbackPrices",
        "getTokenPrice",
        "prices",
        "getPriceSource",
        "refreshPrices",
        "getCacheInfo",
        "ageMs",
        "ageMinutes",
        "getCirxPriceInfo",
        "cacheInfo",
        "testCirxFetch",
        "cirxPrice"
      ],
      "call_graph": {}
    },
    "ui/layouts/default.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/composables/useOtcConfig.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Configuration",
      "imports": [
        "vue"
      ],
      "functions": {
        "useOtcConfig": "()",
        "fetchConfig": {
          "calls": [
            "validateConfig"
          ],
          "signature": "async (url = '/swap/discount.json')",
          "called_by": [
            "initialize"
          ]
        },
        "validateConfig": {
          "signature": "(config)",
          "called_by": [
            "fetchConfig",
            "updateConfig"
          ]
        },
        "resetToDefault": "()",
        "updateConfig": {
          "calls": [
            "validateConfig"
          ],
          "signature": "(updates)"
        },
        "getDiscountForAmount": {
          "signature": "(usdAmount)",
          "called_by": [
            "getTierInfo"
          ]
        },
        "qualifiesForOtc": "(usdAmount)",
        "getTierInfo": {
          "calls": [
            "getDiscountForAmount"
          ],
          "signature": "(usdAmount)"
        },
        "initialize": {
          "calls": [
            "fetchConfig"
          ],
          "signature": "async ()",
          "called_by": [
            "reconnect"
          ]
        }
      },
      "classes": {},
      "variables": [
        "defaultConfig",
        "otcConfig",
        "isLoading",
        "lastUpdated",
        "error",
        "discountTiers",
        "vestingPeriod",
        "fees",
        "isEnabled",
        "minimumOtcAmount",
        "displayRange",
        "tiers",
        "minDiscount",
        "maxDiscount",
        "fetchConfig",
        "response",
        "config",
        "validatedConfig",
        "validateConfig",
        "validated",
        "validTiers",
        "validFees",
        "resetToDefault",
        "updateConfig",
        "validatedUpdates",
        "getDiscountForAmount",
        "qualifiesForOtc",
        "getTierInfo",
        "discount",
        "tier",
        "initialize"
      ],
      "call_graph": {}
    },
    "ui/composables/useSwapService.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue",
        "viem"
      ],
      "functions": {
        "useSwapService": "()",
        "validateConnection": {
          "signature": "()",
          "called_by": [
            "getTokenBalance",
            "approveToken",
            "getLiquidQuote",
            "getOTCQuote",
            "executeLiquidSwap",
            "executeOTCSwap",
            "getVestingInfo",
            "claimVestedTokens"
          ]
        },
        "validateContractAddress": {
          "signature": "(contractType)",
          "called_by": [
            "approveToken",
            "getAllowance",
            "getLiquidQuote",
            "getOTCQuote",
            "executeLiquidSwap",
            "executeOTCSwap",
            "getVestingInfo",
            "claimVestedTokens"
          ]
        },
        "getTokenDecimals": {
          "signature": "(tokenSymbol)",
          "called_by": [
            "getTokenBalance",
            "getTokenBalance",
            "approveToken",
            "getAllowance",
            "getLiquidQuote",
            "getOTCQuote",
            "executeLiquidSwap",
            "executeOTCSwap"
          ]
        },
        "getTokenBalance": {
          "calls": [
            "getTokenDecimals",
            "validateConnection"
          ],
          "signature": "async (tokenSymbol, userAddress = null)",
          "called_by": [
            "getAllTokenBalances",
            "hasSufficientBalance"
          ]
        },
        "approveToken": {
          "calls": [
            "getTokenDecimals",
            "validateConnection",
            "validateContractAddress"
          ],
          "signature": "async (tokenSymbol, spenderAddress, amount)",
          "called_by": [
            "executeLiquidSwap",
            "executeOTCSwap"
          ]
        },
        "getAllowance": {
          "calls": [
            "getTokenDecimals",
            "validateContractAddress"
          ],
          "signature": "async (tokenSymbol, ownerAddress, spenderAddress)",
          "called_by": [
            "executeLiquidSwap",
            "executeOTCSwap"
          ]
        },
        "getLiquidQuote": {
          "calls": [
            "getTokenDecimals",
            "validateConnection",
            "validateContractAddress"
          ],
          "signature": "async (inputToken, inputAmount)"
        },
        "getOTCQuote": {
          "calls": [
            "getTokenDecimals",
            "validateConnection",
            "validateContractAddress"
          ],
          "signature": "async (inputToken, inputAmount)"
        },
        "executeLiquidSwap": {
          "calls": [
            "approveToken",
            "getAllowance",
            "getTokenDecimals",
            "validateConnection",
            "validateContractAddress"
          ],
          "signature": "async (inputToken, inputAmount, minCirxOut, slippageTolerance = 0.5)"
        },
        "executeOTCSwap": {
          "calls": [
            "approveToken",
            "getAllowance",
            "getTokenDecimals",
            "validateConnection",
            "validateContractAddress"
          ],
          "signature": "async (inputToken, inputAmount, minCirxOut, slippageTolerance = 0.5)"
        },
        "getVestingInfo": {
          "calls": [
            "validateConnection",
            "validateContractAddress"
          ],
          "signature": "async (userAddress = null)"
        },
        "claimVestedTokens": {
          "calls": [
            "validateConnection",
            "validateContractAddress"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "constants": {
        "CONTRACT_CONFIG": "collection"
      },
      "variables": [
        "runtimeConfig",
        "isDevelopment",
        "currentConfig",
        "contractsDeployed",
        "validateConnection",
        "validateContractAddress",
        "address",
        "getTokenDecimals",
        "decimals",
        "getTokenBalance",
        "balance",
        "tokenAddress",
        "mockBalances",
        "approveToken",
        "amountWei",
        "hash",
        "getAllowance",
        "allowance",
        "getLiquidQuote",
        "mockPrice",
        "contractAddress",
        "getOTCQuote",
        "baseAmount",
        "usdValue",
        "discount",
        "discountMultiplier",
        "cirxAmount",
        "executeLiquidSwap",
        "paymentAddress",
        "response",
        "slippageMultiplier",
        "adjustedMinOut",
        "minOutWei",
        "currentAllowance",
        "executeOTCSwap",
        "getVestingInfo",
        "claimVestedTokens"
      ],
      "interfaces": {
        "return": {
          "doc": "Swap service for backend API integration"
        }
      },
      "call_graph": {}
    },
    "ui/composables/useAutoWorker.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "useAutoWorker": {
          "calls": [
            "processTransactions",
            "stopAutoProcessing"
          ],
          "signature": "()"
        },
        "processTransactions": {
          "signature": "async ()",
          "called_by": [
            "useAutoWorker",
            "startAutoProcessing",
            "triggerManualProcess"
          ]
        },
        "startAutoProcessing": {
          "calls": [
            "processTransactions"
          ],
          "signature": "()"
        },
        "stopAutoProcessing": {
          "signature": "()",
          "called_by": [
            "useAutoWorker"
          ]
        },
        "getWorkerStatus": "()",
        "triggerManualProcess": {
          "calls": [
            "processTransactions"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "useAutoWorker",
        "isProcessing",
        "lastProcessed",
        "processInterval",
        "errorCount",
        "maxErrors",
        "config",
        "processTransactions",
        "apiConfig",
        "response",
        "result",
        "totalProcessed",
        "startAutoProcessing",
        "backoffInterval",
        "stopAutoProcessing",
        "getWorkerStatus",
        "triggerManualProcess",
        "route",
        "autoStartPages"
      ],
      "call_graph": {}
    },
    "ui/composables/useCTAState.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "useCTAState": "({ // Core state props walletConnected, recipientAddress, recipientAddressError, inputAmount, addressValidationState, activeTab, quote, // Optional customization loadingText = null, variant = 'primary' })",
        "handleButtonClick": "(event, emit)"
      },
      "classes": {},
      "variables": [
        "buttonType",
        "buttonText",
        "discount",
        "buttonClasses",
        "baseClasses",
        "isButtonDisabled",
        "handleButtonClick",
        "currentState"
      ],
      "call_graph": {}
    },
    "ui/composables/useTransactionHistory.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "useTransactionHistory": "()",
        "apiCall": {
          "signature": "async (endpoint, options = {})",
          "called_by": [
            "fetchTransactionHistory",
            "fetchVestingPositions",
            "fetchUserStats"
          ]
        },
        "withRetry": {
          "signature": "async (operation, maxRetries = 3)",
          "called_by": [
            "fetchTransactionHistory"
          ]
        },
        "fetchTransactionHistory": {
          "calls": [
            "apiCall",
            "getUserFriendlyError",
            "withRetry"
          ],
          "signature": "async (userAddress, options = {})",
          "called_by": [
            "fetchUserData"
          ]
        },
        "getUserFriendlyError": {
          "signature": "(error)",
          "called_by": [
            "fetchTransactionHistory"
          ]
        },
        "fetchVestingPositions": {
          "calls": [
            "apiCall"
          ],
          "signature": "async (userAddress)",
          "called_by": [
            "fetchUserData"
          ]
        },
        "fetchUserStats": {
          "calls": [
            "apiCall"
          ],
          "signature": "async (userAddress)",
          "called_by": [
            "fetchUserData"
          ]
        },
        "fetchUserData": {
          "calls": [
            "fetchTransactionHistory",
            "fetchUserStats",
            "fetchVestingPositions"
          ],
          "signature": "async (userAddress)"
        },
        "formatTransaction": {
          "calls": [
            "getTokenSymbol"
          ],
          "signature": "(tx)"
        },
        "formatVestingPosition": "(position)",
        "getTokenSymbol": {
          "signature": "(tokenAddress)",
          "called_by": [
            "formatTransaction"
          ]
        },
        "formatUserStats": "(stats)",
        "checkIndexerHealth": {
          "signature": "async ()",
          "called_by": [
            "checkServiceStatus"
          ]
        },
        "checkServiceStatus": {
          "calls": [
            "checkIndexerHealth"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "for": {
          "methods": {
            "constructor": "(message, status, code, requestId, endpoint, originalError)",
            "__init__": "(message, status, code, requestId, endpoint, originalError)"
          }
        },
        "ApiError": {
          "methods": {
            "constructor": "(message, status, code, requestId, endpoint, originalError)",
            "__init__": "(message, status, code, requestId, endpoint, originalError)"
          },
          "extends": "Error",
          "type": "exception"
        }
      },
      "constants": {
        "INDEXER_API_BASE": "str"
      },
      "variables": [
        "useTransactionHistory",
        "isLoading",
        "error",
        "transactions",
        "vestingPositions",
        "userStats",
        "apiCall",
        "controller",
        "timeoutId",
        "response",
        "withRetry",
        "attempt",
        "baseDelay",
        "delay",
        "fetchTransactionHistory",
        "queryParams",
        "endpoint",
        "data",
        "userFriendlyError",
        "getUserFriendlyError",
        "fetchVestingPositions",
        "fetchUserStats",
        "fetchUserData",
        "formatTransaction",
        "formatVestingPosition",
        "getTokenSymbol",
        "tokenMap",
        "formatUserStats",
        "checkIndexerHealth",
        "serviceStatus",
        "checkServiceStatus",
        "isHealthy",
        "formattedTransactions",
        "formattedVestingPositions",
        "formattedUserStats",
        "hasTransactions",
        "hasVestingPositions",
        "hasAnyData"
      ],
      "call_graph": {}
    },
    "ui/composables/useTransactionStatus.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue",
        "./useBackendApi",
        "~/utils/toast.js"
      ],
      "functions": {
        "useTransactionStatus": "()",
        "trackTransaction": {
          "calls": [
            "startPolling"
          ],
          "signature": "(transactionId, options = {})"
        },
        "startPolling": {
          "calls": [
            "pollStatus",
            "stopPolling",
            "updateTransactionStatus"
          ],
          "signature": "(transactionId, interval = 3000)",
          "called_by": [
            "trackTransaction"
          ]
        },
        "stopPolling": {
          "signature": "(transactionId)",
          "called_by": [
            "startPolling",
            "removeTransaction",
            "pollStatus"
          ]
        },
        "updateTransactionStatus": {
          "calls": [
            "showPhaseNotification"
          ],
          "signature": "(transactionId, statusData)",
          "called_by": [
            "startPolling",
            "pollStatus"
          ]
        },
        "showPhaseNotification": {
          "calls": [
            "getNotificationTimeout"
          ],
          "signature": "(phase, statusData)",
          "called_by": [
            "updateTransactionStatus"
          ]
        },
        "getNotificationTimeout": {
          "signature": "(phase)",
          "called_by": [
            "showPhaseNotification"
          ]
        },
        "getTransaction": "(transactionId)",
        "removeTransaction": {
          "calls": [
            "stopPolling"
          ],
          "signature": "(transactionId)"
        },
        "pollStatus": {
          "calls": [
            "stopPolling",
            "updateTransactionStatus"
          ],
          "signature": "async ()",
          "called_by": [
            "startPolling"
          ]
        }
      },
      "classes": {},
      "variables": [
        "transactions",
        "activePolling",
        "pollingIntervals",
        "transactionPhases",
        "transactionState",
        "transaction",
        "pollStatus",
        "response",
        "statusData",
        "intervalId",
        "previousPhase",
        "phaseConfig",
        "toast",
        "notification",
        "allTransactions",
        "activeTransactions"
      ],
      "call_graph": {}
    },
    "ui/composables/useCookieConsent.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "useCookieConsent": {
          "calls": [
            "hasConsent"
          ],
          "signature": "()"
        },
        "hasConsent": {
          "signature": "()",
          "called_by": [
            "useCookieConsent",
            "hasAnalyticsConsent",
            "getConsentDetails"
          ]
        },
        "hasAnalyticsConsent": {
          "calls": [
            "hasConsent"
          ],
          "signature": "()"
        },
        "setConsent": "(level)",
        "clearConsent": "()",
        "getConsentDetails": {
          "calls": [
            "hasConsent"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "variables": [
        "useCookieConsent",
        "hasConsent",
        "consent",
        "consentData",
        "oneYear",
        "cookieConsent",
        "hasAnalyticsConsent",
        "consentLevel",
        "setConsent",
        "expires",
        "clearConsent",
        "getConsentDetails",
        "level"
      ],
      "call_graph": {}
    },
    "ui/composables/useErrorHandler.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "useErrorHandler": "()",
        "categorizeError": {
          "signature": "(error)",
          "called_by": [
            "handleError"
          ]
        },
        "getErrorSeverity": {
          "signature": "(error, category)",
          "called_by": [
            "getRecoveryActions",
            "handleError"
          ]
        },
        "getUserFriendlyMessage": {
          "signature": "(error, category)",
          "called_by": [
            "handleError"
          ]
        },
        "getRecoveryActions": {
          "calls": [
            "getErrorSeverity"
          ],
          "signature": "(error, category, context = {})",
          "called_by": [
            "handleError"
          ]
        },
        "handleError": {
          "calls": [
            "categorizeError",
            "getErrorSeverity",
            "getRecoveryActions",
            "getUserFriendlyMessage",
            "normalizeError"
          ],
          "signature": "(error, context = {})"
        },
        "normalizeError": {
          "signature": "(error)",
          "called_by": [
            "handleError"
          ]
        },
        "clearError": "()",
        "clearAllErrors": "()",
        "shouldShowAsToast": "(error)",
        "shouldShowInline": "(error)"
      },
      "classes": {},
      "constants": {
        "ERROR_CATEGORIES": "collection"
      },
      "variables": [
        "currentError",
        "errorHistory",
        "isHandling",
        "categorizeError",
        "message",
        "code",
        "getErrorSeverity",
        "getUserFriendlyMessage",
        "messages",
        "categoryMessages",
        "errorMessage",
        "getRecoveryActions",
        "actions",
        "handleError",
        "normalizedError",
        "category",
        "severity",
        "processedError",
        "normalizeError",
        "clearError",
        "clearAllErrors",
        "shouldShowAsToast",
        "shouldShowInline",
        "hasError",
        "errorCount",
        "recentErrors"
      ],
      "call_graph": {}
    },
    "ui/composables/useBackendApi.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "useBackendApi": "()",
        "getHeaders": {
          "signature": "()",
          "called_by": [
            "initiateSwap",
            "getTransactionStatus",
            "getCirxBalance"
          ]
        },
        "handleApiResponse": {
          "signature": "async (response)",
          "called_by": [
            "initiateSwap",
            "getTransactionStatus",
            "getCirxBalance"
          ]
        },
        "initiateSwap": {
          "calls": [
            "getHeaders",
            "handleApiResponse"
          ],
          "signature": "async (swapData)"
        },
        "getTransactionStatus": {
          "calls": [
            "getHeaders",
            "handleApiResponse"
          ],
          "signature": "async (swapId)"
        },
        "getCirxBalance": {
          "calls": [
            "getHeaders",
            "handleApiResponse"
          ],
          "signature": "async (address)"
        },
        "calculateCirxQuote": "(paymentAmount, paymentToken, isOTC = false)",
        "getDepositAddress": "(paymentToken, paymentChain = 'ethereum')",
        "validateCircularAddress": "(address)",
        "createSwapTransaction": "(paymentTxId, paymentChain, cirxRecipientAddress, amountPaid, paymentToken)"
      },
      "classes": {},
      "constants": {
        "API_BASE_URL": "value"
      },
      "variables": [
        "runtimeConfig",
        "isLoading",
        "lastError",
        "getHeaders",
        "headers",
        "handleApiResponse",
        "errorData",
        "errorMessage",
        "initiateSwap",
        "requiredFields",
        "missing",
        "fullUrl",
        "response",
        "result",
        "getTransactionStatus",
        "data",
        "getCirxBalance",
        "calculateCirxQuote",
        "amount",
        "tokenPrices",
        "tokenPrice",
        "platformFeeCirx",
        "platformFeeUsd",
        "usdAmount",
        "grossCirxAmount",
        "discountPercentage",
        "discountMultiplier",
        "netCirxAmount",
        "totalPaymentRequired",
        "getDepositAddress",
        "tokenAddressMap",
        "chainAddressMap",
        "validateCircularAddress",
        "circularAddressRegex",
        "createSwapTransaction"
      ],
      "interfaces": {
        "return": {
          "doc": "Backend API Integration for CIRX OTC Platform"
        }
      },
      "call_graph": {}
    },
    "ui/composables/useRealTimeTransactions.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue",
        "./useIrohNetwork"
      ],
      "functions": {
        "return": "()",
        "useRealTimeTransactions": "()",
        "subscribeToTransaction": {
          "calls": [
            "handleTransactionUpdate"
          ],
          "signature": "(transactionId, callback)",
          "called_by": [
            "monitorTransaction"
          ]
        },
        "handleTransactionUpdate": {
          "signature": "(update)",
          "called_by": [
            "subscribeToTransaction"
          ]
        },
        "getTransaction": "async (transactionId)",
        "monitorTransaction": {
          "calls": [
            "cleanup",
            "subscribeToTransaction"
          ],
          "signature": "(transactionId, options = {})"
        },
        "cleanup": {
          "signature": "()",
          "called_by": [
            "monitorTransaction"
          ]
        },
        "broadcastTransactionEvent": "async (transactionId, eventType, data = {})",
        "getAllTransactions": "()",
        "clearCache": "()",
        "getCachedTransaction": "(transactionId)",
        "updateCachedTransaction": "(transactionId, updates)",
        "isMonitoring": "(transactionId)",
        "getMonitoringStats": "()"
      },
      "classes": {},
      "variables": [
        "useRealTimeTransactions",
        "transactions",
        "subscriptions",
        "updateListeners",
        "subscribeToTransaction",
        "unsubscribe",
        "listeners",
        "handleTransactionUpdate",
        "transactionId",
        "existingTransaction",
        "updatedTransaction",
        "getTransaction",
        "cached",
        "response",
        "transaction",
        "monitorTransaction",
        "cleanup",
        "broadcastTransactionEvent",
        "event",
        "getAllTransactions",
        "clearCache",
        "getCachedTransaction",
        "updateCachedTransaction",
        "existing",
        "updated",
        "isMonitoring",
        "getMonitoringStats"
      ],
      "call_graph": {}
    },
    "ui/composables/usePriceData.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "usePriceData": "()",
        "fetchCurrentPrice": {
          "calls": [
            "fetchPriceFromDEXTools"
          ],
          "signature": "async ()",
          "called_by": [
            "updatePriceData"
          ]
        },
        "fetchPriceFromDEXTools": {
          "signature": "async ()",
          "called_by": [
            "fetchCurrentPrice"
          ]
        },
        "generateHistoricalData": {
          "signature": "(currentPriceValue, days = 7)",
          "called_by": [
            "updatePriceData"
          ]
        },
        "calculateTradingPairs": "(cirxPriceUSD)",
        "updatePriceData": {
          "calls": [
            "fetchCurrentPrice",
            "generateHistoricalData"
          ],
          "signature": "async ()",
          "called_by": [
            "startPriceUpdates"
          ]
        },
        "startPriceUpdates": {
          "calls": [
            "updatePriceData"
          ],
          "signature": "()",
          "called_by": [
            "useAggregatePriceFeed"
          ]
        },
        "stopPriceUpdates": {
          "signature": "()",
          "called_by": [
            "useAggregatePriceFeed"
          ]
        }
      },
      "classes": {},
      "constants": {
        "CIRX_CONTRACT": "str"
      },
      "variables": [
        "currentPrice",
        "priceHistory",
        "isLoading",
        "error",
        "lastUpdated",
        "updateTimer",
        "priceCache",
        "fetchCurrentPrice",
        "cacheKey",
        "cached",
        "response",
        "data",
        "cirxData",
        "priceData",
        "fetchPriceFromDEXTools",
        "generateHistoricalData",
        "now",
        "msPerDay",
        "pointsPerDay",
        "totalPoints",
        "price",
        "i",
        "time",
        "volatility",
        "change",
        "calculateTradingPairs",
        "tokenPrices",
        "updatePriceData",
        "weekAgo",
        "startPriceUpdates",
        "stopPriceUpdates",
        "tradingPairs",
        "formattedPrice",
        "priceForSymbol"
      ],
      "call_graph": {}
    },
    "ui/composables/useSingleExchangeDatafeed.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "useSingleExchangeDatafeed": {
          "calls": [
            "fetchSingleExchangeData",
            "generateSimpleBars"
          ],
          "signature": "()"
        },
        "fetchSingleExchangeData": {
          "calls": [
            "fetchWithTimeout"
          ],
          "signature": "async (exchange, symbol, pair)",
          "called_by": [
            "useSingleExchangeDatafeed",
            "createSingleExchangeDatafeed"
          ]
        },
        "generateSimpleBars": {
          "calls": [
            "getResolutionMs"
          ],
          "signature": "(currentData, periodParams, resolution)",
          "called_by": [
            "useSingleExchangeDatafeed",
            "createSingleExchangeDatafeed"
          ]
        },
        "getResolutionMs": {
          "signature": "(resolution)",
          "called_by": [
            "generateSimpleBars"
          ]
        },
        "createSingleExchangeDatafeed": {
          "calls": [
            "fetchSingleExchangeData",
            "generateSimpleBars"
          ],
          "signature": "(exchange)"
        },
        "fetchWithTimeout": {
          "signature": "(url)",
          "called_by": [
            "fetchSingleExchangeData"
          ]
        }
      },
      "classes": {},
      "variables": [
        "createSingleExchangeDatafeed",
        "symbols",
        "symbolInfo",
        "data",
        "bars",
        "updateInterval",
        "bar",
        "intervalId",
        "timeoutMs",
        "fetchWithTimeout",
        "ticker",
        "now",
        "price",
        "volume",
        "resolutionMs",
        "barsCount",
        "i",
        "time",
        "variation",
        "randomPrice"
      ],
      "call_graph": {}
    },
    "ui/composables/useAggregateDatafeed.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "../scripts/aggregateMarket.js"
      ],
      "functions": {
        "useAggregateDatafeed": {
          "signature": "()",
          "called_by": [
            "createAggregateDatafeed"
          ]
        },
        "createDatafeed": {
          "signature": "()",
          "called_by": [
            "createAggregateDatafeed"
          ]
        },
        "generateHistoricalBars": {
          "calls": [
            "getIntervalInMs"
          ],
          "signature": "(currentPrice, resolution, periodParams)"
        },
        "startRealtimeUpdates": {
          "calls": [
            "updateWithRealData"
          ],
          "signature": "(symbolInfo, resolution, callback, subscriberUID)"
        },
        "updateWithRealData": {
          "signature": "async ()",
          "called_by": [
            "startRealtimeUpdates"
          ]
        },
        "getIntervalInMs": {
          "signature": "(resolution)",
          "called_by": [
            "generateHistoricalBars"
          ]
        },
        "createAggregateDatafeed": {
          "calls": [
            "createDatafeed",
            "useAggregateDatafeed"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "constants": {
        "SUPPORTED_SYMBOLS": "collection"
      },
      "variables": [
        "useAggregateDatafeed",
        "aggregateMarket",
        "createDatafeed",
        "results",
        "query",
        "symbolInfo",
        "marketData",
        "currentPrice",
        "bars",
        "generateHistoricalBars",
        "intervalMs",
        "barsCount",
        "basePrice",
        "i",
        "time",
        "volatility",
        "change",
        "open",
        "close",
        "high",
        "low",
        "volume",
        "lastBar",
        "startRealtimeUpdates",
        "lastPrice",
        "updateInterval",
        "updateWithRealData",
        "now",
        "variation",
        "bar",
        "fallbackPrice",
        "getIntervalInMs",
        "intervals",
        "createAggregateDatafeed"
      ],
      "call_graph": {}
    },
    "ui/composables/useSwapLogic.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue",
        "../services/priceService.js"
      ],
      "functions": {
        "useSwapLogic": "()",
        "safeDiv": {
          "signature": "(a, b, fallback = 0)",
          "called_by": [
            "calculateQuote",
            "calculateReverseQuote"
          ]
        },
        "safeMul": {
          "signature": "(a, b, fallback = 0)",
          "called_by": [
            "calculateQuote",
            "calculateReverseQuote"
          ]
        },
        "safePercentage": {
          "signature": "(value, defaultValue = 0)",
          "called_by": [
            "calculateQuote",
            "calculateReverseQuote"
          ]
        },
        "validateNumber": {
          "signature": "(value, name = 'value')",
          "called_by": [
            "calculateQuote",
            "calculateReverseQuote"
          ]
        },
        "initializePrices": {
          "signature": "async ()",
          "called_by": [
            "refreshPrices"
          ]
        },
        "calculateDiscount": {
          "signature": "(usdAmount)",
          "called_by": [
            "calculateQuote",
            "calculateReverseQuote"
          ]
        },
        "normalizeTokenSymbol": {
          "signature": "(tokenSymbol)",
          "called_by": [
            "getTokenPrice"
          ]
        },
        "getTokenPrice": {
          "calls": [
            "normalizeTokenSymbol"
          ],
          "signature": "(tokenSymbol)",
          "called_by": [
            "calculateQuote",
            "calculateReverseQuote",
            "validateSwap",
            "qualifiesForOTC"
          ]
        },
        "refreshPrices": {
          "calls": [
            "initializePrices"
          ],
          "signature": "async ()"
        },
        "calculateQuote": {
          "calls": [
            "calculateDiscount",
            "formatNumber",
            "getTokenPrice",
            "safeDiv",
            "safeMul",
            "safePercentage",
            "validateNumber"
          ],
          "signature": "(inputAmount, inputToken, isOTC = false, selectedTier = null)",
          "called_by": [
            "calculateReverseQuote"
          ]
        },
        "calculateReverseQuote": {
          "calls": [
            "calculateDiscount",
            "calculateQuote",
            "getTokenPrice",
            "safeDiv",
            "safeMul",
            "safePercentage",
            "validateNumber"
          ],
          "signature": "(cirxAmount, targetToken, isOTC = false, selectedTier = null)"
        },
        "validateSwap": {
          "calls": [
            "getTokenPrice"
          ],
          "signature": "(inputAmount, inputToken, recipientAddress = null, isConnected = false)"
        },
        "calculateMaxAmount": "(balance, tokenSymbol)",
        "formatNumber": {
          "signature": "(value, decimals = 2)",
          "called_by": [
            "formatTokenAmount",
            "formatCurrency",
            "calculateQuote"
          ]
        },
        "formatUsd": "(value)",
        "getAvailableTokens": "(walletChain)",
        "qualifiesForOTC": {
          "calls": [
            "getTokenPrice"
          ],
          "signature": "(inputAmount, inputToken)"
        },
        "getEstimatedTime": "(isOTC, walletChain)"
      },
      "classes": {},
      "variables": [
        "safeDiv",
        "result",
        "safeMul",
        "safePercentage",
        "num",
        "validateNumber",
        "tokenPrices",
        "priceSource",
        "initializePrices",
        "livePrices",
        "fees",
        "discountTiers",
        "calculateDiscount",
        "normalizeTokenSymbol",
        "getTokenPrice",
        "normalizedSymbol",
        "price",
        "refreshPrices",
        "calculateQuote",
        "inputValue",
        "inputTokenPrice",
        "cirxPrice",
        "totalUsdValue",
        "feeRate",
        "feeAmount",
        "amountAfterFee",
        "usdAfterFee",
        "cirxReceived",
        "discount",
        "multiplier",
        "exchangeRate",
        "calculateReverseQuote",
        "cirxValue",
        "targetTokenPrice",
        "usdValue",
        "discountMultiplier",
        "feeMultiplier",
        "denominator",
        "forwardQuote",
        "validateSwap",
        "errors",
        "calculateMaxAmount",
        "availableBalance",
        "reserveAmount",
        "maxAmount",
        "formatNumber",
        "formatUsd",
        "getAvailableTokens",
        "qualifiesForOTC",
        "getEstimatedTime"
      ],
      "call_graph": {}
    },
    "ui/composables/useCircularAddressValidation.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "useCircularAddressValidation": "()",
        "getBackendConfig": {
          "signature": "async ()",
          "called_by": [
            "checkAddressExists"
          ]
        },
        "checkAddressExists": {
          "calls": [
            "getBackendConfig",
            "performAddressValidation"
          ],
          "signature": "async (address)"
        },
        "performAddressValidation": {
          "signature": "async (address, config)",
          "called_by": [
            "checkAddressExists"
          ]
        },
        "getCachedValidation": "(address)",
        "clearCache": "()",
        "isValidCircularAddressFormat": "(address)",
        "isAddressPending": "(address)"
      },
      "classes": {},
      "variables": [
        "useCircularAddressValidation",
        "validationCache",
        "validationPromises",
        "networkConfig",
        "getBackendConfig",
        "config",
        "apiBaseUrl",
        "response",
        "data",
        "checkAddressExists",
        "cacheKey",
        "validationPromise",
        "result",
        "performAddressValidation",
        "walletResponse",
        "balanceResponse",
        "balance",
        "getCachedValidation",
        "clearCache",
        "isValidCircularAddressFormat",
        "trimmed",
        "isAddressPending"
      ],
      "call_graph": {}
    },
    "ui/composables/useCircularChain.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "useCircularChain": "(toastCallback = null)",
        "showToast": {
          "signature": "(type, title, message)",
          "called_by": [
            "detectCircularChain"
          ]
        },
        "detectCircularChain": {
          "calls": [
            "fetchCirxBalance",
            "showToast"
          ],
          "signature": "async ()"
        },
        "fetchCirxBalance": {
          "calls": [
            "fetchBalanceFromNAG"
          ],
          "signature": "async ()",
          "called_by": [
            "detectCircularChain"
          ]
        },
        "fetchBalanceFromNAG": {
          "signature": "async (address)",
          "called_by": [
            "fetchCirxBalance"
          ]
        }
      },
      "classes": {},
      "constants": {
        "CIRCULAR_CHAIN_CONFIG": "collection"
      },
      "variables": [
        "useCircularChain",
        "cirxAddress",
        "isCircularChainConnected",
        "cirxBalance",
        "isLoadingBalance",
        "chainConnectionError",
        "isDetectingChain",
        "isCircularChainAvailable",
        "showToast",
        "detectCircularChain",
        "fetchCirxBalance",
        "balance",
        "fetchBalanceFromNAG",
        "response",
        "formatCirxBalance",
        "getUxGuidance"
      ],
      "call_graph": {}
    },
    "ui/composables/useNumberInput.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue"
      ],
      "functions": {
        "useNumberInput": {
          "calls": [
            "addCommas",
            "handleBlur",
            "handleFocus",
            "handleInput",
            "handleKeypress",
            "handlePaste",
            "removeCommas"
          ],
          "signature": "(initialValue = '', options = {})"
        },
        "addCommas": {
          "signature": "(value)",
          "called_by": [
            "useNumberInput",
            "handleInput",
            "handleBlur"
          ]
        },
        "removeCommas": {
          "signature": "(value)",
          "called_by": [
            "useNumberInput",
            "handleInput"
          ]
        },
        "handleInput": {
          "calls": [
            "addCommas",
            "removeCommas"
          ],
          "signature": "(inputValue)",
          "called_by": [
            "useNumberInput",
            "handlePaste"
          ]
        },
        "handleFocus": {
          "signature": "()",
          "called_by": [
            "useNumberInput"
          ]
        },
        "handleBlur": {
          "calls": [
            "addCommas"
          ],
          "signature": "()",
          "called_by": [
            "useNumberInput"
          ]
        },
        "handleKeypress": {
          "signature": "(event)",
          "called_by": [
            "useNumberInput"
          ]
        },
        "handlePaste": {
          "calls": [
            "handleInput"
          ],
          "signature": "(event)",
          "called_by": [
            "useNumberInput"
          ]
        }
      },
      "classes": {},
      "variables": [
        "rawValue",
        "displayValue",
        "cleaned",
        "parts",
        "integerPart",
        "decimalPart",
        "withCommas",
        "cleanValue",
        "char",
        "pastedText"
      ],
      "call_graph": {}
    },
    "ui/composables/useIrohNetwork.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "useIrohNetwork": "()",
        "initialize": {
          "calls": [
            "startNetworkMonitoring"
          ],
          "signature": "async ()",
          "called_by": [
            "reconnect"
          ]
        },
        "discoverServices": {
          "signature": "async (serviceName, capabilities = [], maxResults = 10)",
          "called_by": [
            "discoverBackends"
          ]
        },
        "discoverBackends": {
          "calls": [
            "discoverServices"
          ],
          "signature": "async ()"
        },
        "sendToNode": "async (nodeId, payload)",
        "broadcastToTopic": "async (topic, message)",
        "subscribeToTransactionUpdates": "(callback)",
        "getNetworkStats": {
          "signature": "async ()",
          "called_by": [
            "startNetworkMonitoring"
          ]
        },
        "startNetworkMonitoring": {
          "calls": [
            "getNetworkStats"
          ],
          "signature": "()",
          "called_by": [
            "initialize"
          ]
        },
        "getAllServices": "async ()",
        "reconnect": {
          "calls": [
            "initialize"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "useIrohNetwork",
        "config",
        "isEnabled",
        "isConnected",
        "nodeId",
        "discoveredServices",
        "connectionStatus",
        "networkStats",
        "bridgeUrl",
        "initialize",
        "healthResponse",
        "nodeResponse",
        "discoverServices",
        "response",
        "services",
        "discoverBackends",
        "sendToNode",
        "broadcastToTopic",
        "subscribeToTransactionUpdates",
        "interval",
        "backends",
        "getNetworkStats",
        "startNetworkMonitoring",
        "getAllServices",
        "reconnect",
        "success"
      ],
      "call_graph": {}
    },
    "ui/composables/useAggregatePriceFeed.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "vue",
        "../scripts/aggregateMarket.js"
      ],
      "functions": {
        "useAggregatePriceFeed": {
          "calls": [
            "fetchAggregatedData",
            "startPriceUpdates",
            "stopPriceUpdates"
          ],
          "signature": "()"
        },
        "fetchAggregatedData": {
          "signature": "async ()",
          "called_by": [
            "useAggregatePriceFeed",
            "startPriceUpdates"
          ]
        },
        "startPriceUpdates": {
          "calls": [
            "fetchAggregatedData"
          ],
          "signature": "()",
          "called_by": [
            "useAggregatePriceFeed"
          ]
        },
        "stopPriceUpdates": {
          "signature": "()",
          "called_by": [
            "useAggregatePriceFeed"
          ]
        }
      },
      "classes": {},
      "constants": {
        "UPDATE_INTERVAL": "value"
      },
      "variables": [
        "aggregateMarket",
        "currentPrice",
        "isLoading",
        "error",
        "lastUpdated",
        "marketStats",
        "updateTimer",
        "fetchAggregatedData",
        "marketData",
        "price",
        "fallbackPrice",
        "startPriceUpdates",
        "stopPriceUpdates",
        "formattedPrice",
        "priceChangeClass",
        "fluctuation",
        "isDataFresh",
        "now",
        "updatedTime",
        "currentInstance"
      ],
      "call_graph": {}
    },
    "ui/components/SwapTabs.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/CirxStakingPanel.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/BaseModal.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/CallToAction.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/ErrorAlert.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/TokenSelector.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/GetCircularWallet.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/SwapSellField.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/ConnectionToast.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/SwapQuoteDetails.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/TradingViewChart.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/TransactionProgress.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/OtcDiscountDropdown.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/CircularChainStatus.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/SwapForm.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/CirxPriceChart.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/SwapBuyField.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/RecipientAddressInput.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/TransactionTable.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/BaseButton.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/components/ToastNotifications.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/scripts/aggregateMarket.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {},
      "classes": {
        "AggregateMarket": {
          "methods": {
            "constructor": "()",
            "numToAbbreviation": "(num)",
            "getBitMartData": "async (token, pair)",
            "getXTData": "async (token, pair)",
            "getLBankData": "async (token, pair)",
            "getMarketData": {
              "signature": "async (token, pair)",
              "called_by": [
                "AggregateMarket.StartFetching"
              ]
            },
            "StartFetching": {
              "calls": [
                "getMarketData"
              ],
              "signature": "(token, pair, interval, callback)"
            },
            "stopFetching": "()",
            "__init__": "()"
          },
          "doc": "****************************************************************************"
        }
      },
      "variables": [
        "suffixes",
        "i",
        "response",
        "data",
        "bitmartLast",
        "bitmartFluc",
        "bitmartVolC",
        "bitmartVolU",
        "result",
        "xtLast",
        "xtFluc",
        "xtVolC",
        "xtVolU",
        "lbankTicker",
        "lbankLast",
        "lbankFluc",
        "lbankVolC",
        "lbankVolU",
        "now",
        "totalLast",
        "totalFluc",
        "totalVolC",
        "totalVolU",
        "count",
        "circSupply",
        "timeoutMs",
        "fetchWithTimeout",
        "bitmartData",
        "xtData",
        "lbankData",
        "averageLast",
        "averageFluc",
        "totalFormattedVolC",
        "totalFormattedVolU"
      ],
      "call_graph": {}
    },
    "ui/pages/index.vue": {
      "language": "vue",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "ui/pages/transactions.vue": {
      "language": "vue",
      "parsed": false
    },
    "ui/plugins/0.toast-init.client.js": {
      "language": "javascript",
      "parsed": false
    },
    "ui/public/debug-console-commands.js": {
      "language": "javascript",
      "parsed": true,
      "functions": {
        "checkDebugOutput": {
          "signature": "()",
          "called_by": [
            "runFullDiagnostic"
          ]
        },
        "switchToOTC": {
          "signature": "()",
          "called_by": [
            "runFullDiagnostic"
          ]
        },
        "checkDropdown": {
          "signature": "()",
          "called_by": [
            "runFullDiagnostic"
          ]
        },
        "runFullDiagnostic": {
          "calls": [
            "checkDebugOutput",
            "checkDropdown",
            "switchToOTC"
          ],
          "signature": "()"
        }
      },
      "classes": {},
      "variables": [
        "body",
        "debugMatch",
        "tabs",
        "otcTab",
        "dropdownButtons",
        "otcDropdown",
        "initialDebug",
        "otcTabFound",
        "afterDebug",
        "dropdownFound"
      ],
      "call_graph": {}
    },
    "ui/config/app.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Application entry point",
      "functions": {
        "isFeatureEnabled": "(featureName)",
        "getApiEndpoint": "(apiName)",
        "getContractAddress": "(contractName)",
        "getNetworkConfig": "(networkName = 'ethereum')",
        "isDev": "()",
        "isProd": "()"
      },
      "classes": {},
      "variables": [
        "isDevelopment",
        "isProduction",
        "isTestnet",
        "network",
        "config",
        "isFeatureEnabled",
        "getApiEndpoint",
        "getContractAddress",
        "getNetworkConfig",
        "isDev",
        "isProd"
      ],
      "call_graph": {}
    },
    "ui/assets/css/main.css": {
      "language": "css",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "ui/public/swap/discount.json": {
      "language": "json",
      "parsed": false
    },
    "ui/utils/__tests__/utilities.test.js": {
      "language": "javascript",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/debug.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/monitoring-check.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/test_blockchains.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/debug_hash_validation.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/test_asset_formats.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/test_asset_empty.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/test_sandbox_endpoint.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/test_proper_wallet.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/test_cirx_balance.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/test_both_approaches.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/debug-server.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/test_balance_address.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/test_balance_direct.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/cleanup_stuck_transactions.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/fix_bogus_transaction.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/test_asset_list.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/bootstrap.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/test_cirx_token.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/debug_validator.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/update_sender_addresses.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/analyze_transaction_failures.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/check_transactions.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/test_raw_balance.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/TestCase.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/public/api-test.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/public/index.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "backend/public/server-control.php": {
      "language": "php",
      "parsed": false
    },
    "backend/public/health.php": {
      "language": "php",
      "parsed": false
    },
    "backend/public/workers.html": {
      "language": "html",
      "parsed": false
    },
    "backend/public/test.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/database/create_demo_transactions.sql": {
      "language": "sql",
      "parsed": false
    },
    "backend/database/show_schema.php": {
      "language": "php",
      "parsed": false
    },
    "backend/database/Migrator.php": {
      "language": "php",
      "parsed": false
    },
    "backend/database/migrate.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Commands/MonitoringCheckCommand.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Middleware/RateLimitMiddleware.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Middleware"
    },
    "backend/src/Middleware/LoggingMiddleware.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Middleware"
    },
    "backend/src/Middleware/CorsMiddleware.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Middleware"
    },
    "backend/src/Middleware/ApiKeyAuthMiddleware.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Middleware"
    },
    "backend/src/Utils/EthereumMathUtils.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Utility functions"
    },
    "backend/src/Utils/TestWallet.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/src/Utils/HashUtils.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Utility functions"
    },
    "backend/src/Utils/BlockchainTestUtils.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/src/Utils/SeedPhraseManager.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Blockchain/EthereumBlockchainClient.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Blockchain/BlockchainClientFactory.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Blockchain/BlockchainClientInterface.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Blockchain/AbstractEVMClient.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Blockchain/CircularProtocolClient.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Controllers/DebugController.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Controllers/ConfigController.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Configuration"
    },
    "backend/src/Controllers/WorkerController.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Controllers/IrohTransactionController.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Controllers/TransactionTestController.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/src/Controllers/TransactionController.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Controllers/MonitoringController.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Controllers/AdminController.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Controllers/TelegramTestController.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/src/Controllers/TransactionStatusController.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Exceptions/BlockchainException.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Exceptions/CirxTransferException.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Exceptions/PaymentVerificationException.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Models/Transaction.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/HealthCheckService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/TelegramHandler.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/PaymentVerificationService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/TelegramNotificationService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/LoggerService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/TransactionMonitoringService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/EthereumExplorerService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/CirxTransferResult.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/PaymentVerificationResult.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/IrohServiceBridge.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/TransactionReadinessService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Services/CirxTransferService.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Workers/PaymentVerificationWorker.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Workers/StuckTransactionRecoveryWorker.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Workers/CirxTransferWorker.php": {
      "language": "php",
      "parsed": false
    },
    "backend/src/Validators/SwapRequestValidator.php": {
      "language": "php",
      "parsed": false
    },
    "backend/database/migrations/003_add_retry_fields_to_transactions.php": {
      "language": "php",
      "parsed": false
    },
    "backend/database/migrations/002_create_project_wallets_table.php": {
      "language": "php",
      "parsed": false
    },
    "backend/database/migrations/004_create_migrations_table.php": {
      "language": "php",
      "parsed": false
    },
    "backend/database/migrations/001_create_transactions_table.php": {
      "language": "php",
      "parsed": false
    },
    "backend/database/migrations/005_add_sender_address_to_transactions.php": {
      "language": "php",
      "parsed": false
    },
    "backend/tests/Integration/IntegrationTestCase.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/E2E/E2ETestCase.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/E2E/SepoliaOTCSwapTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/E2E/PerformanceTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/E2E/CompleteOTCSwapFlowTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/E2E/RealBlockchainTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/E2E/MultiTokenSwapTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/E2E/ErrorScenarioTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Middleware/ApiKeyAuthMiddlewareTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Middleware/LoggingMiddlewareTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Middleware/CorsMiddlewareTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Middleware/RateLimitMiddlewareTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Utils/HashUtilsTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Utils/EthereumMathUtilsTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Blockchain/CircularProtocolClientTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/CircularProtocol/CircularProtocolAPITest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Controllers/TransactionControllerTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Models/TransactionTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Services/PaymentVerificationServiceTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Services/CirxTransferServiceTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Services/HealthCheckServiceTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Services/TransactionMonitoringServiceTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Services/LoggerServiceTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Workers/PaymentVerificationWorkerTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Workers/CirxTransferWorkerTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Unit/Validators/SwapRequestValidatorTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Integration/API/CompleteSwapFlowTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Integration/CircularProtocol/CircularProtocolAPIIntegrationTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Integration/Database/TransactionDataIntegrityTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Integration/Services/ServiceInteractionTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    },
    "backend/tests/Integration/Workers/WorkerPipelineIntegrationTest.php": {
      "language": "php",
      "parsed": false,
      "purpose": "Test file"
    }
  },
  "dependency_graph": {
    "testing/scripts/check-console.js": [
      "http"
    ],
    "testing/e2e/frontend/swap-flow.spec.ts": [
      "@playwright/test"
    ],
    "ui/utils/validation.js": [
      "ui/utils/addressFormatting.js"
    ],
    "ui/composables/useOtcConfig.js": [
      "vue"
    ],
    "ui/composables/useSwapService.js": [
      "vue",
      "viem"
    ],
    "ui/composables/useAutoWorker.js": [
      "vue"
    ],
    "ui/composables/useCTAState.js": [
      "vue"
    ],
    "ui/composables/useTransactionStatus.js": [
      "vue",
      "ui/composables/useBackendApi.js",
      "~/utils/toast.js"
    ],
    "ui/composables/useErrorHandler.js": [
      "vue"
    ],
    "ui/composables/useBackendApi.js": [
      "vue"
    ],
    "ui/composables/useRealTimeTransactions.js": [
      "vue",
      "ui/composables/useIrohNetwork.js"
    ],
    "ui/composables/usePriceData.js": [
      "vue"
    ],
    "ui/composables/useAggregateDatafeed.js": [
      "ui/scripts/aggregateMarket.js"
    ],
    "ui/composables/useSwapLogic.js": [
      "vue",
      "ui/services/priceService.js"
    ],
    "ui/composables/useCircularAddressValidation.js": [
      "vue"
    ],
    "ui/composables/useCircularChain.js": [
      "vue"
    ],
    "ui/composables/useNumberInput.js": [
      "vue"
    ],
    "ui/composables/useAggregatePriceFeed.js": [
      "vue",
      "ui/scripts/aggregateMarket.js"
    ]
  },
  "staleness_check": 1756002988.379509
}
{"at":"2025-08-31T01:57:40.028206","root":".","tree":[".","\u251c\u2500\u2500 backend/ (4769 files)","\u2502   \u251c\u2500\u2500 database/ (9 files)","\u2502   \u2502   \u2514\u2500\u2500 migrations/ (5 files)","\u2502   \u251c\u2500\u2500 logs/","\u2502   \u251c\u2500\u2500 public/ (6 files)","\u2502   \u251c\u2500\u2500 src/ (45 files)","\u2502   \u2502   \u251c\u2500\u2500 Blockchain/ (5 files)","\u2502   \u2502   \u251c\u2500\u2500 Commands/ (1 files)","\u2502   \u2502   \u251c\u2500\u2500 Controllers/ (10 files)","\u2502   \u2502   \u251c\u2500\u2500 Exceptions/ (3 files)","\u2502   \u2502   \u251c\u2500\u2500 Middleware/ (4 files)","\u2502   \u2502   \u251c\u2500\u2500 Models/ (1 files)","\u2502   \u2502   \u251c\u2500\u2500 Services/ (12 files)","\u2502   \u2502   \u251c\u2500\u2500 Utils/ (5 files)","\u2502   \u2502   \u251c\u2500\u2500 Validators/ (1 files)","\u2502   \u2502   \u2514\u2500\u2500 Workers/ (3 files)","\u2502   \u251c\u2500\u2500 storage/ (1 files)","\u2502   \u2502   \u2514\u2500\u2500 logs/","\u2502   \u251c\u2500\u2500 tests/ (55 files)"],"stats":{"total_files":207,"total_directories":757,"fully_parsed":{"python":1,"javascript":17,"shell":2,"typescript":9},"listed_only":{"json":12,"php":129,"sql":2,"html":2,"shell":1,"rs":6,"vue":25,"css":1},"markdown_files":8},"f":{"find_redundant_components.py":["p",["cosine_similarity:14:(vec1:List[float], vec2:List[float])>float::Calculate cosine similarity between two vectors","find_similar_functions:28:(index_path:str, similarity_threshold:float = 0.85)>Dict[str, List[Tuple[str, float]]]:cosine_similarity:Find functions with high semantic similarity","analyze_redundancies:82:(index_path:str):find_similar_functions:Main analysis function"]],"ui/composables/useBackendAPIs.js":["j",["useBackendApi:6:()::","getHeaders:28:()::","handleApiResponse:42:async (response)::","initiateSwap:55:async (swapData):getHeaders,handleApiResponse:","getTransactionStatus:101:async (swapId):getHeaders,handleApiResponse:","getCirxBalance:144:async (address):getHeaders,handleApiResponse:","calculateCirxQuote:182:(paymentAmount, paymentToken, isOTC = false)::","getDepositAddress:257:(paymentToken, paymentChain = 'ethereum')::","validateCircularAddress:279:(address)::","createSwapTransaction:292:(paymentTxId, paymentChain, cirxRecipientAddress, amountPaid, paymentToken)::","useAutoWorker:342:():processTransactions,stopAutoProcessing:","processTransactions:359:async ()::","startAutoProcessing:415:():processTransactions:","stopAutoProcessing:441:()::","getWorkerStatus:452:()::","triggerManualProcess:465:async ():processTransactions:"]],"ui/composables/useCallToActionState.js":["j",["useCTAState:7:({ // Core state props walletConnected, recipientAddress, recipientAddressError, inputAmount, addressValidationState, activeTab, quote, // Optional customization loadingText = null, variant = 'primary' })::","handleButtonClick:122:(event, emit)::"]],"ui/composables/useToast.js":["j",["checkForToast:47:()::"]],"ui/composables/useValidators.js":["j",["validateTokenAmount:463:(amount, options = {})::","validateWalletAddress:530:(address, type = 'auto')::","validateEmail:582:(email, required = true)::","validatePassword:611:(password, options = {})::","validateForm:689:(formData, rules)::","useCircularChain:5:(toastCallback = null)::","showToast:33:(type, title, message)::","detectCircularChain:40:async ():fetchCirxBalance,showToast:","fetchCirxBalance:68:async ():fetchBalanceFromNAG:","fetchBalanceFromNAG:89:async (address)::","useCircularAddressValidation:202:()::","getBackendConfig:211:async ()::","checkAddressExists:254:async (address):getBackendConfig,performAddressValidation:","performAddressValidation:289:async (address, config)::","getCachedValidation:398:(address)::","clearCache:406:()::","isValidCircularAddressFormat:416:(address)::","isAddressPending:425:(address)::"]],"start-dev.sh":["s",["check_port:0:()::Function to check if port is in use","cleanup:0:()::Function to cleanup on exit"]],"testing/e2e/frontend/swap-flow.spec.ts":["t",["connectWallet:65:async (page)::"]],"testing/s/check-console.js":["j",["checkApp:8:()::"]],"testing/s/test-auto-worker.js":["j",["testWorkerEndpoint:14:async (endpoint, method = 'GET')::","runTest:24:async ():testWorkerEndpoint:"]],"testing/s/validate-e2e-setup.sh":["s",["check_file:0:()::Function to check if file exists","check_directory:0:()::Function to check if directory exists","count_test_methods:0:()::Count test methods in each file"]],"ui/composables/useErrorHandler.js":["j",["useErrorHandler:7:()::","categorizeError:37:(error)::","getErrorSeverity:82:(error, category)::","getUserFriendlyMessage:111:(error, category)::","getRecoveryActions:177:(error, category, context = {}):getErrorSeverity:","handleError:265:(error, context = {}):categorizeError,getErrorSeverity,getRecoveryActions,getUserFriendlyMessage,normalizeError:","normalizeError:336:(error)::","clearError:360:()::","clearAllErrors:367:()::","shouldShowAsToast:375:(error)::","shouldShowInline:382:(error)::"]],"ui/composables/useFormattedNumbers.js":["j",["useFormattedNumbers:8:()::","useNumberInput:184:(initialValue = '', options = {}):addCommas,handleBlur,handleFocus,handleInput,handleKeypress,handlePaste,removeCommas:","addCommas:189:(value)::","removeCommas:208:(value)::","handleInput:213:(inputValue):addCommas,removeCommas:","handleFocus:219:()::","handleBlur:224:():addCommas:","handleKeypress:229:(event)::","handlePaste:237:(event):handleInput:","useOtcConfig:259:()::","formatNumber:116:(value, decimals = 2)::","formatTokenAmount:147:(value, symbol = '', decimals = 6):formatNumber:","formatCurrency:135:(value, currency = '$', decimals = 2):formatNumber:","formatPercentage:158:(value, decimals = 2):formatNumber:","formatDuration:915:(seconds, options = {})::","formatFileSize:966:(bytes, options = {})::","formatTransactionHash:991:(hash, options = {})::","formatTimeAgo:1013:(date, options = {})::","isValidEthereumAddress:14:(address)::","isValidSolanaAddress:25:(address)::","isValidCircularAddress:37:(address)::","getAddressType:55:(address):isValidCircularAddress,isValidEthereumAddress,isValidSolanaAddress:","formatAddress:83:(address, prefixLength = 6, suffixLength = 4)::","isValidAddressForChain:97:(address, chain):isValidCircularAddress,isValidEthereumAddress,isValidSolanaAddress:","fetchConfig:313:async (url = '/swap/discount.json'):validateConfig:","validateConfig:356:(config)::","resetToDefault:426:()::","updateConfig:435:(updates):validateConfig:","getDiscountForAmount:448:(usdAmount)::","qualifiesForOtc:465:(usdAmount)::","getTierInfo:472:(usdAmount):getDiscountForAmount:","initialize:489:async ():fetchConfig:","getETHBalance:572:async (address, provider)::","getTokenBalance:593:async (tokenSymbol, address, provider):getTokenDecimals:","getTokenDecimals:631:(tokenSymbol)::","getAllTokenBalances:644:async (address, provider):getETHBalance,getTokenBalance:","validateTokenContract:685:async (tokenSymbol, provider)::","formatBalance:713:(balance, decimals = 6)::","hasSufficientBalance:728:async (address, tokenSymbol, amount, provider):getETHBalance,getTokenBalance:"]],"ui/composables/useIrohNetwork.js":["j",["return:318:()::","useIrohNetwork:10:()::","initialize:23:async ():startNetworkMonitoring:","discoverServices:67:async (serviceName, capabilities = [], maxResults = 10)::","discoverBackends:99:async ():discoverServices:","sendToNode:108:async (nodeId, payload)::","broadcastToTopic:131:async (topic, message)::","subscribeToTransactionUpdates:154:(callback)::","getNetworkStats:182:async ()::","startNetworkMonitoring:201:():getNetworkStats:","getAllServices:221:async ()::","reconnect:236:async ():initialize:","useRealTimeTransactions:287:()::","subscribeToTransaction:295:(transactionId, callback):handleTransactionUpdate,subscribeToTransactionUpdates:","handleTransactionUpdate:338:(update)::","getTransaction:373:async (transactionId)::","monitorTransaction:398:(transactionId, options = {}):cleanup,subscribeToTransaction:","cleanup:432:()::","broadcastTransactionEvent:440:async (transactionId, eventType, data = {}):broadcastToTopic:","getAllTransactions:457:()::","clearCache:462:()::","getCachedTransaction:467:(transactionId)::","updateCachedTransaction:472:(transactionId, updates)::","isMonitoring:480:(transactionId)::","getMonitoringStats:485:()::"]],"ui/composables/usePriceData.js":["j",["usePriceData:9:()::","useSingleExchangeDatafeed:550:():fetchSingleExchangeData,generateSimpleBars:","fetchSingleExchangeData:666:async (exchange, symbol, pair):fetchWithTimeout:","generateSimpleBars:738:(currentData, periodParams, resolution):getResolutionMs:","getResolutionMs:766:(resolution)::","fetchCIRXFromAggregator:37:async ()::","fetchCIRXFromCoinGecko:72:async ()::","fetchPriceFromDEXTools:110:async ()::","fetchMajorTokenPrices:141:async ()::","fetchCurrentPrice:183:async ():fetchCIRXFromAggregator,fetchCIRXFromCoinGecko,fetchMajorTokenPrices,fetchPriceFromDEXTools:","generateHistoricalData:315:(currentPriceValue, days = 7)::","calculateTradingPairs:350:(cirxPriceUSD)::","updatePriceData:370:async ():fetchCurrentPrice,generateHistoricalData:","startPriceUpdates:413:():updatePriceData:","stopPriceUpdates:424:()::","getTokenPrice:481:async (tokenSymbol):fetchCurrentPrice:","getTokenPrices:494:async ():fetchCurrentPrice:","refreshPrices:504:async ():fetchCurrentPrice:","createSingleExchangeDatafeed:552:(exchange):fetchSingleExchangeData,generateSimpleBars:","fetchWithTimeout:669:(url)::","useAggregateDatafeed:784:()::","createDatafeed:813:()::","generateHistoricalBars:984:(currentPrice, resolution, periodParams):getIntervalInMs:","startRealtimeUpdates:1035:(symbolInfo, resolution, callback, subscriberUID):updateWithRealData:","updateWithRealData:1046:async ()::","getIntervalInMs:1110:(resolution)::","createAggregateDatafeed:1137:():createDatafeed,useAggregateDatafeed:"]],"ui/composables/useSwapHandler.js":["j",["useSwapLogic:9:()::","useSwapService:454:()::","safeDiv:12:(a, b, fallback = 0)::","safeMul:20:(a, b, fallback = 0)::","safePercentage:28:(value, defaultValue = 0)::","validateNumber:33:(value, name = 'value')::","initializePrices:55:async ()::","calculateDiscount:86:(usdAmount)::","normalizeTokenSymbol:98:(tokenSymbol)::","getTokenPrice:108:(tokenSymbol):normalizeTokenSymbol:","refreshPrices:124:async ():initializePrices:","calculateQuote:132:(inputAmount, inputToken, isOTC = false, selectedTier = null):calculateDiscount,formatNumber,getTokenPrice,safeDiv,safeMul,safePercentage,validateNumber:","calculateReverseQuote:218:(cirxAmount, targetToken, isOTC = false, selectedTier = null):calculateDiscount,calculateQuote,getTokenPrice,safeDiv,safeMul,safePercentage,validateNumber:","validateSwap:302:(inputAmount, inputToken, recipientAddress = null, isConnected = false):getTokenPrice:","calculateMaxAmount:339:(balance, tokenSymbol)::","formatNumber:354:(value, decimals = 2)::","formatUsd:372:(value)::","getAvailableTokens:387:(walletChain)::","qualifiesForOTC:405:(inputAmount, inputToken):getTokenPrice:","getEstimatedTime:413:(isOTC, walletChain)::","validateConnection:622:()::","validateContractAddress:636:(contractType)::","getTokenDecimals:644:(tokenSymbol)::","getTokenBalance:656:async (tokenSymbol, userAddress = null):getTokenDecimals,validateConnection:","approveToken:706:async (tokenSymbol, spenderAddress, amount):getTokenDecimals,validateConnection,validateContractAddress:","getAllowance:733:async (tokenSymbol, ownerAddress, spenderAddress):getTokenDecimals,validateContractAddress:","getLiquidQuote:758:async (inputToken, inputAmount):getTokenDecimals,validateConnection,validateContractAddress:","getOTCQuote:795:async (inputToken, inputAmount):getTokenDecimals,validateConnection,validateContractAddress:","executeLiquidSwap:847:async (inputToken, inputAmount, minCirxOut, slippageTolerance = 0.5):approveToken,getAllowance,getTokenDecimals,validateConnection,validateContractAddress:","executeOTCSwap:949:async (inputToken, inputAmount, minCirxOut, slippageTolerance = 0.5):approveToken,getAllowance,getTokenDecimals,validateConnection,validateContractAddress:","getVestingInfo:1052:async (userAddress = null):validateConnection,validateContractAddress:","claimVestedTokens:1095:async ():validateConnection,validateContractAddress:"]],"ui/composables/useTransactionHistory.js":["j",["useTransactionHistory:2:()::","apiCall:13:async (endpoint, options = {})::","withRetry:104:async (operation, maxRetries = 3)::","fetchTransactionHistory:137:async (userAddress, options = {}):apiCall,getUserFriendlyError,withRetry:","getUserFriendlyError:190:(error)::","fetchVestingPositions:242:async (userAddress):apiCall:","fetchUserStats:265:async (userAddress):apiCall:","fetchUserData:283:async (userAddress):fetchTransactionHistory,fetchUserStats,fetchVestingPositions:","formatTransaction:316:(tx):getTokenSymbol:","formatVestingPosition:335:(position)::","getTokenSymbol:351:(tokenAddress)::","formatUserStats:362:(stats)::","checkIndexerHealth:376:async ()::","checkServiceStatus:390:async ():checkIndexerHealth:"],{"for":["71",["constructor:73:(message, status, code, requestId, endpoint, originalError)::","__init__:73:(message, status, code, requestId, endpoint, originalError)::"]],"ApiError":["72",["constructor:73:(message, status, code, requestId, endpoint, originalError)::","__init__:73:(message, status, code, requestId, endpoint, originalError)::"]]}],"ui/composables/useTransactionStatus.js":["j",["useTransactionStatus:10:()::","trackTransaction:88:(transactionId, options = {}):startPolling:","startPolling:124:(transactionId, interval = 3000):pollStatus,stopPolling,updateTransactionStatus:","stopPolling:173:(transactionId)::","updateTransactionStatus:191:(transactionId, statusData):showPhaseNotification:","showPhaseNotification:223:(phase, statusData):getNotificationTimeout:","getNotificationTimeout:260:(phase)::","getTransaction:276:(transactionId)::","removeTransaction:297:(transactionId):stopPolling:","pollStatus:135:async ():stopPolling,updateTransactionStatus:"]],"ui/config/app.js":["j",["isFeatureEnabled:141:(featureName)::","getApiEndpoint:148:(apiName)::","getContractAddress:155:(contractName)::","getNetworkConfig:162:(networkName = 'ethereum')::","isDev:169:()::","isProd:174:()::"]],"ui/public/debug-console-commands.js":["j",["checkDebugOutput:6:()::","switchToOTC:24:()::","checkDropdown:45:()::","runFullDiagnostic:67:():checkDebugOutput,checkDropdown,switchToOTC:"]]},"g":[["fetchTransactionHistory","getUserFriendlyError"],["fetchSingleExchangeData","fetchWithTimeout"],["getVestingInfo","validateConnection"],["startPolling","stopPolling"],["getRecoveryActions","getErrorSeverity"],["handleBlur","addCommas"],["isValidAddressForChain","isValidCircularAddress"],["fetchCurrentPrice","fetchCIRXFromAggregator"],["runFullDiagnostic","switchToOTC"],["hasSufficientBalance","getTokenBalance"],["useNumberInput","handleInput"],["getAddressType","isValidCircularAddress"],["executeLiquidSwap","getTokenDecimals"],["runTest","testWorkerEndpoint"],["approveToken","getTokenDecimals"],["executeOTCSwap","getAllowance"],["getTokenPrice","normalizeTokenSymbol"],["createSingleExchangeDatafeed","generateSimpleBars"],["getOTCQuote","getTokenDecimals"],["createSingleExchangeDatafeed","fetchSingleExchangeData"],["fetchTransactionHistory","withRetry"],["getAddressType","isValidSolanaAddress"],["calculateReverseQuote","calculateQuote"],["useNumberInput","handleKeypress"],["initiateSwap","getHeaders"],["formatTransaction","getTokenSymbol"],["getTokenPrice","fetchCurrentPrice"],["startAutoProcessing","processTransactions"],["formatTokenAmount","formatNumber"],["getVestingInfo","validateContractAddress"],["useNumberInput","handlePaste"],["handleError","categorizeError"],["useAutoWorker","stopAutoProcessing"],["handleError","getErrorSeverity"],["formatPercentage","formatNumber"],["handleInput","removeCommas"],["runFullDiagnostic","checkDropdown"],["getLiquidQuote","validateConnection"],["getCirxBalance","handleApiResponse"],["formatCurrency","formatNumber"],["detectCircularChain","fetchCirxBalance"],["checkAddressExists","getBackendConfig"],["pollStatus","updateTransactionStatus"],["checkAddressExists","performAddressValidation"],["calculateReverseQuote","safeMul"],["isValidAddressForChain","isValidSolanaAddress"],["isValidAddressForChain","isValidEthereumAddress"],["getTokenPrices","fetchCurrentPrice"],["generateHistoricalBars","getIntervalInMs"],["executeLiquidSwap","getAllowance"],["fetchVestingPositions","apiCall"],["detectCircularChain","showToast"],["getAddressType","isValidEthereumAddress"],["find_similar_functions","cosine_similarity"],["refreshPrices","initializePrices"],["calculateQuote","safeDiv"],["handleError","getRecoveryActions"],["calculateQuote","validateNumber"],["getAllowance","validateContractAddress"],["executeOTCSwap","validateConnection"],["executeOTCSwap","validateContractAddress"],["monitorTransaction","subscribeToTransaction"],["calculateQuote","safeMul"],["useNumberInput","handleFocus"],["removeTransaction","stopPolling"],["fetchUserStats","apiCall"],["getTransactionStatus","getHeaders"],["initiateSwap","handleApiResponse"],["getLiquidQuote","getTokenDecimals"],["useNumberInput","addCommas"],["executeLiquidSwap","validateConnection"],["getTierInfo","getDiscountForAmount"],["approveToken","validateConnection"],["getLiquidQuote","validateContractAddress"],["updatePriceData","fetchCurrentPrice"],["subscribeToTransaction","handleTransactionUpdate"],["qualifiesForOTC","getTokenPrice"],["createAggregateDatafeed","useAggregateDatafeed"],["calculateReverseQuote","safeDiv"],["calculateReverseQuote","validateNumber"],["refreshPrices","fetchCurrentPrice"],["handleError","normalizeError"],["subscribeToTransaction","subscribeToTransactionUpdates"],["fetchUserData","fetchTransactionHistory"],["startNetworkMonitoring","getNetworkStats"],["createAggregateDatafeed","createDatafeed"],["updateConfig","validateConfig"],["executeOTCSwap","approveToken"],["discoverBackends","discoverServices"],["getTokenBalance","validateConnection"],["useSingleExchangeDatafeed","generateSimpleBars"],["pollStatus","stopPolling"],["calculateReverseQuote","calculateDiscount"],["broadcastTransactionEvent","broadcastToTopic"],["monitorTransaction","cleanup"],["trackTransaction","startPolling"],["startRealtimeUpdates","updateWithRealData"],["useSingleExchangeDatafeed","fetchSingleExchangeData"],["updatePriceData","generateHistoricalData"],["startPriceUpdates","updatePriceData"],["executeLiquidSwap","approveToken"],["startPolling","updateTransactionStatus"],["fetchUserData","fetchUserStats"],["getAllowance","getTokenDecimals"],["calculateReverseQuote","safePercentage"],["handleError","getUserFriendlyMessage"],["handleInput","addCommas"],["fetchCirxBalance","fetchBalanceFromNAG"],["calculateQuote","formatNumber"],["executeOTCSwap","getTokenDecimals"],["initialize","startNetworkMonitoring"],["startPolling","pollStatus"],["generateSimpleBars","getResolutionMs"],["analyze_redundancies","find_similar_functions"],["showPhaseNotification","getNotificationTimeout"],["updateTransactionStatus","showPhaseNotification"],["calculateReverseQuote","getTokenPrice"],["getAllTokenBalances","getETHBalance"],["triggerManualProcess","processTransactions"],["validateSwap","getTokenPrice"],["fetchCurrentPrice","fetchPriceFromDEXTools"],["calculateQuote","calculateDiscount"],["reconnect","initialize"],["claimVestedTokens","validateConnection"],["executeLiquidSwap","validateContractAddress"],["approveToken","validateContractAddress"],["claimVestedTokens","validateContractAddress"],["useNumberInput","removeCommas"],["getAllTokenBalances","getTokenBalance"],["fetchCurrentPrice","fetchMajorTokenPrices"],["fetchUserData","fetchVestingPositions"],["calculateQuote","safePercentage"],["useAutoWorker","processTransactions"],["fetchCurrentPrice","fetchCIRXFromCoinGecko"],["getTokenBalance","getTokenDecimals"],["fetchConfig","validateConfig"],["getOTCQuote","validateConnection"],["handlePaste","handleInput"],["getTransactionStatus","handleApiResponse"],["getOTCQuote","validateContractAddress"],["initialize","fetchConfig"],["runFullDiagnostic","checkDebugOutput"],["calculateQuote","getTokenPrice"],["getCirxBalance","getHeaders"],["fetchTransactionHistory","apiCall"],["checkServiceStatus","checkIndexerHealth"],["hasSufficientBalance","getETHBalance"],["useNumberInput","handleBlur"]],"d":{".github/workflows/PRs/Pull-Request-List.md":["Instructions","\ud83d\udd34 PR 0: Fix Test Infrastructure (Unskipped Tests)","\ud83d\udd34 PR 1: CI/CD Test Execution (GitHub Actions)","\ud83d\udfe0 PR 2: Runtime Config & Hardcoded Values","\ud83d\udfe0 PR 3: Lock Down Admin Endpoints"],"CLAUDE.md":["CLAUDE.md","Project Overview","\u2705 RECENT PROGRESS SUMMARY (2025-08-29)","**Critical AppKit/WalletConnect Integration RESOLVED**","**Current System Status**","**What's Working**","**Next Steps for Development**","**Files Modified in Recent Sessions**","**Technical Improvements Completed**"],"README.md":["CIRX Swap Platform","\ud83d\ude80 Quick Start","Prerequisites","Development Setup","\ud83e\uddea E2E Testing Quick Start","Run all tests (frontend + backend + integration)","Run only frontend tests","Run only backend tests  ","Run with detailed logs","Frontend E2E tests"],"TODO.md":["Testing & Code Quality","Frontend","**CRITICAL: Centralize Wallet Connection State Management**","**Other Frontend Issues**"],"backend/README.md":["\ud83c\udf7e CIRX OTC Backend API - **TRANSACTION BREAKTHROUGH SUCCESS!**","\ud83d\ude80 Quick Start","Prerequisites","Start Development Server","Enter Nix development environment","Start the backend server","Server available at http://localhost:8080","Test CIRX Transfer (\ud83c\udfaf WORKING!)","\ud83c\udfc6 Breakthrough Technical Solution","Working Transaction Parameters"],"backend/TRANSACTION_READINESS.md":["Transaction Readiness Health Check System","Endpoint","Purpose","Response Format","Success Response (HTTP 200)","Failure Response (HTTP 503)","Health Checks Performed","1. Database Connectivity & Write Capability","2. Circular Protocol API Connectivity & Authentication","3. Payment Verification Service Availability"],"testing/README.md":["Testing Directory","Structure","Running Tests","E2E Tests with Docker","Start the complete E2E stack","Run PHPUnit E2E tests","Run Playwright tests","Backend Tests","Run all tests","Run E2E tests only"],"ui/README.md":["Circular CIRX OTC Platform - Frontend","Features","\u2705 Completed","\ud83c\udfa8 Design Features","\ud83d\udcb0 OTC Discount Tiers","Quick Start","1. Install Dependencies","2. Environment Setup","Edit .env with your configuration","3. Development Server"]},"deps":{"find_redundant_components.py":["json","math","os","sys","collections","typing"],"ui/composables/useBackendAPIs.js":["vue"],"ui/composables/useCallToActionState.js":["vue"],"ui/composables/useValidators.js":["vue","~/composables/useFormattedNumbers"],"testing/e2e/frontend/swap-flow.spec.ts":["@playwright/test"],"testing/scripts/check-console.js":["http"],"ui/composables/useErrorHandler.js":["vue"],"ui/composables/useFormattedNumbers.js":["vue"],"ui/composables/useIrohNetwork.js":["vue"],"ui/composables/usePriceData.js":["vue","~/composables/usePriceData.js"],"ui/composables/useSwapHandler.js":["vue","ui/composables/usePriceData.js","viem"],"ui/composables/useTransactionStatus.js":["vue","ui/composables/useBackendAPIs.js","~/composables/useToast"]},"dir_purposes":{"ui":"API routes and endpoints","backend":"Test files and test utilities","backend/database/migrations":"Database migration files","backend/public":"Publicly accessible files","backend/src/Controllers":"Request handlers and business logic","backend/src/Middleware":"Middleware functions and handlers","backend/src/Models":"Data models and database schemas","backend/src/Services":"Business logic and external service integrations","backend/src/Utils":"Shared utility functions and helpers","backend/tests/E2E":"Test files and test utilities","backend/tests":"Test files and test utilities","backend/tests/Integration/API":"API endpoints and route handlers","backend/tests/Integration":"Test files and test utilities","backend/tests/Integration/CircularProtocol":"Test files and test utilities","backend/tests/Integration/Database":"Test files and test utilities","backend/tests/Integration/Services":"Business logic and external service integrations","backend/tests/Integration/Workers":"Test files and test utilities","backend/tests/Unit/Blockchain":"Test files and test utilities","backend/tests/Unit/CircularProtocol":"Test files and test utilities","backend/tests/Unit/Controllers":"Request handlers and business logic","backend/tests/Unit/Middleware":"Middleware functions and handlers","backend/tests/Unit/Models":"Data models and database schemas","backend/tests/Unit/Services":"Business logic and external service integrations","backend/tests/Unit/Utils":"Shared utility functions and helpers","backend/tests/Unit/Validators":"Test files and test utilities","backend/tests/Unit/Workers":"Test files and test utilities","iroh-bridge/src":"Source code root directory","testing":"Test files and test utilities","testing/e2e/frontend":"Test files and test utilities","testing/scripts":"Build and utility scripts","ui/components":"Reusable UI components","ui/config":"Configuration files and settings","ui/public":"Publicly accessible files"},"staleness":1756022261.943248}
name: Deploy to Staging

on:
  push:
    branches:
      - development
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: development
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, json, bcmath, curl, mysql
          tools: composer:v2
      
      # =============================================================================
      # BUILD FRONTEND
      # =============================================================================
      - name: Install frontend dependencies
        working-directory: ./ui
        run: npm ci
      
      - name: Create frontend staging env
        working-directory: ./ui
        run: |
          cat > .env << EOF
          NUXT_PUBLIC_TESTNET_MODE=true
          NUXT_PUBLIC_ETHEREUM_NETWORK=sepolia
          NUXT_PUBLIC_ETHEREUM_CHAIN_ID=11155111
          NUXT_PUBLIC_API_BASE_URL=https://staging.domain.com/backend/api/v1
          NUXT_PUBLIC_DEBUG_MODE=true
          NUXT_PUBLIC_SHOW_NETWORK_INDICATOR=true
          NUXT_PUBLIC_REOWN_PROJECT_ID=${{ secrets.STAGING_REOWN_PROJECT_ID }}
          NUXT_PUBLIC_ETH_DEPOSIT_ADDRESS=${{ secrets.STAGING_DEPOSIT_ADDRESS }}
          NUXT_PUBLIC_USDC_DEPOSIT_ADDRESS=${{ secrets.STAGING_DEPOSIT_ADDRESS }}
          NUXT_PUBLIC_USDT_DEPOSIT_ADDRESS=${{ secrets.STAGING_DEPOSIT_ADDRESS }}
          NUXT_PUBLIC_POLYGON_DEPOSIT_ADDRESS=${{ secrets.STAGING_DEPOSIT_ADDRESS }}
          NUXT_PUBLIC_BSC_DEPOSIT_ADDRESS=${{ secrets.STAGING_DEPOSIT_ADDRESS }}
          NUXT_PUBLIC_IROH_ENABLED=true
          NUXT_PUBLIC_IROH_BRIDGE_URL=https://staging.domain.com/iroh-bridge
          EOF
      
      - name: Build frontend
        working-directory: ./ui
        run: npm run build
      
      # =============================================================================
      # BUILD BACKEND
      # =============================================================================
      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --no-dev --optimize-autoloader
      
      - name: Create backend staging env
        working-directory: ./backend
        run: |
          cat > .env << EOF
          APP_ENV=staging
          APP_DEBUG=true
          APP_URL=https://staging.domain.com
          DB_CONNECTION=mysql
          DB_HOST=${{ secrets.STAGING_DB_HOST }}
          DB_PORT=3306
          DB_DATABASE=${{ secrets.STAGING_DB_NAME }}
          DB_USERNAME=${{ secrets.STAGING_DB_USER }}
          DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
          PLATFORM_FEE_WALLET=${{ secrets.STAGING_DEPOSIT_ADDRESS }}
          PLATFORM_FEE_PERCENTAGE=0.5
          BLOCKCHAIN_NETWORK=sepolia
          BLOCKCHAIN_CHAIN_ID=11155111
          CORS_ALLOWED_ORIGINS=https://staging.domain.com
          EOF
      
      - name: Cache Laravel config
        working-directory: ./backend
        run: |
          php artisan config:clear
          php artisan config:cache
          php artisan route:clear
          php artisan route:cache
      
      # =============================================================================
      # PREPARE DEPLOYMENT
      # =============================================================================
      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deploy
          
          # Copy frontend build
          cp -r ui/.output/public/* deploy/
          
          # Copy backend
          mkdir -p deploy/backend
          cp -r backend/app deploy/backend/
          cp -r backend/bootstrap deploy/backend/
          cp -r backend/config deploy/backend/
          cp -r backend/database deploy/backend/
          cp -r backend/public deploy/backend/
          cp -r backend/resources deploy/backend/
          cp -r backend/routes deploy/backend/
          cp -r backend/storage deploy/backend/
          cp -r backend/vendor deploy/backend/
          cp backend/.env deploy/backend/
          cp backend/composer.json deploy/backend/
          cp backend/composer.lock deploy/backend/
          cp backend/artisan deploy/backend/
          
          # Create .htaccess for proper routing
          cat > deploy/.htaccess << 'HTACCESS'
          <IfModule mod_rewrite.c>
              RewriteEngine On
              
              # Handle backend API requests
              RewriteCond %{REQUEST_URI} ^/backend/api
              RewriteRule ^backend/api/(.*)$ backend/public/index.php [L]
              
              # Handle frontend routes
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteRule ^(.*)$ index.html [L]
          </IfModule>
          
          # Security headers
          Header set X-Frame-Options "SAMEORIGIN"
          Header set X-Content-Type-Options "nosniff"
          Header set X-XSS-Protection "1; mode=block"
          HTACCESS
          
          # Create backend .htaccess
          cat > deploy/backend/public/.htaccess << 'HTACCESS'
          <IfModule mod_rewrite.c>
              <IfModule mod_negotiation.c>
                  Options -MultiViews -Indexes
              </IfModule>
          
              RewriteEngine On
          
              # Handle Authorization Header
              RewriteCond %{HTTP:Authorization} .
              RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
          
              # Redirect Trailing Slashes If Not A Folder...
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteCond %{REQUEST_URI} (.+)/$
              RewriteRule ^ %1 [L,R=301]
          
              # Send Requests To Front Controller...
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteRule ^ index.php [L]
          </IfModule>
          HTACCESS
      
      # =============================================================================
      # DEPLOY VIA FTP
      # =============================================================================
      - name: Deploy to FTP server
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_STAGING_HOST }}
          username: ${{ secrets.FTP_STAGING_USER }}
          password: ${{ secrets.FTP_STAGING_PASSWORD }}
          port: ${{ secrets.FTP_STAGING_PORT || 21 }}
          local-dir: ./deploy/
          server-dir: ${{ secrets.FTP_STAGING_PATH || '/public_html/staging/' }}
          dangerous-clean-slate: true
      
      # =============================================================================
      # POST-DEPLOYMENT
      # =============================================================================
      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to staging environment"
          echo "üåê URL: https://staging.domain.com"
          echo "üîç Branch: development"
          echo "üìÖ Time: $(date)"
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to staging failed"
          echo "Please check the logs for errors"
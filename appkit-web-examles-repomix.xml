This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
javascript/
  javascript-bitcoin/
    css/
      App.css
    public/
      reown.svg
    src/
      config/
        appKit.js
      services/
        wallet.js
      store/
        appkitStore.js
      utils/
        dom.js
        suscribers.js
      main.js
    index.html
    package.json
  javascript-core/
    css/
      App.css
    public/
      reown.svg
    src/
      config/
        appKit.js
      services/
        wallet.js
      store/
        appkitStore.js
      utils/
        dom.js
        suscribers.js
      main.js
    index.html
    package.json
  javascript-core-universal-provider-sui/
    css/
      App.css
    public/
      reown.svg
    src/
      config/
        appKit.js
      services/
        wallet.js
      App.css
      main.js
    eslint.config.js
    index.html
    package.json
    README.md
    vite.config.js
  javascript-ethers/
    css/
      App.css
    public/
      reown.svg
    src/
      config/
        appKit.js
      services/
        wallet.js
      store/
        appkitStore.js
      utils/
        dom.js
        suscribers.js
      main.js
    index.html
    package.json
  javascript-multichain/
    css/
      App.css
    public/
      reown.svg
    src/
      config/
        appKit.js
      services/
        walletSolana.js
        walletWagmi.js
      store/
        appkitStore.js
      utils/
        dom.js
        suscribers.js
      main.js
    index.html
    package.json
  javascript-solana/
    css/
      App.css
    public/
      reown.svg
    src/
      config/
        appKit.js
      services/
        wallet.js
      store/
        appkitStore.js
      utils/
        dom.js
        suscribers.js
      main.js
    index.html
    package.json
  javascript-wagmi/
    css/
      App.css
    public/
      reown.svg
    src/
      config/
        appKit.js
      services/
        wallet.js
      store/
        appkitStore.js
      utils/
        dom.js
        suscribers.js
      main.js
    index.html
    package.json
nextjs/
  next-bitcoin-app-router/
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        not-found.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
  next-core-app-router/
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        not-found.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
  next-ethers-app-router/
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        not-found.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
  next-multichain-app-router/
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
  next-siwe-next-auth/
    app/
      api/
        auth/
          [...nextauth]/
            route.ts
      config/
        index.tsx
      context/
        index.tsx
      globals.css
      layout.tsx
      page.module.css
      page.tsx
    .env.example
    .eslintrc.json
    .gitignore
    next.config.mjs
    package.json
    README.md
    tsconfig.json
  next-siwx-multichain/
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        not-found.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
      verifiers/
        BIP20Verifier.ts
        EIP155Verifier.ts
        SIWXVerifier.ts
        SolanaVerifier.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
  next-siwx-multichain-supabase-storage/
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        not-found.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
        siwx-storage.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
  next-solana-app-router/
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
  next-wagmi-app-router/
    .cursor/
      rules/
        reown-appkit.mdc
    public/
      reown.svg
    src/
      app/
        globals.css
        layout.tsx
        page.tsx
      components/
        ActionButtonList.tsx
        ConnectButton.tsx
        InfoList.tsx
      config/
        index.ts
      context/
        index.tsx
      hooks/
        useClientMount.ts
    .env.example
    .eslintrc.json
    .gitignore
    next.config.ts
    package.json
    README.md
    tsconfig.json
react/
  react-bitcoin/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
      config/
        index.tsx
      utils/
        BitcoinUtil.ts
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-core/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-core-universal-provider/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-core-universal-provider-sui/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-ethers/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
        SmartContractActionButtonList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-ethers5/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-multichain/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-siwe-server-example/
    public/
      vite.svg
    server/
      package.json
      server.js
    src/
      utils/
        siweUtils.ts
      main.tsx
      styles.css
      vite-env.d.ts
    .env.test
    .eslintrc.cjs
    .gitignore
    index.html
    package.json
    README.md
    tsconfig.json
    tsconfig.node.json
    vite.config.js
    vite.config.ts
  react-solana/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-wagmi/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
        SmartContractActionButtonList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-wagmi-appkit-pay/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        AppKitPay.css
        AppKitPay.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-wagmi-authentication-SIWX/
    public/
      reown.svg
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
        SmartContractActionButtonList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-wagmi-paymaster/
    public/
      reown.svg
    src/
      abi/
        storage.ts
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
        PaymasterActionButtonList.tsx
      config/
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  react-wagmi-smart-session/
    public/
      reown.svg
    server/
      config/
        index.ts
      util/
        prepareCalls.js
      .env.test
      package.json
      server.js
    src/
      assets/
        react.svg
      components/
        ActionButtonList.tsx
        InfoList.tsx
        SmartContractActionButtonList.tsx
        SmartSessionActionButtonList.tsx
      config/
        configSmartSession.ts
        index.tsx
      App.css
      App.tsx
      main.tsx
      vite-env.d.ts
    .env.test
    .gitignore
    eslint.config.js
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
vue/
  vue-bitcoin/
    public/
      reown.svg
    src/
      assets/
        main.css
      components/
        ActionButton.vue
        InfoList.vue
      config/
        index.ts
      App.vue
      main.ts
      shims-vue.d.ts
    .env.example
    .gitignore
    env.d.ts
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  vue-core/
    public/
      reown.svg
    src/
      assets/
        main.css
      components/
        ActionButton.vue
        InfoList.vue
      config/
        index.ts
      App.vue
      main.ts
      shims-vue.d.ts
    .env.example
    .gitignore
    env.d.ts
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  vue-ethers/
    public/
      reown.svg
    src/
      assets/
        main.css
      components/
        ActionButton.vue
        InfoList.vue
      config/
        index.ts
      App.vue
      main.ts
      shims-vue.d.ts
    .env.example
    .gitignore
    env.d.ts
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  vue-multichain/
    public/
      reown.svg
    src/
      assets/
        main.css
      components/
        ActionButton.vue
        InfoList.vue
      config/
        index.ts
      App.vue
      main.ts
      shims-vue.d.ts
    .env.example
    .gitignore
    env.d.ts
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  vue-solana/
    public/
      reown.svg
    src/
      assets/
        main.css
      components/
        ActionButton.vue
        InfoList.vue
      config/
        index.ts
      App.vue
      main.ts
      shims-vue.d.ts
    .env.example
    .gitignore
    env.d.ts
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
  vue-wagmi/
    public/
      reown.svg
    src/
      assets/
        main.css
      components/
        ActionButton.vue
        InfoList.vue
      config/
        index.ts
      App.vue
      main.ts
      shims-vue.d.ts
    .env.example
    .gitignore
    env.d.ts
    index.html
    package.json
    README.md
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
.gitignore
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="javascript/javascript-bitcoin/css/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  overflow-x: hidden;
  max-width: 100vw;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
  display: grid;
}

.state-container {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wraps long lines inside <pre> */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-bitcoin/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="javascript/javascript-bitcoin/src/config/appKit.js">
import { bitcoin } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'

const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

const bitcoinAdapter = new BitcoinAdapter({
  projectId
})

export const appKit = createAppKit({
  adapters: [bitcoinAdapter],
  networks: [bitcoin],
  projectId,
  themeMode: 'light',
  features: {
    analytics: true,
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})
</file>

<file path="javascript/javascript-bitcoin/src/services/wallet.js">
export const signMessage = (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    console.log("provider", provider.signMessage)
    return provider.signMessage({
      message: 'Hello from AppKit!',
      address: address
    })
  }
  
  export const getBalance = async (provider, address) => {
    if (!provider) return Promise.reject('No provider available')

      // get the utxos ... this is the list of unspent transactions that the sender has
    const utxos = await getUTXOs(address, false)
    // return the sum of the utxos ... The balance of the sender
    return utxos.reduce((sum, utxo) => sum + utxo.value, 0)
  }

  const getUTXOs = async (address) => {
    const response = await fetch(
        `https://mempool.space/api/address/${address}/utxo`
    )
    return await response.json();
  }
</file>

<file path="javascript/javascript-bitcoin/src/store/appkitStore.js">
export const store = {
    accountState: {},
    networkState: {},
    appKitState: {},
    themeState: { themeMode: 'light', themeVariables: {} },
    events: [],
    walletInfo: {},
    bip122Provider: null
  }
  
  export const updateStore = (key, value) => {
    store[key] = value
  }
</file>

<file path="javascript/javascript-bitcoin/src/utils/dom.js">
export const updateStateDisplay = (elementId, state) => {
    const element = document.getElementById(elementId)
    if (element) {
      element.innerHTML = JSON.stringify(state, null, 2)
    }
  }
  
  export const updateTheme = mode => {
    document.documentElement.setAttribute('data-theme', mode)
    document.body.className = mode
  }

  export const updateButtonVisibility = (isConnected) => {
    const connectedOnlyButtons = document.querySelectorAll('[data-connected-only]')
    connectedOnlyButtons.forEach(button => {
        if (!isConnected) button.style.display = 'none'
        else button.style.display = ''
    })
  }
</file>

<file path="javascript/javascript-bitcoin/src/utils/suscribers.js">
import { store, updateStore } from '../store/appkitStore'
import { updateStateDisplay, updateTheme, updateButtonVisibility } from '../utils/dom'
import { polygon, mainnet } from '@reown/appkit/networks'

export const initializeSubscribers = (modal) => {
  modal.subscribeProviders(state => {
    updateStore('bip122Provider', state['bip122'])
  })

  modal.subscribeAccount(state => {
    updateStore('accountState', state)
    updateStateDisplay('accountState', state)
  })

  modal.subscribeNetwork(state => {
    updateStore('networkState', state)
    updateStateDisplay('networkState', state)
  })

  modal.subscribeState(state => {
    store.appKitState = state

    updateButtonVisibility(modal.getIsConnectedState())
  })
}
</file>

<file path="javascript/javascript-bitcoin/src/main.js">
import { appKit } from './config/appKit'
import { store } from './store/appkitStore'
import { updateTheme, updateButtonVisibility } from './utils/dom'
import { signMessage, getBalance } from './services/wallet'
import { initializeSubscribers } from './utils/suscribers'

// Initialize subscribers
initializeSubscribers(appKit)

// Initial check
updateButtonVisibility(appKit.getIsConnectedState());

// Button event listeners
document.getElementById('open-connect-modal')?.addEventListener(
  'click', () => appKit.open()
)

document.getElementById('disconnect')?.addEventListener(
  'click', () => {
    appKit.disconnect()
  }
)

document.getElementById('sign-message')?.addEventListener(
  'click', async () => {
    const signature = await signMessage(store.bip122Provider, store.accountState.address)

    document.getElementById('signatureState').innerHTML = signature
    document.getElementById('signatureSection').style.display = ''
  }
)

document.getElementById('send-tx')?.addEventListener(
  'click', async () => {
    console.log(store.bip122Provider, store.accountState.address)
    const tx = await sendTx(store.bip122Provider, store.accountState.address)
    console.log('Tx:', tx)

    document.getElementById('txState').innerHTML = JSON.stringify(tx, null, 2)
    document.getElementById('txSection').style.display = ''
  }
)

document.getElementById('get-balance')?.addEventListener(
  'click', async () => {
    const balance = await getBalance(store.bip122Provider, store.accountState.address)
    
    document.getElementById('balanceState').innerHTML = balance + ' ETH'
    document.getElementById('balanceSection').style.display = ''
  }
)

// Set initial theme
updateTheme(store.themeState.themeMode)
</file>

<file path="javascript/javascript-bitcoin/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VanillaJS Bitcoin Example</title>
    <link rel="stylesheet" href="css/App.css" />
  </head>

  <body>
    <div class="pages" id="app">
      <img src="/reown.svg" alt="Reown" style="width: 150px; height: 150px" />
      <h1>AppKit Bitcoin VanillaJS dApp Example</h1>

      <!-- AppKit UI Components -->
      <div class="button-group">
        <appkit-button />
      </div>

      <!-- Modal Controls -->
      <div class="button-group">
        <button id="open-connect-modal" data-connected-only>Open Connect Modal</button>
        <button id="disconnect" data-connected-only>Disconnect</button>
        <button id="sign-message" data-connected-only>Sign Message</button>
        <button id="get-balance" data-connected-only>Get Balance</button>  
      </div>

      <!-- State Displays -->
        <section id="balanceSection" style="display: none;">
          <h2>Balance</h2>
          <pre id="balanceState"></pre>
        </section>

        <section id="txSection" style="display: none;">
          <h2>Tx</h2>
          <pre id="txState"></pre>
        </section>

        <section id="signatureSection" style="display: none;">
          <h2>Signature</h2>
          <pre id="signatureState"></pre>
        </section>

        <section>
          <h2>Account</h2>
          <pre id="accountState"></pre>
        </section>

        <section>
          <h2>Network</h2>
          <pre id="networkState"></pre>
        </section>

        <section>
          <h2>Modal State</h2>
          <pre id="appKitState"></pre>
        </section>

        <section>
          <h2>Theme</h2>
          <pre id="themeState"></pre>
        </section>

        <section>
          <h2>Events</h2>
          <pre id="events"></pre>
        </section>

        <section>
          <h2>Wallet Info</h2>
          <pre id="walletInfo"></pre>
        </section>
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="javascript/javascript-core/css/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  overflow-x: hidden;
  max-width: 100vw;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
  display: grid;
}

.state-container {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wraps long lines inside <pre> */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-core/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="javascript/javascript-core/src/config/appKit.js">
import { sepolia, mainnet } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit'

const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const appKit = createAppKit({
  adapters: [],
  networks: [sepolia, mainnet],
  projectId,
  themeMode: 'light',
  features: {
    analytics: true,
    socials: [],
    email: false
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})
</file>

<file path="javascript/javascript-core/src/services/wallet.js">
export const signMessage = (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    return provider.request({
      method: 'personal_sign',
      params: ['Hello from AppKit!', address]
    })
  }
</file>

<file path="javascript/javascript-core/src/store/appkitStore.js">
export const store = {
    accountState: {},
    networkState: {},
    appKitState: {},
    themeState: { themeMode: 'light', themeVariables: {} },
    events: [],
    walletInfo: {},
    bip122Provider: null
  }
  
  export const updateStore = (key, value) => {
    store[key] = value
  }
</file>

<file path="javascript/javascript-core/src/utils/dom.js">
export const updateStateDisplay = (elementId, state) => {
    const element = document.getElementById(elementId)
    if (element) {
      element.innerHTML = JSON.stringify(state, null, 2)
    }
  }
  
  export const updateTheme = mode => {
    document.documentElement.setAttribute('data-theme', mode)
    document.body.className = mode
  }

  export const updateButtonVisibility = (isConnected) => {
    const connectedOnlyButtons = document.querySelectorAll('[data-connected-only]')
    connectedOnlyButtons.forEach(button => {
        if (!isConnected) button.style.display = 'none'
        else button.style.display = ''
    })
  }
</file>

<file path="javascript/javascript-core/src/utils/suscribers.js">
import { store, updateStore } from '../store/appkitStore'
import { updateStateDisplay, updateTheme, updateButtonVisibility } from '../utils/dom'
import { polygon, mainnet } from '@reown/appkit/networks'

export const initializeSubscribers = (modal) => {
  modal.subscribeProviders(state => {
    console.log("state", state)
    updateStore('eip155', state['eip155'])
  })

  modal.subscribeAccount(state => {
    updateStore('accountState', state)
    updateStateDisplay('accountState', state)
  })

  modal.subscribeNetwork(state => {
    updateStore('networkState', state)
    updateStateDisplay('networkState', state)
  })

  modal.subscribeState(state => {
    store.appKitState = state

    updateButtonVisibility(modal.getIsConnectedState())
  })
}
</file>

<file path="javascript/javascript-core/src/main.js">
import { appKit } from './config/appKit'
import { store } from './store/appkitStore'
import { updateTheme, updateButtonVisibility } from './utils/dom'
import { initializeSubscribers } from './utils/suscribers'
import { signMessage } from './services/wallet'
// Initialize subscribers
initializeSubscribers(appKit)

// Initial check
updateButtonVisibility(appKit.getIsConnectedState());

// Button event listeners
document.getElementById('open-connect-modal')?.addEventListener(
  'click', () => appKit.open()
)

document.getElementById('disconnect')?.addEventListener(
  'click', () => {
    appKit.disconnect()
  }
)

document.getElementById('sign-message')?.addEventListener(
  'click', async () => {
    const signature = await signMessage(store.eip155, store.accountState.address)

    document.getElementById('signatureState').innerHTML = signature
    document.getElementById('signatureSection').style.display = ''
  }
)

// Set initial theme
updateTheme(store.themeState.themeMode)
</file>

<file path="javascript/javascript-core/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VanillaJS Bitcoin Example</title>
    <link rel="stylesheet" href="css/App.css" />
  </head>

  <body>
    <div class="pages" id="app">
      <img src="/reown.svg" alt="Reown" style="width: 150px; height: 150px" />
      <h1>AppKit Bitcoin VanillaJS dApp Example</h1>

      <!-- AppKit UI Components -->
      <div class="button-group">
        <appkit-button />
      </div>

      <!-- Modal Controls -->
      <div class="button-group">
        <button id="open-connect-modal" data-connected-only>Open Connect Modal</button>
        <button id="disconnect" data-connected-only>Disconnect</button>
        <button id="sign-message" data-connected-only>Sign Message</button>
      </div>

      <!-- State Displays -->
        <section id="balanceSection" style="display: none;">
          <h2>Balance</h2>
          <pre id="balanceState"></pre>
        </section>

        <section id="txSection" style="display: none;">
          <h2>Tx</h2>
          <pre id="txState"></pre>
        </section>

        <section id="signatureSection" style="display: none;">
          <h2>Signature</h2>
          <pre id="signatureState"></pre>
        </section>

        <section>
          <h2>Account</h2>
          <pre id="accountState"></pre>
        </section>

        <section>
          <h2>Network</h2>
          <pre id="networkState"></pre>
        </section>

        <section>
          <h2>Modal State</h2>
          <pre id="appKitState"></pre>
        </section>

        <section>
          <h2>Theme</h2>
          <pre id="themeState"></pre>
        </section>

        <section>
          <h2>Events</h2>
          <pre id="events"></pre>
        </section>

        <section>
          <h2>Wallet Info</h2>
          <pre id="walletInfo"></pre>
        </section>
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="javascript/javascript-ethers/css/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  overflow-x: hidden;
  max-width: 100vw;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
  display: grid;
}

.state-container {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wraps long lines inside <pre> */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-ethers/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="javascript/javascript-ethers/src/config/appKit.js">
import { arbitrum, mainnet, optimism, polygon, sepolia } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'

const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const appKit = createAppKit({
  adapters: [new EthersAdapter()],
  networks: [arbitrum, mainnet, optimism, polygon, sepolia],
  projectId,
  themeMode: 'light',
  themeVariables: {
    '--w3m-accent': '#000000',
  },
  features: {
    analytics: true,
  },
})
</file>

<file path="javascript/javascript-ethers/src/services/wallet.js">
import { BrowserProvider, Contract, formatUnits, parseEther } from 'ethers'

export const signMessage = (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    return provider.request({
      method: 'personal_sign',
      params: ['Hello from AppKit!', address]
    })
  }

  export const sendTx = async (provider, address) => {
    if (!provider) return Promise.reject('No provider available')

      const tx = {
        from: address,
        to: address, // same address just for testing
        value: parseEther("0.0001")
      }
      const ethersProvider = new BrowserProvider(provider);
      const signer = await ethersProvider.getSigner()
      return await signer.sendTransaction(tx)
  }

  export const getBalance = async (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    const balance = await provider.request({
      method: 'eth_getBalance',
      params: [address, 'latest']
    })
    return formatUnits(balance, 'ether')
  }
</file>

<file path="javascript/javascript-ethers/src/store/appkitStore.js">
export const store = {
    accountState: {},
    networkState: {},
    appKitState: {},
    themeState: { themeMode: 'light', themeVariables: {} },
    events: [],
    walletInfo: {},
    eip155Provider: null
  }
  
  export const updateStore = (key, value) => {
    store[key] = value
  }
</file>

<file path="javascript/javascript-ethers/src/utils/dom.js">
export const updateStateDisplay = (elementId, state) => {
    const element = document.getElementById(elementId)
    if (element) {
      element.innerHTML = JSON.stringify(state, null, 2)
    }
  }
  
  export const updateTheme = mode => {
    document.documentElement.setAttribute('data-theme', mode)
    document.body.className = mode
  }

  export const updateButtonVisibility = (isConnected) => {
    const connectedOnlyButtons = document.querySelectorAll('[data-connected-only]')
    connectedOnlyButtons.forEach(button => {
        if (!isConnected) button.style.display = 'none'
        else button.style.display = ''
    })
  }
</file>

<file path="javascript/javascript-ethers/src/utils/suscribers.js">
import { store, updateStore } from '../store/appkitStore'
import { updateStateDisplay, updateTheme, updateButtonVisibility } from './dom'
import { polygon, mainnet } from '@reown/appkit/networks'

export const initializeSubscribers = (modal) => {
  modal.subscribeProviders(state => {
    updateStore('eip155Provider', state['eip155'])
  })

  modal.subscribeAccount(state => {
    updateStore('accountState', state)
    updateStateDisplay('accountState', state)
  })

  modal.subscribeNetwork(state => {
    updateStore('networkState', state)
    updateStateDisplay('networkState', state)
    
    const switchNetworkBtn = document.getElementById('switch-network')
    if (switchNetworkBtn) {
      switchNetworkBtn.textContent = `Switch to ${
        state?.chainId === polygon.id ? 'Mainnet' : 'Polygon'
      }`
    }
  })

  modal.subscribeState(state => {
    store.appKitState = state

    updateButtonVisibility(modal.getIsConnectedState())
  })
}
</file>

<file path="javascript/javascript-ethers/src/main.js">
import { appKit } from './config/appKit'
import { store } from './store/appkitStore'
import { updateTheme, updateButtonVisibility } from './utils/dom'
import { signMessage, sendTx, getBalance } from './services/wallet'
import { initializeSubscribers } from './utils/suscribers'

// Initialize subscribers
initializeSubscribers(appKit)

// Initial check
updateButtonVisibility(appKit.getIsConnectedState());

// Button event listeners
document.getElementById('open-connect-modal')?.addEventListener(
  'click', () => appKit.open()
)

document.getElementById('disconnect')?.addEventListener(
  'click', () => {
    appKit.disconnect()
  }
)

document.getElementById('switch-network')?.addEventListener(
  'click', () => {
    const currentChainId = store.networkState?.chainId
    appKit.switchNetwork(currentChainId === polygon.id ? mainnet : polygon)
  }
)

document.getElementById('sign-message')?.addEventListener(
  'click', async () => {
    const signature = await signMessage(store.eip155Provider, store.accountState.address)

    document.getElementById('signatureState').innerHTML = signature
    document.getElementById('signatureSection').style.display = ''
  }
)

document.getElementById('send-tx')?.addEventListener(
  'click', async () => {
    console.log(store.eip155Provider, store.accountState.address)
    const tx = await sendTx(store.eip155Provider, store.accountState.address)
    console.log('Tx:', tx)

    document.getElementById('txState').innerHTML = JSON.stringify(tx, null, 2)
    document.getElementById('txSection').style.display = ''
  }
)

document.getElementById('get-balance')?.addEventListener(
  'click', async () => {
    const balance = await getBalance(store.eip155Provider, store.accountState.address)
    
    document.getElementById('balanceState').innerHTML = balance + ' ETH'
    document.getElementById('balanceSection').style.display = ''
  }
)

// Set initial theme
updateTheme(store.themeState.themeMode)
</file>

<file path="javascript/javascript-ethers/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HTML Ethers Example</title>
    <link rel="stylesheet" href="css/App.css" />
  </head>

  <body>
    <div class="pages" id="app">
      <img src="/reown.svg" alt="Reown" style="width: 150px; height: 150px" />
      <h1>AppKit Ethers VanillaJS dApp Example</h1>

      <!-- AppKit UI Components -->
      <div class="button-group">
        <appkit-button />
      </div>

      <!-- Modal Controls -->
      <div class="button-group">
        <button id="open-connect-modal" data-connected-only>Open Connect Modal</button>
        <button id="disconnect" data-connected-only>Disconnect</button>
        <button id="switch-network" data-connected-only>Switch Network</button>
        <button id="sign-message" data-connected-only>Sign Message</button>
        <button id="send-tx" data-connected-only>Send tx</button>
        <button id="get-balance" data-connected-only>Get Balance</button>  
      </div>

      <!-- State Displays -->
        <section id="balanceSection" style="display: none;">
          <h2>Balance</h2>
          <pre id="balanceState"></pre>
        </section>

        <section id="txSection" style="display: none;">
          <h2>Tx</h2>
          <pre id="txState"></pre>
        </section>

        <section id="signatureSection" style="display: none;">
          <h2>Signature</h2>
          <pre id="signatureState"></pre>
        </section>

        <section>
          <h2>Account</h2>
          <pre id="accountState"></pre>
        </section>

        <section>
          <h2>Network</h2>
          <pre id="networkState"></pre>
        </section>

        <section>
          <h2>Modal State</h2>
          <pre id="appKitState"></pre>
        </section>

        <section>
          <h2>Theme</h2>
          <pre id="themeState"></pre>
        </section>

        <section>
          <h2>Events</h2>
          <pre id="events"></pre>
        </section>

        <section>
          <h2>Wallet Info</h2>
          <pre id="walletInfo"></pre>
        </section>
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="javascript/javascript-multichain/css/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  overflow-x: hidden;
  max-width: 100vw;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
  display: grid;
}

.state-container {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wraps long lines inside <pre> */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-multichain/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="javascript/javascript-multichain/src/config/appKit.js">
import { arbitrum, mainnet, optimism, polygon, sepolia, solana } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'

const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks = [arbitrum, mainnet, optimism, polygon, sepolia, solana]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks,
})

//Set up the Solana Adapter (Config)
export const solanaAdapter = new SolanaAdapter()

export const appKit = createAppKit({
  adapters: [wagmiAdapter, solanaAdapter],
  networks,
  projectId,
  themeMode: 'light',
  themeVariables: {
    '--w3m-accent': '#000000',
  },
  features: {
    analytics: true,
  }
})
</file>

<file path="javascript/javascript-multichain/src/services/walletSolana.js">
import { PublicKey, LAMPORTS_PER_SOL, Transaction, SystemProgram } from "@solana/web3.js";

  export const signMessage = async (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    const encodedMessage = new TextEncoder().encode("Hello Reown AppKit!");
    const sig = await provider.signMessage(encodedMessage);

    return Buffer.from(sig).toString("hex");
  }

  export const sendTx = async (provider, connection, address) => {
      if (!address || !connection) throw Error('user is disconnected');

      const wallet = new PublicKey(address);
      if (!wallet) throw Error('wallet provider is not available');

      const latestBlockhash = await connection.getLatestBlockhash();

      const transaction= new Transaction({
        feePayer: wallet,
        recentBlockhash: latestBlockhash?.blockhash,
      }).add(
        SystemProgram.transfer({
          fromPubkey: wallet,
          toPubkey: new PublicKey(address), // destination address
          lamports: 1000,
        })
      );

      return await provider.sendTransaction(transaction, connection)
  }

  export const getBalance = async (provider, connection, address) => {
    if (!address || !connection) throw Error('user is disconnected');
      /* https://rpc.walletconnect.org/v1/?chainId=solana%3A5ey // online
      https://rpc.walletconnect.org/v1/?chainId=solana%3AEtWTRAB // dev */
      const wallet = new PublicKey(address);
      const balance = await connection?.getBalance(wallet);
      if (balance !== undefined) {
        return `${balance / LAMPORTS_PER_SOL}`;
      } else {
        return '-';
      }
  }
</file>

<file path="javascript/javascript-multichain/src/services/walletWagmi.js">
import { parseEther, formatUnits } from 'viem'
import { sendTransaction, getBalance as getBalanceWagmi} from '@wagmi/core'
import {createWalletClient} from 'viem'

export const signMessage = (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    return provider.request({
      method: 'personal_sign',
      params: ['Hello from AppKit!', address]
    })
  }

  export const sendTx = async (provider, address, wagmiAdapter) => {
    if (!provider) return Promise.reject('No provider available')

      const result = await sendTransaction(wagmiAdapter.wagmiConfig, {
        to: address,
        value: parseEther("0.0001"),
      })
      
      return result;
  }

  export const getBalance = async (provider, address, wagmiConfig) => {
    if (!provider) return Promise.reject('No provider available')
    
      const balance = await provider.request({
        method: 'eth_getBalance',
        params: [address, 'latest']
      })
     const ethBalance = formatUnits(BigInt(balance), 18)
     return ethBalance
  }
</file>

<file path="javascript/javascript-multichain/src/store/appkitStore.js">
export const store = {
    accountState: {},
    networkState: {},
    appKitState: {},
    themeState: { themeMode: 'light', themeVariables: {} },
    events: [],
    walletInfo: {},
    eip155Provider: null
  }
  
  export const updateStore = (key, value) => {
    store[key] = value
  }
</file>

<file path="javascript/javascript-multichain/src/utils/dom.js">
export const updateStateDisplay = (elementId, state) => {
    const element = document.getElementById(elementId)
    if (element) {
      element.innerHTML = JSON.stringify(state, null, 2)
    }
  }
  
  export const updateTheme = mode => {
    document.documentElement.setAttribute('data-theme', mode)
    document.body.className = mode
  }

  export const updateButtonVisibility = (isConnected) => {
    const connectedOnlyButtons = document.querySelectorAll('[data-connected-only]')
    connectedOnlyButtons.forEach(button => {
        if (!isConnected) button.style.display = 'none'
        else button.style.display = ''
    })
  }
</file>

<file path="javascript/javascript-multichain/src/utils/suscribers.js">
import { store, updateStore } from '../store/appkitStore'
import { updateStateDisplay, updateTheme, updateButtonVisibility } from '../utils/dom'
import { polygon, mainnet, solana } from '@reown/appkit/networks'
import { Connection } from "@solana/web3.js";

export const initializeSubscribers = (modal) => {
  modal.subscribeProviders(state => {
    if (state['eip155']) {
      updateStore('eip155Provider', state['eip155'])
    } else {
      updateStore('solanaProvider', state['solana'])

      const url = state['solana'].getActiveChain().rpcUrls.default.http[0];
      const connection = new Connection(url);
      
      updateStore('solanaConnection', connection)
    }
  })

  modal.subscribeAccount(state => {
    updateStore('accountState', state)
    updateStateDisplay('accountState', state)
  })

  modal.subscribeNetwork(state => {
    updateStore('networkState', state)

    if (store['solanaProvider']) {
      const arrayChain = store['solanaProvider'].requestedChains
      const selectedChain = arrayChain.find(chain => chain.id === state.chainId);
      const url = selectedChain.rpcUrls.default.http[0];
      const connection = new Connection(url);
      updateStore('solanaConnection', connection)
    }
    
  })

  modal.subscribeState(state => {
    store.appKitState = state

    updateButtonVisibility(modal.getIsConnectedState())
  })
}
</file>

<file path="javascript/javascript-multichain/src/main.js">
import { appKit, wagmiAdapter } from './config/appKit'
import { store } from './store/appkitStore'
import { updateTheme, updateButtonVisibility } from './utils/dom'
import { signMessage, sendTx, getBalance } from './services/walletWagmi'
import { signMessage as signMessageSolana, sendTx as sendTxSolana, getBalance as getBalanceSolana } from './services/walletSolana'
import { initializeSubscribers } from './utils/suscribers'

// Initialize subscribers
initializeSubscribers(appKit)

// Initial check
updateButtonVisibility(appKit.getIsConnectedState());

// Button event listeners
document.getElementById('open-connect-modal')?.addEventListener(
  'click', () => appKit.open()
)

document.getElementById('disconnect')?.addEventListener(
  'click', () => {
    appKit.disconnect()
  }
)

document.getElementById('sign-message')?.addEventListener(
  'click', async () => {
    let signature = ''
    if (store.accountState.caipAddress.includes("eip155")) {
      signature = await signMessage(store.eip155Provider, store.accountState.address);
    } else {
      signature = await signMessageSolana(store.solanaProvider, store.accountState.address);
    }
    document.getElementById('signatureState').innerHTML = signature;
    document.getElementById('signatureSection').style.display = ''
  }
)

document.getElementById('send-tx')?.addEventListener(
  'click', async () => {
    let tx = '';
    if (store.accountState.caipAddress.includes("eip155")) {
      tx = await sendTx(store.eip155Provider, store.accountState.address, wagmiAdapter.wagmiConfig)
    } else {
      tx = await sendTxSolana(store.solanaProvider, store.solanaConnection, store.accountState.address)
    }
    

    document.getElementById('txState').innerHTML = JSON.stringify(tx, null, 2)
    document.getElementById('txSection').style.display = ''
  }
)

document.getElementById('get-balance')?.addEventListener(
  'click', async () => {
    let balance = ''
    if (store.accountState.caipAddress.includes("eip155")) {
      balance = await getBalance(store.eip155Provider, store.accountState.address, wagmiAdapter.wagmiConfig)
    } else{
      balance = await getBalanceSolana(store.solanaProvider, store.solanaConnection, store.accountState.address)
    }
    
    document.getElementById('balanceState').innerHTML = balance + ' ETH'
    document.getElementById('balanceSection').style.display = ''
  }
)

// Set initial theme
updateTheme(store.themeState.themeMode)
</file>

<file path="javascript/javascript-multichain/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HTML Wagmi Example</title>
    <link rel="stylesheet" href="css/App.css" />
  </head>

  <body>
    <div class="pages" id="app">
      <img src="/reown.svg" alt="Reown" style="width: 150px; height: 150px" />
      <h1>AppKit Multichain VanillaJS dApp Example</h1>

      <!-- AppKit UI Components -->
      <div class="button-group">
        <appkit-button />
      </div>

      <!-- Modal Controls -->
      <div class="button-group">
        <button id="open-connect-modal" data-connected-only>Open Connect Modal</button>
        <button id="disconnect" data-connected-only>Disconnect</button>
        <button id="sign-message" data-connected-only>Sign Message</button>
        <button id="send-tx" data-connected-only>Send tx</button>
        <button id="get-balance" data-connected-only>Get Balance</button>  
      </div>

      <!-- State Displays -->
        <section id="balanceSection" style="display: none;">
          <h2>Balance</h2>
          <pre id="balanceState"></pre>
        </section>

        <section id="txSection" style="display: none;">
          <h2>Tx</h2>
          <pre id="txState"></pre>
        </section>

        <section id="signatureSection" style="display: none;">
          <h2>Signature</h2>
          <pre id="signatureState"></pre>
        </section>

        <section>
          <h2>Account</h2>
          <pre id="accountState"></pre>
        </section>

        <section>
          <h2>Network</h2>
          <pre id="networkState"></pre>
        </section>

        <section>
          <h2>Modal State</h2>
          <pre id="appKitState"></pre>
        </section>

        <section>
          <h2>Theme</h2>
          <pre id="themeState"></pre>
        </section>

        <section>
          <h2>Events</h2>
          <pre id="events"></pre>
        </section>

        <section>
          <h2>Wallet Info</h2>
          <pre id="walletInfo"></pre>
        </section>
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="javascript/javascript-solana/css/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  overflow-x: hidden;
  max-width: 100vw;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
  display: grid;
}

.state-container {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wraps long lines inside <pre> */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-solana/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="javascript/javascript-solana/src/config/appKit.js">
import { solana, solanaDevnet, solanaTestnet } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'

const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const appKit = createAppKit({
  adapters: [new SolanaAdapter()],
  networks: [solana, solanaDevnet, solanaTestnet],
  projectId,
  themeMode: 'light',
  themeVariables: {
    '--w3m-accent': '#000000',
  },
  features: {
    analytics: true,
  }
})
</file>

<file path="javascript/javascript-solana/src/services/wallet.js">
import { PublicKey, LAMPORTS_PER_SOL, Transaction, SystemProgram } from "@solana/web3.js";

  export const signMessage = async (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    const encodedMessage = new TextEncoder().encode("Hello Reown AppKit!");
    const sig = await provider.signMessage(encodedMessage);

    return Buffer.from(sig).toString("hex");
  }

  export const sendTx = async (provider, connection, address) => {
      if (!address || !connection) throw Error('user is disconnected');

      const wallet = new PublicKey(address);
      if (!wallet) throw Error('wallet provider is not available');

      const latestBlockhash = await connection.getLatestBlockhash();

      const transaction= new Transaction({
        feePayer: wallet,
        recentBlockhash: latestBlockhash?.blockhash,
      }).add(
        SystemProgram.transfer({
          fromPubkey: wallet,
          toPubkey: new PublicKey(address), // destination address
          lamports: 1000,
        })
      );

      return await provider.sendTransaction(transaction, connection)
  }

  export const getBalance = async (provider, connection, address) => {
    if (!address || !connection) throw Error('user is disconnected');
      /* https://rpc.walletconnect.org/v1/?chainId=solana%3A5ey // online
      https://rpc.walletconnect.org/v1/?chainId=solana%3AEtWTRAB // dev */
      console.log("connection :",connection);
      const wallet = new PublicKey(address);
      const balance = await connection?.getBalance(wallet);
      if (balance !== undefined) {
        return `${balance / LAMPORTS_PER_SOL}`;
      } else {
        return '-';
      }
  }
</file>

<file path="javascript/javascript-solana/src/store/appkitStore.js">
export const store = {
    accountState: {},
    networkState: {},
    appKitState: {},
    themeState: { themeMode: 'light', themeVariables: {} },
    events: [],
    walletInfo: {},
    solanaProvider: null,
    solanaConnection: null
  }
  
  export const updateStore = (key, value) => {
    store[key] = value
  }
</file>

<file path="javascript/javascript-solana/src/utils/dom.js">
export const updateStateDisplay = (elementId, state) => {
    const element = document.getElementById(elementId)
    if (element) {
      element.innerHTML = JSON.stringify(state, null, 2)
    }
  }
  
  export const updateTheme = mode => {
    document.documentElement.setAttribute('data-theme', mode)
    document.body.className = mode
  }

  export const updateButtonVisibility = (isConnected) => {
    const connectedOnlyButtons = document.querySelectorAll('[data-connected-only]')
    connectedOnlyButtons.forEach(button => {
        if (!isConnected) button.style.display = 'none'
        else button.style.display = ''
    })
  }
</file>

<file path="javascript/javascript-solana/src/utils/suscribers.js">
import { store, updateStore } from '../store/appkitStore'
import { updateStateDisplay, updateTheme, updateButtonVisibility } from '../utils/dom'
import { solana  } from '@reown/appkit/networks'
import { Connection } from "@solana/web3.js";

export const initializeSubscribers = (modal) => {
  modal.subscribeProviders(state => {
    updateStore('solanaProvider', state['solana'])
    console.log("state inicial:",store['solanaProvider']);
    console.log("Chains:",store['solanaProvider'].requestedChains);
    const url = state['solana'].getActiveChain().rpcUrls.default.http[0];
    const connection = new Connection(url);
    //const connection = new Connection("https://rpc.walletconnect.org/v1/?chainId=solana%3AEtWTRABZaYq6iMfeYKouRu166VU2xqa1&projectId=3e87ce292b6e2c29c51d832bdbd90c23");
    
    updateStore('solanaConnection', connection)
  })

  modal.subscribeAccount(state => {
    updateStore('accountState', state)
    updateStateDisplay('accountState', state)
  })

  modal.subscribeNetwork(state => {
    updateStore('networkState', state)
    updateStateDisplay('networkState', state)
    console.log("netowrk:", state.chainId);
    if (store['solanaProvider']) {
      const arrayChain = store['solanaProvider'].requestedChains
      const selectedChain = arrayChain.find(chain => chain.id === state.chainId);
      const url = selectedChain.rpcUrls.default.http[0];
      const connection = new Connection(url);
      updateStore('solanaConnection', connection)
    }
    const switchNetworkBtn = document.getElementById('switch-network')
    if (switchNetworkBtn) {
      switchNetworkBtn.textContent = `Switch to ${
        state?.chainId === solana.id ? 'Solana Devnet' : 'Solana'
      }`
    }
  })

  modal.subscribeState(state => {
    store.appKitState = state

    updateButtonVisibility(modal.getIsConnectedState())
  })
}
</file>

<file path="javascript/javascript-solana/src/main.js">
import { appKit } from './config/appKit'
import { store } from './store/appkitStore'
import { updateTheme, updateButtonVisibility } from './utils/dom'
import { signMessage, sendTx, getBalance } from './services/wallet'
import { initializeSubscribers } from './utils/suscribers'
import { solana, solanaDevnet } from '@reown/appkit/networks'

// Initialize subscribers
initializeSubscribers(appKit)

// Initial check
updateButtonVisibility(appKit.getIsConnectedState());

// Button event listeners
document.getElementById('open-connect-modal')?.addEventListener(
  'click', () => appKit.open()
)

document.getElementById('disconnect')?.addEventListener(
  'click', () => {
    appKit.disconnect()
  }
)

document.getElementById('switch-network')?.addEventListener(
  'click', () => {
    const currentChainId = store.networkState?.chainId
    appKit.switchNetwork(currentChainId === solana.id ? solana : solanaDevnet)
  }
)

document.getElementById('sign-message')?.addEventListener(
  'click', async () => {
    const signature = await signMessage(store.solanaProvider, store.accountState.address)

    document.getElementById('signatureState').innerHTML = signature
    document.getElementById('signatureSection').style.display = ''
  }
)

document.getElementById('send-tx')?.addEventListener(
  'click', async () => {
    const tx = await sendTx(store.solanaProvider, store.solanaConnection, store.accountState.address)
    console.log('Tx:', tx)

    document.getElementById('txState').innerHTML = JSON.stringify(tx, null, 2)
    document.getElementById('txSection').style.display = ''
  }
)

document.getElementById('get-balance')?.addEventListener(
  'click', async () => {
    const balance = await getBalance(store.solanaProvider, store.solanaConnection, store.accountState.address)
    
    document.getElementById('balanceState').innerHTML = balance + ' SOL'
    document.getElementById('balanceSection').style.display = ''
  }
)

// Set initial theme
updateTheme(store.themeState.themeMode)
</file>

<file path="javascript/javascript-solana/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HTML Solana Example</title>
    <link rel="stylesheet" href="css/App.css" />
  </head>

  <body>
    <div class="pages" id="app">
      <img src="/reown.svg" alt="Reown" style="width: 150px; height: 150px" />
      <h1>AppKit Solana VanillaJS dApp Example</h1>

      <!-- AppKit UI Components -->
      <div class="button-group">
        <appkit-button />
      </div>

      <!-- Modal Controls -->
      <div class="button-group">
        <button id="open-connect-modal" data-connected-only>Open Connect Modal</button>
        <button id="disconnect" data-connected-only>Disconnect</button>
        <button id="switch-network" data-connected-only>Switch Network</button>
        <button id="sign-message" data-connected-only>Sign Message</button>
        <button id="send-tx" data-connected-only>Send tx</button>
        <button id="get-balance" data-connected-only>Get Balance</button>  
      </div>

      <!-- State Displays -->
        <section id="balanceSection" style="display: none;">
          <h2>Balance</h2>
          <pre id="balanceState"></pre>
        </section>

        <section id="txSection" style="display: none;">
          <h2>Tx</h2>
          <pre id="txState"></pre>
        </section>

        <section id="signatureSection" style="display: none;">
          <h2>Signature</h2>
          <pre id="signatureState"></pre>
        </section>

        <section>
          <h2>Account</h2>
          <pre id="accountState"></pre>
        </section>

        <section>
          <h2>Network</h2>
          <pre id="networkState"></pre>
        </section>

        <section>
          <h2>Modal State</h2>
          <pre id="appKitState"></pre>
        </section>

        <section>
          <h2>Theme</h2>
          <pre id="themeState"></pre>
        </section>

        <section>
          <h2>Events</h2>
          <pre id="events"></pre>
        </section>

        <section>
          <h2>Wallet Info</h2>
          <pre id="walletInfo"></pre>
        </section>
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="javascript/javascript-wagmi/css/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  overflow-x: hidden;
  max-width: 100vw;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
  display: grid;
}

.state-container {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wraps long lines inside <pre> */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-wagmi/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="javascript/javascript-wagmi/src/config/appKit.js">
import { arbitrum, mainnet, optimism, polygon, sepolia } from '@reown/appkit/networks'
import { createAppKit } from '@reown/appkit'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'

const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks = [arbitrum, mainnet, optimism, polygon, sepolia]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks,
})

export const appKit = createAppKit({
  adapters: [wagmiAdapter],
  networks,
  projectId,
  themeMode: 'light',
  themeVariables: {
    '--w3m-accent': '#000000',
  },
  features: {
    analytics: true,
  }
})
</file>

<file path="javascript/javascript-wagmi/src/services/wallet.js">
import { parseEther, formatUnits } from 'viem'
import { sendTransaction, getBalance as getBalanceWagmi} from '@wagmi/core'
import {createWalletClient} from 'viem'

export const signMessage = (provider, address) => {
    if (!provider) return Promise.reject('No provider available')
    
    return provider.request({
      method: 'personal_sign',
      params: ['Hello from AppKit!', address]
    })
  }

  export const sendTx = async (provider, address, wagmiAdapter) => {
    if (!provider) return Promise.reject('No provider available')

      const result = await sendTransaction(wagmiAdapter.wagmiConfig, {
        to: address,
        value: parseEther("0.0001"),
      })
      
      return result;
  }

  export const getBalance = async (provider, address, wagmiConfig) => {
    if (!provider) return Promise.reject('No provider available')
    
      const balance = await provider.request({
        method: 'eth_getBalance',
        params: [address, 'latest']
      })
     const ethBalance = formatUnits(BigInt(balance), 18)
     return ethBalance
  }
</file>

<file path="javascript/javascript-wagmi/src/store/appkitStore.js">
export const store = {
    accountState: {},
    networkState: {},
    appKitState: {},
    themeState: { themeMode: 'light', themeVariables: {} },
    events: [],
    walletInfo: {},
    eip155Provider: null
  }
  
  export const updateStore = (key, value) => {
    store[key] = value
  }
</file>

<file path="javascript/javascript-wagmi/src/utils/dom.js">
export const updateStateDisplay = (elementId, state) => {
    const element = document.getElementById(elementId)
    if (element) {
      element.innerHTML = JSON.stringify(state, null, 2)
    }
  }
  
  export const updateTheme = mode => {
    document.documentElement.setAttribute('data-theme', mode)
    document.body.className = mode
  }

  export const updateButtonVisibility = (isConnected) => {
    const connectedOnlyButtons = document.querySelectorAll('[data-connected-only]')
    connectedOnlyButtons.forEach(button => {
        if (!isConnected) button.style.display = 'none'
        else button.style.display = ''
    })
  }
</file>

<file path="javascript/javascript-wagmi/src/utils/suscribers.js">
import { store, updateStore } from '../store/appkitStore'
import { updateStateDisplay, updateTheme, updateButtonVisibility } from '../utils/dom'
import { polygon, mainnet } from '@reown/appkit/networks'

export const initializeSubscribers = (modal) => {
  modal.subscribeProviders(state => {
    updateStore('eip155Provider', state['eip155'])
  })

  modal.subscribeAccount(state => {
    updateStore('accountState', state)
    updateStateDisplay('accountState', state)
  })

  modal.subscribeNetwork(state => {
    updateStore('networkState', state)
    updateStateDisplay('networkState', state)
    
    const switchNetworkBtn = document.getElementById('switch-network')
    if (switchNetworkBtn) {
      switchNetworkBtn.textContent = `Switch to ${
        state?.chainId === polygon.id ? 'Mainnet' : 'Polygon'
      }`
    }
  })

  modal.subscribeState(state => {
    store.appKitState = state

    updateButtonVisibility(modal.getIsConnectedState())
  })
}
</file>

<file path="javascript/javascript-wagmi/src/main.js">
import { appKit, wagmiAdapter } from './config/appKit'
import { store } from './store/appkitStore'
import { updateTheme, updateButtonVisibility } from './utils/dom'
import { signMessage, sendTx, getBalance } from './services/wallet'
import { initializeSubscribers } from './utils/suscribers'

// Initialize subscribers
initializeSubscribers(appKit)

// Initial check
updateButtonVisibility(appKit.getIsConnectedState());

// Button event listeners
document.getElementById('open-connect-modal')?.addEventListener(
  'click', () => appKit.open()
)

document.getElementById('disconnect')?.addEventListener(
  'click', () => {
    appKit.disconnect()
  }
)

document.getElementById('switch-network')?.addEventListener(
  'click', () => {
    const currentChainId = store.networkState?.chainId
    appKit.switchNetwork(currentChainId === polygon.id ? mainnet : polygon)
  }
)

document.getElementById('sign-message')?.addEventListener(
  'click', async () => {
    const signature = await signMessage(store.eip155Provider, store.accountState.address)

    document.getElementById('signatureState').innerHTML = signature
    document.getElementById('signatureSection').style.display = ''
  }
)

document.getElementById('send-tx')?.addEventListener(
  'click', async () => {
    const tx = await sendTx(store.eip155Provider, store.accountState.address, wagmiAdapter.wagmiConfig)
    

    document.getElementById('txState').innerHTML = JSON.stringify(tx, null, 2)
    document.getElementById('txSection').style.display = ''
  }
)

document.getElementById('get-balance')?.addEventListener(
  'click', async () => {
    const balance = await getBalance(store.eip155Provider, store.accountState.address, wagmiAdapter.wagmiConfig)
    
    document.getElementById('balanceState').innerHTML = balance + ' ETH'
    document.getElementById('balanceSection').style.display = ''
  }
)

// Set initial theme
updateTheme(store.themeState.themeMode)
</file>

<file path="javascript/javascript-wagmi/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HTML Wagmi Example</title>
    <link rel="stylesheet" href="css/App.css" />
  </head>

  <body>
    <div class="pages" id="app">
      <img src="/reown.svg" alt="Reown" style="width: 150px; height: 150px" />
      <h1>AppKit Wagmi VanillaJS dApp Example</h1>

      <!-- AppKit UI Components -->
      <div class="button-group">
        <appkit-button />
      </div>

      <!-- Modal Controls -->
      <div class="button-group">
        <button id="open-connect-modal" data-connected-only>Open Connect Modal</button>
        <button id="disconnect" data-connected-only>Disconnect</button>
        <button id="switch-network" data-connected-only>Switch Network</button>
        <button id="sign-message" data-connected-only>Sign Message</button>
        <button id="send-tx" data-connected-only>Send tx</button>
        <button id="get-balance" data-connected-only>Get Balance</button>  
      </div>

      <!-- State Displays -->
        <section id="balanceSection" style="display: none;">
          <h2>Balance</h2>
          <pre id="balanceState"></pre>
        </section>

        <section id="txSection" style="display: none;">
          <h2>Tx</h2>
          <pre id="txState"></pre>
        </section>

        <section id="signatureSection" style="display: none;">
          <h2>Signature</h2>
          <pre id="signatureState"></pre>
        </section>

        <section>
          <h2>Account</h2>
          <pre id="accountState"></pre>
        </section>

        <section>
          <h2>Network</h2>
          <pre id="networkState"></pre>
        </section>

        <section>
          <h2>Modal State</h2>
          <pre id="appKitState"></pre>
        </section>

        <section>
          <h2>Theme</h2>
          <pre id="themeState"></pre>
        </section>

        <section>
          <h2>Events</h2>
          <pre id="events"></pre>
        </section>

        <section>
          <h2>Wallet Info</h2>
          <pre id="walletInfo"></pre>
        </section>
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="nextjs/next-bitcoin-app-router/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-bitcoin-app-router/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-bitcoin-app-router/src/app/layout.tsx">
import type { Metadata } from "next";

import './globals.css';
import ContextProvider from '@/context'

export const metadata: Metadata = {
  title: "AppKit in Next.js + ethers",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-bitcoin-app-router/src/app/not-found.tsx">
export default function NotFound() {
    return <h1>404 - Page Not Found</h1>;
  }
</file>

<file path="nextjs/next-bitcoin-app-router/src/app/page.tsx">
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from 'next/image';

export default function Home() {

  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit bitcoin Next.js App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-bitcoin-app-router/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="nextjs/next-bitcoin-app-router/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {
  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-bitcoin-app-router/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useClientMounted } from "@/hooks/useClientMount";
export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
                {embeddedWalletInfo && (`Account Type: ${embeddedWalletInfo?.accountType}\n`)}
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>
    </>
  )
}
</file>

<file path="nextjs/next-bitcoin-app-router/src/config/index.ts">
import { bitcoin, bitcoinTestnet } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [bitcoin, bitcoinTestnet] as [AppKitNetwork, ...AppKitNetwork[]]

// Set up Bitcoin Adapter
export const bitcoinAdapter = new BitcoinAdapter({
  projectId
})
</file>

<file path="nextjs/next-bitcoin-app-router/src/context/index.tsx">
'use client'

import { bitcoinAdapter, projectId, networks } from '@/config'
import { createAppKit } from '@reown/appkit/react'
import React, { type ReactNode } from 'react'

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Set up metadata
const metadata = {
  name: 'next-reown-appkit',
  description: 'next-reown-appkit',
  url: 'https://github.com/0xonerb/next-reown-appkit-ssr', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
export const modal = createAppKit({
  adapters: [bitcoinAdapter],
  projectId,
  networks,
  metadata,
  themeMode: 'light',
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

function ContextProvider({ children }: { children: ReactNode}) {
  return (
    <>{children}</>
  )
}

export default ContextProvider
</file>

<file path="nextjs/next-bitcoin-app-router/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-bitcoin-app-router/.env.example">
NEXT_PUBLIC_PROJECT_ID=
</file>

<file path="nextjs/next-bitcoin-app-router/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-bitcoin-app-router/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

pnpm-lock.yaml
</file>

<file path="nextjs/next-bitcoin-app-router/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-bitcoin-app-router/README.md">
# Reown AppKit Example using ethers (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-bitcoin-app-router/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-core-app-router/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-core-app-router/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-core-app-router/src/app/layout.tsx">
import type { Metadata } from "next";

import './globals.css';
import ContextProvider from '@/context'

export const metadata: Metadata = {
  title: "AppKit in Next.js + ethers",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-core-app-router/src/app/not-found.tsx">
export default function NotFound() {
    return <h1>404 - Page Not Found</h1>;
  }
</file>

<file path="nextjs/next-core-app-router/src/app/page.tsx">
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from 'next/image';

export default function Home() {

  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit Core Next.js App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-core-app-router/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {
  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-core-app-router/src/config/index.ts">
import { sepolia, mainnet } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [sepolia, mainnet] as [AppKitNetwork, ...AppKitNetwork[]]
</file>

<file path="nextjs/next-core-app-router/src/context/index.tsx">
'use client'

import {  projectId, networks } from '@/config'
import { createAppKit } from '@reown/appkit/react'
import React, { type ReactNode } from 'react'

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Set up metadata
const metadata = {
  name: 'next-reown-appkit',
  description: 'next-reown-appkit',
  url: 'https://github.com/0xonerb/next-reown-appkit-ssr', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
export const modal = createAppKit({
  adapters: [],
  projectId,
  networks,
  metadata,
  themeMode: 'light',
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

function ContextProvider({ children }: { children: ReactNode}) {
  return (
    <>{children}</>
  )
}

export default ContextProvider
</file>

<file path="nextjs/next-core-app-router/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-core-app-router/.env.example">
NEXT_PUBLIC_PROJECT_ID=
</file>

<file path="nextjs/next-core-app-router/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-core-app-router/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

pnpm-lock.yaml
</file>

<file path="nextjs/next-core-app-router/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-core-app-router/README.md">
# Reown AppKit Example using ethers (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-core-app-router/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-ethers-app-router/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-ethers-app-router/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-ethers-app-router/src/app/layout.tsx">
import type { Metadata } from "next";

import './globals.css';
import ContextProvider from '@/context'

export const metadata: Metadata = {
  title: "AppKit in Next.js + ethers",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-ethers-app-router/src/app/not-found.tsx">
export default function NotFound() {
    return <h1>404 - Page Not Found</h1>;
  }
</file>

<file path="nextjs/next-ethers-app-router/src/app/page.tsx">
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from 'next/image';

export default function Home() {

  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit ethers Next.js App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-ethers-app-router/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="nextjs/next-ethers-app-router/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {
  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-ethers-app-router/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useClientMounted } from "@/hooks/useClientMount";

export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  );
}
</file>

<file path="nextjs/next-ethers-app-router/src/config/index.ts">
import { EthersAdapter } from '@reown/appkit-adapter-ethers'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [mainnet, arbitrum] as [AppKitNetwork, ...AppKitNetwork[]]

export const ethersAdapter = new EthersAdapter();
</file>

<file path="nextjs/next-ethers-app-router/src/context/index.tsx">
'use client'

import { ethersAdapter, projectId, networks } from '@/config'
import { createAppKit } from '@reown/appkit/react'
import React, { type ReactNode } from 'react'

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Set up metadata
const metadata = {
  name: 'next-reown-appkit',
  description: 'next-reown-appkit',
  url: 'https://github.com/0xonerb/next-reown-appkit-ssr', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
export const modal = createAppKit({
  adapters: [ethersAdapter],
  projectId,
  networks,
  metadata,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

function ContextProvider({ children }: { children: ReactNode}) {
  return (
    <>{children}</>
  )
}

export default ContextProvider
</file>

<file path="nextjs/next-ethers-app-router/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-ethers-app-router/.env.example">
NEXT_PUBLIC_PROJECT_ID=
</file>

<file path="nextjs/next-ethers-app-router/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-ethers-app-router/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="nextjs/next-ethers-app-router/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-ethers-app-router/README.md">
# Reown AppKit Example using ethers (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-ethers-app-router/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-multichain-app-router/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-multichain-app-router/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-multichain-app-router/src/app/layout.tsx">
import type { Metadata } from "next";


import { headers } from 'next/headers' // added
import './globals.css';
import ContextProvider from '@/context'

export const metadata: Metadata = {
  title: "AppKit in Next.js + multichain",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const headersData = await headers();
  const cookies = headersData.get('cookie');

  return (
    <html lang="en">
      <body>
        <ContextProvider cookies={cookies}>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-multichain-app-router/src/app/page.tsx">
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from 'next/image';

export default function Home() {

  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit multichain Next.js App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-multichain-app-router/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="nextjs/next-multichain-app-router/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {
  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-multichain-app-router/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useClientMounted } from "@/hooks/useClientMount";

export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                Selected Network ID: {state.selectedNetworkId?.toString()}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="nextjs/next-multichain-app-router/src/context/index.tsx">
'use client'

import { wagmiAdapter, solanaWeb3JsAdapter, projectId, networks } from '@/config'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { createAppKit } from '@reown/appkit/react'
import React, { type ReactNode } from 'react'
import { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'

// Set up queryClient
const queryClient = new QueryClient()

// Set up metadata
const metadata = {
  name: 'next-reown-appkit',
  description: 'next-reown-appkit',
  url: 'https://github.com/0xonerb/next-reown-appkit-ssr', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
export const modal = createAppKit({
  adapters: [wagmiAdapter, solanaWeb3JsAdapter],
  projectId,
  networks,
  metadata,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

function ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {
  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)

  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

export default ContextProvider
</file>

<file path="nextjs/next-multichain-app-router/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-multichain-app-router/.env.example">
NEXT_PUBLIC_PROJECT_ID=
</file>

<file path="nextjs/next-multichain-app-router/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-multichain-app-router/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

pnpm-lock.yaml
</file>

<file path="nextjs/next-multichain-app-router/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-multichain-app-router/README.md">
# Reown AppKit Example using wagmi+Solana (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-multichain-app-router/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-siwe-next-auth/app/api/auth/[...nextauth]/route.ts">
import NextAuth from 'next-auth';
import credentialsProvider from 'next-auth/providers/credentials';
import {
  type SIWESession,
  /* verifySignature, */
  getChainIdFromMessage,
  getAddressFromMessage
} from '@reown/appkit-siwe'
import { createPublicClient, http } from 'viem'

declare module 'next-auth' {
  interface Session extends SIWESession {
    address: string;
    chainId: number;
  }
}

const nextAuthSecret = process.env.NEXTAUTH_SECRET;
if (!nextAuthSecret) {
  throw new Error('NEXTAUTH_SECRET is not set');
}

const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;
if (!projectId) {
  throw new Error('NEXT_PUBLIC_PROJECT_ID is not set');
}

const providers = [
  credentialsProvider({
    name: 'Ethereum',
    credentials: {
      message: {
        label: 'Message',
        type: 'text',
        placeholder: '0x0',
      },
      signature: {
        label: 'Signature',
        type: 'text',
        placeholder: '0x0',
      },
    },
    async authorize(credentials) {
      try {
        if (!credentials?.message) {
          throw new Error('SiweMessage is undefined');
        }
        const { message, signature } = credentials;
        const address = getAddressFromMessage(message);
        const chainId = getChainIdFromMessage(message);

      // for the moment, the verifySignature is not working with social logins and emails  with non deployed smart accounts    
       /*  const isValid = await verifySignature({
          address,
          message,
          signature,
          chainId,
          projectId,
        }); */
        // we are going to use https://viem.sh/docs/actions/public/verifyMessage.html   
        const publicClient = createPublicClient(
          {
            transport: http(
              `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`
            )
          }
        );
        const isValid = await publicClient.verifyMessage({
          message,
          address: address as `0x${string}`,
          signature: signature as `0x${string}`
        });
        // end o view verifyMessage      

        if (isValid) {
          return {
            id: `${chainId}:${address}`,
          };
        }

        return null;
      } catch (e) {
        return null;
      }
    },
  }),
];

const handler = NextAuth({
  // https://next-auth.js.org/configuration/providers/oauth
  secret: nextAuthSecret,
  providers,
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    session({ session, token }) {
      if (!token.sub) {
        return session;
      }

      const [, chainId, address] = token.sub.split(':');
      if (chainId && address) {
        session.address = address;
        session.chainId = parseInt(chainId, 10);
      }

      return session;
    },
  },
});

export { handler as GET, handler as POST };
</file>

<file path="nextjs/next-siwe-next-auth/app/config/index.tsx">
import {
  type SIWESession,
  type SIWEVerifyMessageArgs,
  type SIWECreateMessageArgs,
  createSIWEConfig,
  formatMessage,
} from '@reown/appkit-siwe'
import { WagmiAdapter, authConnector } from '@reown/appkit-adapter-wagmi'
import { getCsrfToken, getSession, signIn, signOut } from 'next-auth/react';

import { cookieStorage, createStorage } from 'wagmi';
import { arbitrum, mainnet, sepolia, optimism, AppKitNetwork } from '@reown/appkit/networks'
import { getAddress } from 'viem';

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;

if (!projectId) throw new Error('Project ID is not defined');

export const metadata = {
  name: 'Appkit SIWE Example',
  description: 'Appkit Siwe Example - Next.js',
  url: 'https://reown.com', // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// Create wagmiConfig
export const chains: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, optimism, arbitrum, sepolia];

// 4. Create Wagmi Adapter
export const wagmiAdapter = new WagmiAdapter({
  networks: chains,
  projectId,
  ssr: true
});

// Normalize the address (checksum)
const normalizeAddress = (address: string): string => {
  try {
    const splitAddress = address.split(':');
    const extractedAddress = splitAddress[splitAddress.length - 1];
    const checksumAddress = getAddress(extractedAddress);
    splitAddress[splitAddress.length - 1] = checksumAddress;
    const normalizedAddress = splitAddress.join(':');

    return normalizedAddress;
  } catch (error) {
    return address;
  }
}

export const siweConfig = createSIWEConfig({
  getMessageParams: async () => ({
    domain: typeof window !== 'undefined' ? window.location.host : '',
    uri: typeof window !== 'undefined' ? window.location.origin : '',
    chains: chains.map((chain: AppKitNetwork) => parseInt(chain.id.toString())),
    statement: 'Please sign with your account',
  }),
  createMessage: ({ address, ...args }: SIWECreateMessageArgs) =>
    formatMessage(args, normalizeAddress(address)),
  getNonce: async () => {
    const nonce = await getCsrfToken();
    if (!nonce) {
      throw new Error('Failed to get nonce!');
    }

    return nonce;
  },
  getSession: async () => {
    const session = await getSession();
    if (!session) {
      return null;
    }
    
    // Validate address and chainId types
    if (typeof session.address !== "string" || typeof session.chainId !== "number") {
      return null;
    }

    return { address: session.address, chainId: session.chainId } satisfies SIWESession;
  },
  verifyMessage: async ({ message, signature }: SIWEVerifyMessageArgs) => {
    try {
      const success = await signIn('credentials', {
        message,
        redirect: false,
        signature,
        callbackUrl: '/protected',
      });

      return Boolean(success?.ok);
    } catch (error) {
      return false;
    }
  },
  signOut: async () => {
    try {
      await signOut({
        redirect: false,
      });

      return true;
    } catch (error) {
      return false;
    }
  },
});
</file>

<file path="nextjs/next-siwe-next-auth/app/context/index.tsx">
'use client';

import React, { ReactNode } from 'react';
import { createAppKit } from '@reown/appkit/react'
import { wagmiAdapter, projectId, siweConfig, metadata, chains } from '../config';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { State, WagmiProvider } from 'wagmi';

// Setup queryClient
const queryClient = new QueryClient();

if (!projectId) throw new Error('Project ID is not defined');

// Create modal
createAppKit({ 
  adapters: [wagmiAdapter], 
  networks: chains, 
  projectId, 
  siweConfig, 
  metadata,
  features: {
    email: true, // default to true
    socials: ['google', 'x', 'github', 'discord', 'apple', 'facebook', 'farcaster'],
    emailShowWallets: true, // default to true
  } 
});

export default function AppKitProvider({
  children,
  initialState,
}: {
  children: ReactNode;
  initialState?: State;
}) {
  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}
</file>

<file path="nextjs/next-siwe-next-auth/app/globals.css">
:root {
  --max-width: 1100px;
  --border-radius: 12px;
  --font-mono: ui-monospace, Menlo, Monaco, "Cascadia Mono", "Segoe UI Mono",
    "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro",
    "Fira Mono", "Droid Sans Mono", "Courier New", monospace;

  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;

  --primary-glow: conic-gradient(
    from 180deg at 50% 50%,
    #16abff33 0deg,
    #0885ff33 55deg,
    #54d6ff33 120deg,
    #0071ff33 160deg,
    transparent 360deg
  );
  --secondary-glow: radial-gradient(
    rgba(255, 255, 255, 1),
    rgba(255, 255, 255, 0)
  );

  --tile-start-rgb: 239, 245, 249;
  --tile-end-rgb: 228, 232, 233;
  --tile-border: conic-gradient(
    #00000080,
    #00000040,
    #00000030,
    #00000020,
    #00000010,
    #00000010,
    #00000080
  );

  --callout-rgb: 238, 240, 241;
  --callout-border-rgb: 172, 175, 176;
  --card-rgb: 180, 185, 188;
  --card-border-rgb: 131, 134, 135;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;

    --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
    --secondary-glow: linear-gradient(
      to bottom right,
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0.3)
    );

    --tile-start-rgb: 2, 13, 46;
    --tile-end-rgb: 2, 5, 19;
    --tile-border: conic-gradient(
      #ffffff80,
      #ffffff40,
      #ffffff30,
      #ffffff20,
      #ffffff10,
      #ffffff10,
      #ffffff80
    );

    --callout-rgb: 20, 20, 20;
    --callout-border-rgb: 108, 108, 108;
    --card-rgb: 100, 100, 100;
    --card-border-rgb: 200, 200, 200;
  }
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}
</file>

<file path="nextjs/next-siwe-next-auth/app/layout.tsx">
import './globals.css';
import type { Metadata } from 'next';
import { headers } from 'next/headers';

import { cookieToInitialState } from 'wagmi';

import { wagmiAdapter } from './config';
import AppKitProvider from './context';

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig, headers().get('cookie'));
  return (
    <html lang='en'>
      <body>
        <AppKitProvider initialState={initialState}>
          {children}
        </AppKitProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-siwe-next-auth/app/page.module.css">
.main {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 6rem;
  min-height: 100vh;
}

.description {
  display: inherit;
  justify-content: inherit;
  align-items: inherit;
  font-size: 0.85rem;
  max-width: var(--max-width);
  width: 100%;
  z-index: 2;
  font-family: var(--font-mono);
}

.description a {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
}

.description p {
  position: relative;
  margin: 0;
  padding: 1rem;
  background-color: rgba(var(--callout-rgb), 0.5);
  border: 1px solid rgba(var(--callout-border-rgb), 0.3);
  border-radius: var(--border-radius);
}

.code {
  font-weight: 700;
  font-family: var(--font-mono);
}

.grid {
  display: grid;
  grid-template-columns: repeat(4, minmax(25%, auto));
  max-width: 100%;
  width: var(--max-width);
}

.card {
  padding: 1rem 1.2rem;
  border-radius: var(--border-radius);
  background: rgba(var(--card-rgb), 0);
  border: 1px solid rgba(var(--card-border-rgb), 0);
  transition: background 200ms, border 200ms;
}

.card span {
  display: inline-block;
  transition: transform 200ms;
}

.card h2 {
  font-weight: 600;
  margin-bottom: 0.7rem;
}

.card p {
  margin: 0;
  opacity: 0.6;
  font-size: 0.9rem;
  line-height: 1.5;
  max-width: 30ch;
  text-wrap: balance;
}

.center {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  padding: 4rem 0;
}

.center::before {
  background: var(--secondary-glow);
  border-radius: 50%;
  width: 480px;
  height: 360px;
  margin-left: -400px;
}

.center::after {
  background: var(--primary-glow);
  width: 240px;
  height: 180px;
  z-index: -1;
}

.center::before,
.center::after {
  content: "";
  left: 50%;
  position: absolute;
  filter: blur(45px);
  transform: translateZ(0);
}

.logo {
  position: relative;
}
/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  .card:hover {
    background: rgba(var(--card-rgb), 0.1);
    border: 1px solid rgba(var(--card-border-rgb), 0.15);
  }

  .card:hover span {
    transform: translateX(4px);
  }
}

@media (prefers-reduced-motion) {
  .card:hover span {
    transform: none;
  }
}

/* Mobile */
@media (max-width: 700px) {
  .content {
    padding: 4rem;
  }

  .grid {
    grid-template-columns: 1fr;
    margin-bottom: 120px;
    max-width: 320px;
    text-align: center;
  }

  .card {
    padding: 1rem 2.5rem;
  }

  .card h2 {
    margin-bottom: 0.5rem;
  }

  .center {
    padding: 8rem 0 6rem;
  }

  .center::before {
    transform: none;
    height: 300px;
  }

  .description {
    font-size: 0.8rem;
  }

  .description a {
    padding: 1rem;
  }

  .description p,
  .description div {
    display: flex;
    justify-content: center;
    position: fixed;
    width: 100%;
  }

  .description p {
    align-items: center;
    inset: 0 0 auto;
    padding: 2rem 1rem 1.4rem;
    border-radius: 0;
    border: none;
    border-bottom: 1px solid rgba(var(--callout-border-rgb), 0.25);
    background: linear-gradient(
      to bottom,
      rgba(var(--background-start-rgb), 1),
      rgba(var(--callout-rgb), 0.5)
    );
    background-clip: padding-box;
    backdrop-filter: blur(24px);
  }

  .description div {
    align-items: flex-end;
    pointer-events: none;
    inset: auto 0 0;
    padding: 2rem;
    height: 200px;
    background: linear-gradient(
      to bottom,
      transparent 0%,
      rgb(var(--background-end-rgb)) 40%
    );
    z-index: 1;
  }
}

/* Tablet and Smaller Desktop */
@media (min-width: 701px) and (max-width: 1120px) {
  .grid {
    grid-template-columns: repeat(2, 50%);
  }
}

@media (prefers-color-scheme: dark) {
  .vercelLogo {
    filter: invert(1);
  }

  .logo {
    filter: invert(1) drop-shadow(0 0 0.3rem #ffffff70);
  }
}

@keyframes rotate {
  from {
    transform: rotate(360deg);
  }
  to {
    transform: rotate(0deg);
  }
}
</file>

<file path="nextjs/next-siwe-next-auth/app/page.tsx">
import styles from "./page.module.css";

export default function Home() {
  return (
    <main className={styles.main}>
      <appkit-button />
    </main>
  );
}
</file>

<file path="nextjs/next-siwe-next-auth/.env.example">
NEXT_PUBLIC_PROJECT_ID=<your-project-id-from-cloud>
NEXTAUTH_SECRET=<a-random-string>
</file>

<file path="nextjs/next-siwe-next-auth/.eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path="nextjs/next-siwe-next-auth/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# vscode
.vscode/settings.json
</file>

<file path="nextjs/next-siwe-next-auth/next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
    webpack: (config) => {
      config.externals.push("pino-pretty", "lokijs", "encoding");
      return config;
    }
  };
  
  export default nextConfig;
</file>

<file path="nextjs/next-siwe-next-auth/README.md">
# Appkit SIWE Example for Next.js Router

A Minimal demo using React so developers can work on their integration with WalletConnect and SIWE using this repository as a template.

1. Install dependencies in the frontend: `pnpm install`

2. Create and complete the .env.local file with your Project Id from http://cloud.reown.com

```
NEXT_PUBLIC_PROJECT_ID=...
NEXTAUTH_SECRET=<any-random-text>
```

3. Run the frontend: `pnpm run dev`

4. Open in your browser 

## Server side

 It verifies user signatures using NextAuth, through the Sign-In with Ethereum (SIWE) protocol, ensuring the integrity and authenticity of the sign-in process. 

## Reference

- https://docs.reown.com/appkit/react/core/siwe
- https://docs.login.xyz/general-information/siwe-overview/eip-4361
- https://next-auth.js.org/
</file>

<file path="nextjs/next-siwe-next-auth/tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-siwx-multichain/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-siwx-multichain/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-siwx-multichain/src/app/layout.tsx">
import type { Metadata } from "next";

import "./globals.css";
import ContextProvider from "@/context";

export const metadata: Metadata = {
  title: "AppKit in Next.js + ethers",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-siwx-multichain/src/app/not-found.tsx">
export default function NotFound() {
  return <h1>404 - Page Not Found</h1>;
}
</file>

<file path="nextjs/next-siwx-multichain/src/app/page.tsx">
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from "next/image";

export default function Home() {
  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit Multichain SIWX - App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br />
          Go to{" "}
          <a
            href="https://cloud.reown.com"
            target="_blank"
            className="link-button"
            rel="Reown Cloud"
          >
            Reown Cloud
          </a>{" "}
          to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-siwx-multichain/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="nextjs/next-siwx-multichain/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {
  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-siwx-multichain/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useClientMounted } from "@/hooks/useClientMount";
export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();
    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>Embedded Wallet</h2>
            <pre>
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>
        <section>
            <h2>Wallet Info</h2>
            <pre>
                {JSON.stringify(walletInfo)}
            </pre>
        </section>
    </>
  )
}
</file>

<file path="nextjs/next-siwx-multichain/src/config/index.ts">
import {
  bitcoin,
  bitcoinTestnet,
  mainnet,
  sepolia,
} from "@reown/appkit/networks";
import type { AppKitNetwork } from "@reown/appkit/networks";
import { BitcoinAdapter } from "@reown/appkit-adapter-bitcoin";
import { WagmiAdapter } from "@reown/appkit-adapter-wagmi";

// Get projectId from https://cloud.reown.com
export const projectId =
  process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694"; // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error("Project ID is not defined");
}

export const bitcoinNetworks: [AppKitNetwork, ...AppKitNetwork[]] = [
  bitcoin,
  bitcoinTestnet,
];

export const evmNetworks: [AppKitNetwork, ...AppKitNetwork[]] = [
  mainnet,
  sepolia,
];

export const networks = [
  ...bitcoinNetworks,
  ...evmNetworks,
];

// Set up Bitcoin Adapter
export const bitcoinAdapter = new BitcoinAdapter({
  projectId,
});

// Set up Wagmi Adapter
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks: evmNetworks,
  ssr: true,
});
</file>

<file path="nextjs/next-siwx-multichain/src/context/index.tsx">
"use client";

import {
  bitcoinAdapter,
  bitcoinNetworks,
  evmNetworks,
  projectId,
  wagmiAdapter,
} from "@/config";
import { createAppKit } from "@reown/appkit/react";
import React, { useState, type ReactNode } from "react";
import type { AppKitNetwork } from "@reown/appkit/networks";
import { DefaultSIWX } from "@reown/appkit-siwx";
import { EIP155Verifier } from "@/verifiers/EIP155Verifier";
import { BIP122Verifier } from "@/verifiers/BIP20Verifier";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { WagmiProvider } from "wagmi";

if (!projectId) {
  throw new Error("Project ID is not defined");
}

// Set up metadata
const metadata = {
  name: "next-reown-appkit",
  description: "next-reown-appkit",
  url: "https://github.com/0xonerb/next-reown-appkit-ssr", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// Combine evm and bitcoin networks
const allNetworks: [AppKitNetwork, ...AppKitNetwork[]] = [
  ...evmNetworks,
  ...bitcoinNetworks,
];

// Create the modal
export const modal = createAppKit({
  adapters: [bitcoinAdapter, wagmiAdapter],
  projectId,
  networks: allNetworks,
  metadata,
  themeMode: "dark",
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false,
  },
  siwx: new DefaultSIWX({
    verifiers: [new EIP155Verifier(), new BIP122Verifier()],
  }),
});

function ContextProvider({ children }: { children: ReactNode }) {
  const [queryClient] = useState(() => new QueryClient());

  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}

export default ContextProvider;
</file>

<file path="nextjs/next-siwx-multichain/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-siwx-multichain/src/verifiers/BIP20Verifier.ts">
import { Verifier } from "bip322-js";
import { SIWXVerifier } from "./SIWXVerifier";
import { SIWXSession } from "@reown/appkit/react";

export class BIP122Verifier extends SIWXVerifier {
  public readonly chainNamespace = "bip122";

  public async verify(session: SIWXSession): Promise<boolean> {
    try {
      return Promise.resolve(
        Verifier.verifySignature(
          session.data.accountAddress,
          session.message,
          session.signature
        )
      );
    } catch {
      return false;
    }
  }
}
</file>

<file path="nextjs/next-siwx-multichain/src/verifiers/EIP155Verifier.ts">
import { verifyMessage } from "viem";

import { SIWXVerifier } from "./SIWXVerifier";
import { SIWXSession } from "@reown/appkit/react";

export class EIP155Verifier extends SIWXVerifier {
  public readonly chainNamespace = "eip155";

  public async verify(session: SIWXSession): Promise<boolean> {
    try {
      return await verifyMessage({
        message: session.message.toString(),
        signature: session.signature as `0x${string}`,
        address: session.data.accountAddress as `0x${string}`,
      });
    } catch {
      return false;
    }
  }
}
</file>

<file path="nextjs/next-siwx-multichain/src/verifiers/SIWXVerifier.ts">
import { SIWXSession } from "@reown/appkit";

export abstract class SIWXVerifier {
  public abstract readonly chainNamespace: "eip155" | "solana" | "bip122";

  public shouldVerify(session: SIWXSession): boolean {
    return session.data.chainId.startsWith(this.chainNamespace);
  }

  abstract verify(session: SIWXSession): Promise<boolean>;
}
</file>

<file path="nextjs/next-siwx-multichain/src/verifiers/SolanaVerifier.ts">
import bs58 from "bs58";
import nacl from "tweetnacl";

import { SIWXSession } from "@reown/appkit/react";
import { SIWXVerifier } from "./SIWXVerifier";

export class SolanaVerifier extends SIWXVerifier {
  public readonly chainNamespace = "solana";

  public async verify(session: SIWXSession): Promise<boolean> {
    try {
      const publicKey = bs58.decode(session.data.accountAddress);
      const signature = bs58.decode(session.signature);
      const message = new TextEncoder().encode(session.message.toString());

      const isValid = nacl.sign.detached.verify(message, signature, publicKey);

      return isValid;
    } catch {
      return false;
    }
  }
}
</file>

<file path="nextjs/next-siwx-multichain/.env.example">
NEXT_PUBLIC_PROJECT_ID=
</file>

<file path="nextjs/next-siwx-multichain/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-siwx-multichain/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

pnpm-lock.yaml
</file>

<file path="nextjs/next-siwx-multichain/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-siwx-multichain/README.md">
# Reown AppKit Example using ethers (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-siwx-multichain/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/app/layout.tsx">
import type { Metadata } from "next";

import "./globals.css";
import ContextProvider from "@/context";

export const metadata: Metadata = {
  title: "AppKit in Next.js + ethers",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/app/not-found.tsx">
export default function NotFound() {
  return <h1>404 - Page Not Found</h1>;
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/app/page.tsx">
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from "next/image";

export default function Home() {
  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit Multichain SIWX - App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br />
          Go to{" "}
          <a
            href="https://cloud.reown.com"
            target="_blank"
            className="link-button"
            rel="Reown Cloud"
          >
            Reown Cloud
          </a>{" "}
          to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {
  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useClientMounted } from "@/hooks/useClientMount";
export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();
    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>Embedded Wallet</h2>
            <pre>
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>
        <section>
            <h2>Wallet Info</h2>
            <pre>
                {JSON.stringify(walletInfo)}
            </pre>
        </section>
    </>
  )
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/config/index.ts">
import {
  bitcoin,
  bitcoinTestnet,
  mainnet,
  sepolia,
} from "@reown/appkit/networks";
import type { AppKitNetwork } from "@reown/appkit/networks";
import { BitcoinAdapter } from "@reown/appkit-adapter-bitcoin";
import { WagmiAdapter } from "@reown/appkit-adapter-wagmi";

// Get projectId from https://cloud.reown.com
export const projectId =
  process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694"; // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error("Project ID is not defined");
}

export const bitcoinNetworks: [AppKitNetwork, ...AppKitNetwork[]] = [
  bitcoin,
  bitcoinTestnet,
];

export const evmNetworks: [AppKitNetwork, ...AppKitNetwork[]] = [
  mainnet,
  sepolia,
];

export const networks = [
  ...bitcoinNetworks,
  ...evmNetworks,
];

// Set up Bitcoin Adapter
export const bitcoinAdapter = new BitcoinAdapter({
  projectId,
});

// Set up Wagmi Adapter
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks: evmNetworks,
  ssr: true,
});
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/config/siwx-storage.ts">
import type { SIWXSession } from '@reown/appkit'
import type { SIWXStorage } from '@reown/appkit-siwx'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient( process.env.SUPABASE_URL || "", process.env.SUPABASE_KEY || "" )

export class SupabaseStorage implements SIWXStorage {
  async add(session: SIWXSession): Promise<void> {
    await supabase.from('siwx_sessions').insert(session)
  }

  async set(sessions: SIWXSession[]): Promise<void> {
    await supabase.from('siwx_sessions').delete()
    await supabase.from('siwx_sessions').insert(sessions)
  }

  async get(chainId: string, address: string): Promise<SIWXSession[]> {
    const { data } = await supabase.from('siwx_sessions').select('*').eq('address', address)
    return data || []
  }

  async delete(chainId: string, address: string): Promise<void> {
    await supabase.from('siwx_sessions').delete().eq('address', address)
  }
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/context/index.tsx">
"use client";

import {
  bitcoinAdapter,
  bitcoinNetworks,
  evmNetworks,
  projectId,
  wagmiAdapter,
} from "@/config";
import { createAppKit } from "@reown/appkit/react";
import React, { useState, type ReactNode } from "react";
import type { AppKitNetwork } from "@reown/appkit/networks";
import { DefaultSIWX } from "@reown/appkit-siwx";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { WagmiProvider } from "wagmi";
import { SupabaseStorage } from "@/config/siwx-storage";

if (!projectId) {
  throw new Error("Project ID is not defined");
}

// Set up metadata
const metadata = {
  name: "next-reown-appkit",
  description: "next-reown-appkit",
  url: "https://github.com/0xonerb/next-reown-appkit-ssr", // origin must match your domain & subdomain
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// Combine evm and bitcoin networks
const allNetworks: [AppKitNetwork, ...AppKitNetwork[]] = [
  ...evmNetworks,
  ...bitcoinNetworks,
];

// Create the modal
export const modal = createAppKit({
  adapters: [bitcoinAdapter, wagmiAdapter],
  projectId,
  networks: allNetworks,
  metadata,
  themeMode: "dark",
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false,
  },
  siwx: new DefaultSIWX({
    storage: new SupabaseStorage(),
  }),
});

function ContextProvider({ children }: { children: ReactNode }) {
  const [queryClient] = useState(() => new QueryClient());

  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}

export default ContextProvider;
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/.env.example">
NEXT_PUBLIC_PROJECT_ID=
SUPABASE_KEY= 
SUPABASE_URL=
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

pnpm-lock.yaml
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/README.md">
# Reown AppKit Example using ethers (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-solana-app-router/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-solana-app-router/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-solana-app-router/src/app/layout.tsx">
import type { Metadata } from "next";

import './globals.css';
import ContextProvider from '@/context'

export const metadata: Metadata = {
  title: "AppKit in Next.js + Solana",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-solana-app-router/src/app/page.tsx">
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from 'next/image';

export default function Home() {

  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit Solana Next.js App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-solana-app-router/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="nextjs/next-solana-app-router/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {

  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-solana-app-router/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useClientMounted } from "@/hooks/useClientMount";

export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);


  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                Selected Network ID: {state.selectedNetworkId?.toString()}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="nextjs/next-solana-app-router/src/config/index.ts">
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'


// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [solana, solanaTestnet, solanaDevnet] as [AppKitNetwork, ...AppKitNetwork[]]

// Set up Solana Adapter
export const solanaWeb3JsAdapter = new SolanaAdapter()
</file>

<file path="nextjs/next-solana-app-router/src/context/index.tsx">
'use client'

import { solanaWeb3JsAdapter, projectId, networks } from '@/config'
import { createAppKit } from '@reown/appkit/react'
import React, { type ReactNode } from 'react'

// Set up metadata
const metadata = {
  name: 'next-reown-appkit',
  description: 'next-reown-appkit',
  url: 'https://github.com/0xonerb/next-reown-appkit-ssr', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
export const modal = createAppKit({
  adapters: [solanaWeb3JsAdapter],
  projectId,
  networks,
  metadata,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

function ContextProvider({ children }: { children: ReactNode }) {
  return (
    <>{children}</>
  )
}

export default ContextProvider
</file>

<file path="nextjs/next-solana-app-router/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-solana-app-router/.env.example">
NEXT_PUBLIC_PROJECT_ID=
</file>

<file path="nextjs/next-solana-app-router/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-solana-app-router/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="nextjs/next-solana-app-router/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-solana-app-router/README.md">
# Reown AppKit Example using Solana (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-solana-app-router/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="nextjs/next-wagmi-app-router/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="nextjs/next-wagmi-app-router/src/app/globals.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="nextjs/next-wagmi-app-router/src/app/layout.tsx">
import type { Metadata } from "next";


import { headers } from 'next/headers' // added
import './globals.css';
import ContextProvider from '@/context'

export const metadata: Metadata = {
  title: "AppKit in Next.js + wagmi",
  description: "AppKit example dApp",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const headersData = await headers();
  const cookies = headersData.get('cookie');

  return (
    <html lang="en">
      <body>
        <ContextProvider cookies={cookies}>{children}</ContextProvider>
      </body>
    </html>
  );
}
</file>

<file path="nextjs/next-wagmi-app-router/src/app/page.tsx">
// import { cookieStorage, createStorage, http } from '@wagmi/core'
import { ConnectButton } from "@/components/ConnectButton";
import { InfoList } from "@/components/InfoList";
import { ActionButtonList } from "@/components/ActionButtonList";
import Image from 'next/image';

export default function Home() {

  return (
    <div className={"pages"}>
      <Image src="/reown.svg" alt="Reown" width={150} height={150} priority />
      <h1>AppKit Wagmi Next.js App Router Example</h1>

      <ConnectButton />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  );
}
</file>

<file path="nextjs/next-wagmi-app-router/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="nextjs/next-wagmi-app-router/src/components/ConnectButton.tsx">
'use client'

export const ConnectButton = () => {
  return (
    <div >
        <appkit-button />
    </div>
  )
}
</file>

<file path="nextjs/next-wagmi-app-router/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useClientMounted } from "@/hooks/useClientMount";

export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();
    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="nextjs/next-wagmi-app-router/src/context/index.tsx">
'use client'

import { wagmiAdapter, projectId, networks } from '@/config'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { createAppKit } from '@reown/appkit/react'
import React, { type ReactNode } from 'react'
import { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'

// Set up queryClient
const queryClient = new QueryClient()

// Set up metadata
const metadata = {
  name: 'next-reown-appkit',
  description: 'next-reown-appkit',
  url: 'https://github.com/0xonerb/next-reown-appkit-ssr', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// Create the modal
export const modal = createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks,
  metadata,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

function ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {
  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)

  return (
    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}

export default ContextProvider
</file>

<file path="nextjs/next-wagmi-app-router/src/hooks/useClientMount.ts">
'use client'
import { useEffect, useState } from "react";

export function useClientMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []); // Runs only on mount

  return mounted;
}
</file>

<file path="nextjs/next-wagmi-app-router/.env.example">
NEXT_PUBLIC_PROJECT_ID=
</file>

<file path="nextjs/next-wagmi-app-router/.eslintrc.json">
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}
</file>

<file path="nextjs/next-wagmi-app-router/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

pnpm-lock.yaml
</file>

<file path="nextjs/next-wagmi-app-router/next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  webpack: config => {
    config.externals.push('pino-pretty', 'lokijs', 'encoding')
    return config
  }
};

export default nextConfig;
</file>

<file path="nextjs/next-wagmi-app-router/README.md">
# Reown AppKit Example using wagmi (next.js with App Router)

This is a Next.js project.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `NEXT_PUBLIC_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Next.js — Docs](https://nextjs.org/docs)
</file>

<file path="nextjs/next-wagmi-app-router/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="react/react-bitcoin/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-bitcoin/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-bitcoin/src/components/ActionButtonList.tsx">
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitProvider, useAppKitAccount } from '@reown/appkit/react'
import type { BitcoinConnector } from '@reown/appkit-adapter-bitcoin'
import { networks } from '../config'
import { createPSBT, getBalance } from '../utils/BitcoinUtil';

interface ActionButtonListProps {
  sendSignPSBT: (hash: string ) => void;
  sendSignMsg: (hash: string) => void;
  sendSendTx: (hash: string) => void;
  sendBalance: (balance: string) => void;
  sendPublicKey: (publicKey: string) => void;
}

export const ActionButtonList = ({ sendSignPSBT, sendSignMsg, sendSendTx, sendBalance, sendPublicKey }: ActionButtonListProps) => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork, caipNetwork } = useAppKitNetwork();
    const { allAccounts, isConnected, address } = useAppKitAccount();
    const { walletProvider } = useAppKitProvider<BitcoinConnector>('bip122')

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };

    // function to sing a msg 
    const handleSignMsg = async () => {
      if (!walletProvider || !address) throw Error('user is disconnected')

      // raise the modal to sign the message
      const signature = await walletProvider.signMessage({
        address,
        message: "Hello Reown AppKit!"
      });

      sendSignMsg(signature); 
    }

    // function to send a tx
    const handleSendTx = async () => {
      if (!walletProvider || !address) throw Error('user is disconnected')
        const recipientAddress = address;

      const signature = await walletProvider.sendTransfer({
        recipient: recipientAddress,
        amount: "1000"
      })

      sendSendTx(signature);
    }

    // function to sign a PSBT
    const handleSignPSBT = async () => {
      if (!walletProvider || !address || !caipNetwork) throw Error('user is disconnected');
      const amount = 10000;
      const recipientAddress = address;

      const params = await createPSBT(caipNetwork, amount, address, recipientAddress);
      
      params.broadcast = false // change to true to broadcast the tx

      const signature = await walletProvider.signPSBT(params)
      sendSignPSBT(signature.psbt);
    }

    const handleGetBalance = async () => {
      if (!walletProvider || !address || !caipNetwork) throw Error('user is disconnected');
        
      const balance = await getBalance(caipNetwork, address);
      sendBalance(balance.toString()  );
    }

    const handleGetPublicKey = async () => {
      if (!walletProvider || !address || !caipNetwork) throw Error('user is disconnected');
      
      const bip122Account = allAccounts?.find(a => a.address === address)
      let publicKey = bip122Account?.publicKey || ""

      sendPublicKey(publicKey)
    }

  return (
    <>
      {isConnected ? (
        <div >
            <button onClick={() => open()}>Open</button>
            <button onClick={handleDisconnect}>Disconnect</button>
            <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
            <button onClick={handleSignMsg}>Sign msg</button>
            <button onClick={handleSignPSBT}>Sign PSBT</button>
            <button onClick={handleSendTx}>Send tx</button>
            <button onClick={handleGetBalance}>Get Balance</button>
            <button onClick={handleGetPublicKey}>Get Public Key</button>
        </div>
      ) : null}
    </>
  )
}
</file>

<file path="react/react-bitcoin/src/components/InfoList.tsx">
import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'

interface InfoListProps {
    psbt: string;
    signedMsg: string;
    txHash: string;
    balance: string;
    publicKey: string;
}

export const InfoList = ({psbt, signedMsg, txHash, balance, publicKey}: InfoListProps) => {
    const { themeMode, themeVariables } = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, status} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return (
    < >
        {publicKey && (
        <section>
            <h2>Public Key</h2>
            <pre>
                {publicKey}<br />
            </pre>
        </section>
        )}
        {psbt && (
        <section>
            <h2>PSBT</h2>
            <pre>
                Hash: {psbt}<br />
            </pre>
        </section>
        )}
        {txHash && (
        <section>
            <h2>Sign Tx</h2>
            <pre>
                Hash: {txHash}<br />
            </pre>
        </section>
        )}
        {signedMsg && (
        <section>
            <h2>Sign MSG</h2>
            <pre>
                {signedMsg}<br />
            </pre>
        </section>
        )}
        {balance && (
        <section>
            <h2>Balance</h2>
            <pre>
                {balance}<br />
            </pre>
        </section>
        )}
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {themeMode}<br />
                ThemeVariables: { JSON.stringify(themeVariables, null, 2)}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-bitcoin/src/utils/BitcoinUtil.ts">
import type { CaipNetwork, CaipNetworkId } from '@reown/appkit'
import { bitcoinTestnet } from '@reown/appkit/networks'
import type { BitcoinConnector } from '@reown/appkit-adapter-bitcoin'
import { Psbt, networks as bitcoinNetworks, address as bitcoinAddress, payments as bitcoinPayments, type Network, initEccLib } from 'bitcoinjs-lib';
import * as bitcoinPSBTUtils from 'bitcoinjs-lib/src/psbt/psbtutils'
import ecc from '@bitcoinerlab/secp256k1'

initEccLib(ecc);

export type CreateSignPSBTParams = {
    senderAddress: string
    recipientAddress: string
    network: CaipNetwork
    amount: number
    utxos: UTXO[]
    feeRate: number
    memo?: string
  }

export type UTXO = {
    txid: string
    vout: number
    value: number
    status: {
        confirmed: boolean
        block_height: number
        block_hash: string
        block_time: number
    }
}
export const calculateChange = (utxos: UTXO[], amount: number, feeRate: number): number => {
    const inputSum = utxos.reduce((sum, utxo) => sum + utxo.value, 0)
    /**
     * 10 bytes: This is an estimated fixed overhead for the transaction.
     * 148 bytes: This is the average size of each input (UTXO).
     * 34 bytes: This is the size of each output.
     * The multiplication by 2 indicates that there are usually two outputs in a typical transaction (one for the recipient and one for change)
     */
    const estimatedSize = 10 + 148 * utxos.length + 34 * 2
    const fee = estimatedSize * feeRate
    const change = inputSum - amount - fee

    return change
}

export const getBitcoinNetwork = (networkId: CaipNetworkId): Network => {
    return isTestnet(networkId) ? bitcoinNetworks.testnet : bitcoinNetworks.bitcoin
}

export const isTestnet = (networkId: CaipNetworkId): boolean => {
    return networkId === bitcoinTestnet.caipNetworkId
}

export const getFeeRate = async () => {
    const defaultFeeRate = 2
    try {
      const response = await fetch('https://mempool.space/api/v1/fees/recommended')
      if (response.ok) {
        const data = await response.json()

        if (data?.fastestFee) {
          return parseInt(data.fastestFee, 10)
        }
      }
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error('Error fetching fee rate', e)
    }

    return defaultFeeRate
  }

  //
  // Get the utxos ... List of unspent transactions that the sender has
  //
  export  const getUTXOs = async (address: string, isTestnet: boolean = false): Promise<UTXO[]> => {
        const response = await fetch(
            `https://mempool.space${isTestnet ? '/testnet' : ''}/api/address/${address}/utxo`
        )
        return await response.json();
  }

  //
  // Get the payment by address ... The type of address that the sender has
  //
  export const getPaymentByAddress = (
    address: string,
    network: bitcoinNetworks.Network
  ): bitcoinPayments.Payment => {
    const output = bitcoinAddress.toOutputScript(address, network)

    if (bitcoinPSBTUtils.isP2MS(output)) {
      return bitcoinPayments.p2ms({ output, network })
    } else if (bitcoinPSBTUtils.isP2PK(output)) {
      return bitcoinPayments.p2pk({ output, network })
    } else if (bitcoinPSBTUtils.isP2PKH(output)) {
      return bitcoinPayments.p2pkh({ output, network })
    } else if (bitcoinPSBTUtils.isP2WPKH(output)) {
      return bitcoinPayments.p2wpkh({ output, network })
    } else if (bitcoinPSBTUtils.isP2WSHScript(output)) {
      return bitcoinPayments.p2wsh({ output, network })
    } else if (bitcoinPSBTUtils.isP2SHScript(output)) {
      return bitcoinPayments.p2sh({ output, network })
    } else if (bitcoinPSBTUtils.isP2TR(output)) {
      return bitcoinPayments.p2tr({ output, network })
    }

    throw new Error('Unsupported payment type')
  }

export const getBalance = async (caipNetwork: CaipNetwork, address: string): Promise<number> => {
    // get the utxos ... this is the list of unspent transactions that the sender has
    const utxos = await getUTXOs(address, isTestnet(caipNetwork.caipNetworkId))
    // return the sum of the utxos ... The balance of the sender
    return utxos.reduce((sum, utxo) => sum + utxo.value, 0)
}

//
// Create a psbt ... The PSBT that will be signed by the sender in the wallet
//
export const createPSBT = async (caipNetwork: CaipNetwork, amount: number, address: string, recipientAddress: string): Promise<BitcoinConnector.SignPSBTParams> => {
    // get the bitcoin network from our caipNetwork
    const network = getBitcoinNetwork(caipNetwork.caipNetworkId)
    // get the payment by address ... this is the type of address that the sender has
    const payment = getPaymentByAddress(address, network)
    // get the utxos ... this is the list of unspent transactions that the sender has
    const utxos = await getUTXOs(address, isTestnet(caipNetwork.caipNetworkId))
    // get the fee rate ... this is the fee per byte
    const feeRate = await getFeeRate()
    // calculate the change ... this is the amount of satoshis that will be sent back to the sender
    const change = calculateChange(utxos, amount, feeRate)
    // the memo is the message that will be embedded in the transaction
    const memo = "Hello Reown AppKit!";

    const psbt = new Psbt({network: network});

    // check if the payment output is valid
    if (!payment.output) throw new Error('Invalid payment output');
    // check if the change is greater than 0 ... this means the sender has enough funds
    //if (change < 0) throw new Error('Insufficient funds');
    
    if (change > 0) {
      psbt.addOutput({
        address: address,
        value: change //BigInt(change)
      })
    }

    // add the inputs to the psbt
    for (const utxo of utxos) {
      psbt.addInput({
        hash: utxo.txid,
        index: utxo.vout,
        witnessUtxo: {
          script: payment.output,
          value: utxo.value
        }
      })
    }

    // add the output to the psbt ... this is the recipient address and the amount of satoshis that will be sent to the recipient
    psbt.addOutput({
      address: recipientAddress,
      value: amount
    })

    if (memo) {
        const data = Buffer.from(memo, 'utf8')
        const embed = bitcoinPayments.embed({ data: [data] })

        if (!embed.output) throw new Error('Invalid embed output');

        psbt.addOutput({
            script: embed.output,
            value: 0
        })
    }

    return {
        psbt: psbt.toBase64(),
        signInputs: [],
        broadcast: false
    }
}
</file>

<file path="react/react-bitcoin/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-bitcoin/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'
import { useState } from 'react'
import { networks, projectId, metadata, bitcoinAdapter } from './config'
import { ActionButtonList } from './components/ActionButtonList'
import { InfoList } from './components/InfoList'

import "./App.css"

// Create a AppKit instance
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  metadata,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false,
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export function App() {
  const [psbt, setPSBT] = useState<string>("");
  const [signedMsg, setSignedMsg] = useState<string>("");
  const [txHash, setTxHash] = useState<string>("");
  const [balance, setBalance] = useState<string>("");
  const [publicKey, setPublicKey] = useState<string>("");

  const receivePSBT = (hash: string) => {
    setPSBT(hash);
  };

  const receiveSignedMsg = (signedMsg: string) => {
    setSignedMsg(signedMsg); // Update the state with the transaction hash
  };

  const receiveTxHash= (hash: string) => {
    setTxHash(hash)
  }

  const receiveBalance= (amount: string) => {
    setBalance(amount)
  }

  const receivePublicKey = (publicKey: string) => {
    setPublicKey(publicKey)
  }

  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit bitcoin React dApp Example</h1>
          <appkit-button />
          <ActionButtonList sendSignPSBT={receivePSBT} sendSignMsg={receiveSignedMsg} sendSendTx={receiveTxHash} sendBalance={receiveBalance} sendPublicKey={receivePublicKey} />
          <div className="advice">
            <p>
              This projectId only works on localhost. <br/>
              Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
            </p>
          </div>
          <InfoList psbt={psbt} signedMsg={signedMsg} txHash={txHash} balance={balance} publicKey={publicKey} />
    </div>
  )
}

export default App
</file>

<file path="react/react-bitcoin/src/main.tsx">
import { Buffer } from 'buffer'
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

// Make Buffer available globally
window.Buffer = Buffer

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-bitcoin/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-bitcoin/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-bitcoin/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local
*.tsbuildinfo

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

.env

pnpm-lock.yaml
</file>

<file path="react/react-bitcoin/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-bitcoin/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-bitcoin/README.md">
# Reown AppKit Example using ethers (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-bitcoin/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-bitcoin/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-bitcoin/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-core/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-core/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-core/src/config/index.tsx">
import { mainnet, arbitrum, sepolia } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://reown.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [mainnet, arbitrum, sepolia] as [AppKitNetwork, ...AppKitNetwork[]]
</file>

<file path="react/react-core/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-core/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ActionButtonList } from './components/ActionButtonList'
import { InfoList } from './components/InfoList'
import { projectId, metadata, networks } from './config'

import "./App.css"

const queryClient = new QueryClient()

const generalConfig = {
  projectId,
  networks,
  metadata,
  themeMode: 'light' as const,
  themeVariables: {
    '--w3m-accent': '#000000',
  }
}

// Create modal
createAppKit({
  ...generalConfig,
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false
  }
})

export function App() {
  


  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit Core React dApp Example</h1>
        <QueryClientProvider client={queryClient}>
            <appkit-button />
            <ActionButtonList />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
            <InfoList />
        </QueryClientProvider>
    </div>
  )
}

export default App
</file>

<file path="react/react-core/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-core/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-core/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-core/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-core/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-core/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-core/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-core/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-core/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-core/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-core-universal-provider/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-core-universal-provider/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-core-universal-provider/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-core-universal-provider/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-core-universal-provider/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-core-universal-provider/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-core-universal-provider/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-core-universal-provider/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-core-universal-provider/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-core-universal-provider/README.md">
# Reown AppKit Example using wagmi (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-core-universal-provider/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-core-universal-provider/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-core-universal-provider/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-core-universal-provider/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="react/react-ethers/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-ethers/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-ethers/src/components/ActionButtonList.tsx">
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount, useAppKitProvider, useAppKitNetworkCore, type Provider  } from '@reown/appkit/react'
import { BrowserProvider, JsonRpcSigner,parseUnits, formatEther } from 'ethers'
import { networks } from '../config'

// test transaction
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",  // vitalik address
  value: parseUnits('0.0001', 'gwei')
}

interface ActionButtonListProps {
  sendHash: (hash: string ) => void;
  sendSignMsg: (hash: string) => void;
  sendBalance: (balance: string) => void;
}

export const ActionButtonList =  ({ sendHash, sendSignMsg, sendBalance }: ActionButtonListProps) => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { chainId } = useAppKitNetworkCore();
    const { switchNetwork } = useAppKitNetwork();
    const { isConnected,address } = useAppKitAccount();
    const { walletProvider } = useAppKitProvider<Provider>('eip155')

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };

    // function to send a tx
    const handleSendTx = async () => {
      if (!walletProvider || !address) throw Error('user is disconnected');

      const provider = new BrowserProvider(walletProvider, chainId);
      const signer = new JsonRpcSigner(provider, address)
      
      const tx = await signer.sendTransaction(TEST_TX); 
      await tx.wait(); // This will wait for the transaction to be mined
    
      sendHash(tx.hash); 
    }

    // function to sing a msg 
    const handleSignMsg = async () => {
      if (!walletProvider || !address) throw Error('user is disconnected');

      const provider = new BrowserProvider(walletProvider, chainId);
      const signer = new JsonRpcSigner(provider, address);
      const sig = await signer?.signMessage('Hello Reown AppKit!');

      sendSignMsg(sig);
    }

    // function to get the balance
    const handleGetBalance = async () => {
      if (!walletProvider || !address) throw Error('user is disconnected')

      const provider = new BrowserProvider(walletProvider, chainId)
      const balance = await provider.getBalance(address);
      const eth = formatEther(balance);
      sendBalance(`${eth} ETH`);
    }
  return (
    <div >
      {isConnected ? (
        <div>
          <button onClick={() => open()}>Open</button>
          <button onClick={handleDisconnect}>Disconnect</button>
          <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
          <button onClick={handleSignMsg}>Sign msg</button>
          <button onClick={handleSendTx}>Send tx</button>
          <button onClick={handleGetBalance}>Get Balance</button>  
        </div>
      ) : null}
    </div>
  )
}
</file>

<file path="react/react-ethers/src/components/InfoList.tsx">
import { useEffect, useState } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo,
    useAppKitProvider, 
    useAppKitNetworkCore,
    type Provider 
     } from '@reown/appkit/react'
import { BrowserProvider } from 'ethers'

interface InfoListProps {
    hash: string;
    signedMsg: string;
    balance: string;
}

export const InfoList = ({ hash, signedMsg, balance }: InfoListProps) => {
    const [statusTx, setStatusTx] = useState('');

    const { themeMode, themeVariables } = useAppKitTheme();
    const state = useAppKitState();
    const { chainId } = useAppKitNetworkCore();
    const {address, caipAddress, isConnected, embeddedWalletInfo } = useAppKitAccount(); // AppKit hook to get the account information
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const { walletProvider } = useAppKitProvider<Provider>('eip155')

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

    
    useEffect(() => {
        const checkTransactionStatus = async () => {
            if (hash && walletProvider) {
                try {
                    const provider = new BrowserProvider(walletProvider, chainId)
                    const receipt = await provider.getTransactionReceipt(hash)
                    setStatusTx(receipt?.status === 1 ? 'Success' : receipt?.status === 0 ? 'Failed' : 'Pending')
                } catch (err) {
                    console.error('Error checking transaction status:', err)
                    setStatusTx('Error')
                }
            }
        }

        checkTransactionStatus()
    }, [hash, walletProvider])

  return (
    < >
        {balance && (
        <section>
            <h2>Balance: {balance}</h2>
        </section>
        )}
        {hash && (
        <section>
            <h2>Sign Tx</h2>
            <pre>
                Hash: {hash}<br />
                Status: {statusTx}<br />
            </pre>
        </section>
        )}
        {signedMsg && (
        <section>
            <h2>Sign msg</h2>
            <pre>
                signedMsg: {signedMsg}<br />
            </pre>
        </section>
        )}
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {themeMode}<br />
                ThemeVariables: { JSON.stringify(themeVariables, null, 2)}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-ethers/src/components/SmartContractActionButtonList.tsx">
//
// if you are not going to read or write smart contract, you can delete this file
//

import { useAppKitNetwork, useAppKitAccount, useAppKitProvider  } from '@reown/appkit/react'
import { Contract, BrowserProvider } from 'ethers'
import type { Provider } from '@reown/appkit/react'


const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]


export const SmartContractActionButtonList = () => {
    const { isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { chainId } = useAppKitNetwork()
	const { walletProvider } = useAppKitProvider<Provider>('eip155')

    const storageSC = "0xEe6D291CC60d7CeD6627fA4cd8506912245c8cA4" 


    const handleReadSmartContract = async () => {
      console.log("Read Sepolia Smart Contract")
	  const ethersProvider = new BrowserProvider(walletProvider);
      const signer = await ethersProvider.getSigner()
      const contract = new Contract(storageSC, storageABI, signer);
      const data = await contract.retrieve();
      console.log("data: ", data)
    }

    const handleWriteSmartContract = async () => {
        console.log("Write Sepolia Smart Contract")
        const ethersProvider = new BrowserProvider(walletProvider);
		const signer = await ethersProvider.getSigner()
		const contract = new Contract(storageSC, storageABI, signer);
		const data = await contract.store(1n);
		console.log("data: ", data)
    }


  return (
    isConnected && chainId === 11155111 && ( // Only show the buttons if the user is connected to Sepolia
    <div >
        <button onClick={handleReadSmartContract}>Read Sepolia Smart Contract</button>
        <button onClick={handleWriteSmartContract}>Write Sepolia Smart Contract</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-ethers/src/config/index.tsx">
import { mainnet, arbitrum, sepolia } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'
import { EthersAdapter } from '@reown/appkit-adapter-ethers'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Create a metadata object - optional
export const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://reown.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [mainnet, arbitrum, sepolia] as [AppKitNetwork, ...AppKitNetwork[]]

// Set up Solana Adapter
export const ethersAdapter = new EthersAdapter();
</file>

<file path="react/react-ethers/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-ethers/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'
import { networks, projectId, metadata, ethersAdapter } from './config'
import { ActionButtonList } from './components/ActionButtonList'
import { SmartContractActionButtonList } from './components/SmartContractActionButtonList'
import { InfoList } from './components/InfoList'
import { useState } from 'react'

import "./App.css"

// Create a AppKit instance
createAppKit({
  adapters: [ethersAdapter],
  networks,
  metadata,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export function App() {
  const [transactionHash, setTransactionHash] = useState('');
  const [signedMsg, setSignedMsg] = useState('');
  const [balance, setBalance] = useState('');


  const receiveHash = (hash: string) => {
    setTransactionHash(hash); // Update the state with the transaction hash
  };

  const receiveSignedMsg = (signedMsg: string) => {
    setSignedMsg(signedMsg); // Update the state with the transaction hash
  };

  const receivebalance = (balance: string) => {
    setBalance(balance)
  }

  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit ethers React dApp Example</h1>
          <appkit-button />
          <ActionButtonList sendHash={receiveHash} sendSignMsg={receiveSignedMsg} sendBalance={receivebalance}/>
          <SmartContractActionButtonList />
          <div className="advice">
            <p>
              This projectId only works on localhost. <br/>
              Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
            </p>
          </div>
          <InfoList hash={transactionHash} signedMsg={signedMsg} balance={balance}/>
    </div>
  )
}

export default App
</file>

<file path="react/react-ethers/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-ethers/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-ethers/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-ethers/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

.env
</file>

<file path="react/react-ethers/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-ethers/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-ethers/README.md">
# Reown AppKit Example using ethers (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-ethers/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-ethers/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-ethers/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-ethers/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-ethers5/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-ethers5/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-ethers5/src/components/ActionButtonList.tsx">
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '../config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };
  return (
    <div >
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="react/react-ethers5/src/components/InfoList.tsx">
import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'

export const InfoList = () => {
    const { themeMode, themeVariables } = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return (
    < >
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {themeMode}<br />
                ThemeVariables: { JSON.stringify(themeVariables, null, 2)}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-ethers5/src/config/index.tsx">
import { mainnet, arbitrum } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'
import { Ethers5Adapter } from '@reown/appkit-adapter-ethers5'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Create a metadata object - optional
export const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://reown.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [mainnet, arbitrum] as [AppKitNetwork, ...AppKitNetwork[]]

// Set up Solana Adapter
export const ethers5Adapter = new Ethers5Adapter();
</file>

<file path="react/react-ethers5/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-ethers5/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'
import { projectId, metadata, networks, ethers5Adapter  } from './config'
import { ActionButtonList } from './components/ActionButtonList'
import { InfoList } from './components/InfoList'

import "./App.css"

// Create a AppKit instance
createAppKit({
  adapters: [ethers5Adapter],
  networks,
  metadata,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },  
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export function App() {

  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit ethers v5 React dApp Example</h1>
      <appkit-button />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
  )
}

export default App
</file>

<file path="react/react-ethers5/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-ethers5/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-ethers5/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-ethers5/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

.env
</file>

<file path="react/react-ethers5/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-ethers5/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-ethers5/README.md">
# Reown AppKit Example using ethers v5 (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-ethers5/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-ethers5/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-ethers5/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-ethers5/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-multichain/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-multichain/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-multichain/src/components/ActionButtonList.tsx">
import { useDisconnect, useAppKit, useAppKitNetwork  } from '@reown/appkit/react'
import { networks } from '../config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };
  return (
    <div >
        <button onClick={() => open({ view: 'Connect', namespace: 'eip155' })}>Open EVM</button>
        <button onClick={() => open({ view: 'Connect', namespace: 'solana' })}>Open Solana</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
    </div>
  )
}
</file>

<file path="react/react-multichain/src/components/InfoList.tsx">
import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'

export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount();
    const eip155AccountState = useAppKitAccount({ namespace: 'eip155' })
    const solanaAccountState = useAppKitAccount({ namespace: 'solana' })
    //  const bip122AccountState = useAppKitAccount({ namespace: 'bip122' }) // for bitcoin
    const events = useAppKitEvents()
    const { walletInfo } = useWalletInfo()

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return (
    < >
        <section>
            <h2>All Addresses</h2>
            <pre>
                Address EVM : {eip155AccountState.address}<br />
                Addresss Solana: {solanaAccountState.address}<br />
            </pre>
        </section>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {JSON.stringify(walletInfo)}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-multichain/src/config/index.tsx">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum, solana, solanaDevnet, solanaTestnet, } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'


// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://reown.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [mainnet, arbitrum, solana, solanaDevnet, solanaTestnet] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

// Set up Solana Adapter
export const solanaWeb3JsAdapter = new SolanaAdapter()

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="react/react-multichain/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-multichain/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ActionButtonList } from './components/ActionButtonList'
import { InfoList } from './components/InfoList'
import { projectId, metadata, networks, wagmiAdapter , solanaWeb3JsAdapter} from './config'

import "./App.css"

const queryClient = new QueryClient()

const generalConfig = {
  projectId,
  metadata,
  networks,
  themeMode: 'light' as const,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
}

// Create modal
createAppKit({
  adapters: [wagmiAdapter, solanaWeb3JsAdapter],
  ...generalConfig,
})

export function App() {

  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit Wagmi+solana React dApp Example</h1>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
        <QueryClientProvider client={queryClient}>
            <appkit-button />
            <ActionButtonList />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
            <InfoList />
        </QueryClientProvider>
      </WagmiProvider>
    </div>
  )
}

export default App
</file>

<file path="react/react-multichain/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-multichain/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-multichain/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-multichain/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-multichain/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-multichain/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-multichain/README.md">
# Reown AppKit Example using wagmi and solana (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-multichain/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-multichain/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-multichain/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-multichain/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-siwe-server-example/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="react/react-siwe-server-example/server/server.js">
import cors from 'cors';
import express from 'express';
import Session from 'express-session';
import { generateNonce } from 'siwe';
import {
  /* verifySignature, */
  getAddressFromMessage,
  getChainIdFromMessage,
} from '@reown/appkit-siwe'
import { createPublicClient, http } from 'viem'


// get env variables
import dotenv from 'dotenv';
dotenv.config();
// get Project ID
const projectId = process.env.PROJECT_ID;

const app = express();

// configure cors and sessions
app.use(cors({
  origin: 'http://localhost:5174', // frontend URL
  credentials: true,
}))
app.use(express.json())
app.use(Session({
  name: 'siwe-quickstart',
  secret: "siwe-quickstart-secret",
  resave: true,
  saveUninitialized: true,
  cookie: { secure: false, sameSite: true }
}));

// generate a nonce
app.get('/nonce', function (_, res) {
    res.setHeader('Content-Type', 'text/plain');
    console.log("/nonce");
    res.send(generateNonce());
});

// verify the message
app.post('/verify', async (req, res) => {
    try {
      if (!req.body.message) {
        return res.status(400).json({ error: 'SiweMessage is undefined' });
      }
      const message = req.body.message;

      const address = getAddressFromMessage(message);
      let chainId = getChainIdFromMessage(message);
      

// for the moment, the verifySignature is not working with social logins and emails  with non deployed smart accounts    
/*       const isValid = await verifySignature({
        address,
        message,
        signature: req.body.signature,
        chainId,
        projectId,
      }); */
 // we are going to use https://viem.sh/docs/actions/public/verifyMessage.html   
      const publicClient = createPublicClient(
        {
          transport: http(
            `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`
          )
        }
      );
      const isValid = await publicClient.verifyMessage({
        message,
        address,
        signature: req.body.signature
      });
// end o view verifyMessage      

      if (!isValid) {
        // throw an error if the signature is invalid
        throw new Error('Invalid signature');
      }
      if (chainId.includes(":")) {
        chainId = chainId.split(":")[1];
      }
      // Convert chainId to a number
      chainId = Number(chainId);

      if (isNaN(chainId)) {
          throw new Error("Invalid chainId");
      }
      
      // save the session with the address and chainId (SIWESession)
      req.session.siwe = { address, chainId };
      req.session.save(() => res.status(200).send(true));
    } catch (e) {
      // clean the session
      req.session.siwe = null;
      req.session.nonce = null;
      req.session.save(() => res.status(500).json({ message: e.message }));
    }
  });

  // get the session
  app.get('/session', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    console.log("/session", req.session.siwe);

    res.send(req.session.siwe);
  });

  // signout and clean the session
  app.get('/signout', (req, res) => {
    req.session.siwe = null;
    req.session.nonce = null;
    console.log("/singout");
    req.session.save(() => res.send({}));
  });

// start the server
const listener = app.listen(8080, () =>
	console.log('Listening on port ' + listener.address().port),
);
</file>

<file path="react/react-siwe-server-example/src/utils/siweUtils.ts">
import { AppKitNetwork } from '@reown/appkit/networks'
import {
    type SIWESession,
    type SIWEVerifyMessageArgs,
    type SIWECreateMessageArgs,
    createSIWEConfig,
    formatMessage,
  } from '@reown/appkit-siwe'
import { getAddress } from 'viem';
  

const BASE_URL = 'http://localhost:8080';

// Normalize the address (checksum)
const normalizeAddress = (address: string): string => {
  try {
    const splitAddress = address.split(':');
    const extractedAddress = splitAddress[splitAddress.length - 1];
    const checksumAddress = getAddress(extractedAddress);
    splitAddress[splitAddress.length - 1] = checksumAddress;
    const normalizedAddress = splitAddress.join(':');

    return normalizedAddress;
  } catch (error) {
    return address;
  }
}

// call the server to get a nonce
 const getNonce = async () : Promise<string> => {
    const res = await fetch(BASE_URL + "/nonce", {
        method: "GET",
        credentials: 'include',
      });
    if (!res.ok) {
        throw new Error('Network response was not ok');
    }
    const nonce = await res.text();
    console.log('Nonce:', nonce);
    return nonce;
}
  
// call the server to verify the message
 const verifyMessage = async ({ message, signature }: SIWEVerifyMessageArgs) => {
    try {
        const response = await fetch(BASE_URL + "/verify", {
            method: "POST",
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            },
            mode: 'cors',
            body: JSON.stringify({ message, signature }),
            credentials: 'include'
        });

        if (!response.ok) {
            return false;
        }
        
        const result = await response.json();
        return result === true;
      } catch (error) {
        return false;
      }
}

// call the server to get the session
 const getSession = async () => {
   const res = await fetch(BASE_URL+ "/session", {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
    credentials: 'include',
  });
  if (!res.ok) {
      throw new Error('Network response was not ok');
  }
  
  const data = await res.json();
  
  const isValidData = typeof data === 'object' && typeof data.address === 'string' && typeof data.chainId === 'number';

  return isValidData ? data as SIWESession : null;
}

// call the server to sign out
const signOut =  async (): Promise<boolean> => {
  const res = await fetch(BASE_URL + "/signout", {
   method: "GET",
   credentials: 'include',
 });
  if (!res.ok) {
      throw new Error('Network response was not ok');
  }
 
  const data = await res.json();
  return data == "{}";
} 

export const createSIWE = (chains: [AppKitNetwork, ...AppKitNetwork[]]) => {
    return createSIWEConfig({
      signOutOnAccountChange: true,
      signOutOnNetworkChange: true,
        getMessageParams: async () => ({
              domain: window.location.host,
              uri: window.location.origin, 
              chains: chains.map((chain: AppKitNetwork) => parseInt(chain.id.toString())),
              statement: 'Welcome to the dApp! Please sign this message',
            }),
        createMessage: ({ address, ...args }: SIWECreateMessageArgs) => {
          // normalize the address in case you are not using our library in the backend
          return formatMessage(args, normalizeAddress(address))
        },
        getNonce,
        getSession,
        verifyMessage,
        signOut,
    })
}
</file>

<file path="react/react-siwe-server-example/src/main.tsx">
import React from "react";
import ReactDOM from "react-dom/client";
import { createAppKit } from '@reown/appkit/react'
import { arbitrum, mainnet, AppKitNetwork } from '@reown/appkit/networks'
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { WagmiProvider } from "wagmi";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";


import { createSIWE  } from './utils/siweUtils'

import "./styles.css"

// 0. Setup queryClient
const queryClient = new QueryClient();

// 1. Get projectId at https://cloud.reown.com
const projectId = import.meta.env.VITE_PROJECT_ID;
if (!projectId) throw new Error("Project ID is undefined");

// 2. Create metadata
const metadata = {
  name: "AppKit SIWE",
  description: "AppKit SIWE Example",
  url: "https://reown.com",
  icons: ["https://avatars.githubusercontent.com/u/179229932"],
};

// 3. Set the networks
export const chains: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum];

// 4. Create Wagmi Adapter
const wagmiAdapter = new WagmiAdapter({
  networks: chains,
  projectId,
  ssr: true
});

// 5. Create a SIWE configuration object
const siweConfig = createSIWE(chains);


// 6. Create modal
createAppKit({ 
    adapters: [wagmiAdapter], 
    networks: chains, 
    projectId, 
    siweConfig, 
    metadata,
    features: {
      email: true, // default to true
      socials: ['google', 'x', 'github', 'discord', 'apple', 'facebook', 'farcaster'],
      emailShowWallets: true, // default to true
    } 
  });

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <WagmiProvider config={wagmiAdapter.wagmiConfig}>
      <QueryClientProvider client={queryClient}>
        <div className="centered-div">
          <appkit-button />
        </div>
      </QueryClientProvider>
    </WagmiProvider>
  </React.StrictMode>
);
</file>

<file path="react/react-siwe-server-example/src/styles.css">
/* styles.css */
.centered-div {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
</file>

<file path="react/react-siwe-server-example/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-siwe-server-example/.env.test">
VITE_PROJECT_ID=<your-project-id-from-cloud.reown.com>
</file>

<file path="react/react-siwe-server-example/.eslintrc.cjs">
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}
</file>

<file path="react/react-siwe-server-example/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*


node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment
.env.local
.env.development.local
.env
</file>

<file path="react/react-siwe-server-example/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown + SIWE (React)</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-siwe-server-example/README.md">
# Appkit SIWE Example for React 

A Minimal demo using React so developers can work on their integration with WalletConnect and SIWE using this repository as a template.

1. Install dependencies in the frontend: `pnpm install`

2. Create and complete the .env.local file with your Project Id from http://cloud.reown.com

```
VITE_PROJECT_ID=...
```

3. Run the frontend: `pnpm run dev`

4. Create a new console and install dependencies in the server

```
cd server 
pnpm install
```

5. Run the server:  `pnpm start`

6. Open in your browser http://localhost:5173/ 
(the frontend address must be the same that you have in the server cors config)

## Reference

- https://docs.reown.com/appkit/react/core/siwe
- https://docs.login.xyz/general-information/siwe-overview/eip-4361
</file>

<file path="react/react-siwe-server-example/tsconfig.json">
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}
</file>

<file path="react/react-siwe-server-example/tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "allowSyntheticDefaultImports": true
  },
  "include": [
    "vite.config.ts"
  ]
}
</file>

<file path="react/react-siwe-server-example/vite.config.js">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
// https://vitejs.dev/config/
export default defineConfig({
    plugins: [react()],
});
</file>

<file path="react/react-siwe-server-example/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="react/react-solana/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-solana/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-solana/src/components/ActionButtonList.tsx">
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount, useAppKitProvider   } from '@reown/appkit/react'
import { networks } from '../config'
import type { Provider } from '@reown/appkit-adapter-solana/react'
import { useAppKitConnection } from '@reown/appkit-adapter-solana/react'
import { PublicKey, LAMPORTS_PER_SOL, Transaction, SystemProgram } from "@solana/web3.js";

interface ActionButtonListProps {
  sendHash: (hash: string ) => void;
  sendSignMsg: (hash: string) => void;
  sendBalance: (balance: string) => void;
}

export const ActionButtonList = ({ sendHash, sendSignMsg, sendBalance }: ActionButtonListProps) => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();
    const { isConnected, address } = useAppKitAccount()
    const { connection } = useAppKitConnection();
    const { walletProvider } = useAppKitProvider<Provider>('solana')


    // function to send a tx
    const handleSendTx = async () => {
      if (!address || !connection) throw Error('user is disconnected');

      const wallet = new PublicKey(address);
      if (!wallet) throw Error('wallet provider is not available');

      const latestBlockhash = await connection.getLatestBlockhash();

      const transaction= new Transaction({
        feePayer: wallet,
        recentBlockhash: latestBlockhash?.blockhash,
      }).add(
        SystemProgram.transfer({
          fromPubkey: wallet,
          toPubkey: new PublicKey(address), // destination address
          lamports: 1000,
        })
      );

      const sig = await walletProvider.sendTransaction(transaction, connection)

      sendHash(sig);
    }

    // function to sing a msg 
    const handleSignMsg = async () => {
      if (!walletProvider || !address) throw Error('user is disconnected')
      
      const encodedMessage = new TextEncoder().encode("Hello Reown AppKit!");
      const sig = await walletProvider.signMessage(encodedMessage);

      const signatureHex = Buffer.from(sig).toString("hex");
      sendSignMsg(signatureHex);
    }

    // function to get the balance
    const handleGetBalance = async () => {
      if (!address || !connection) throw Error('user is disconnected');
      
      const wallet = new PublicKey(address);
      const balance = await connection?.getBalance(wallet);
      if (balance !== undefined) {
        sendBalance(`${balance / LAMPORTS_PER_SOL} SOL`);
      } else {
        sendBalance('- SOL');
      }
    }

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };
    return (
      <>
        {isConnected ? (
          <div >
            <div >
              <button onClick={() => open()}>Open</button>
              <button onClick={handleDisconnect}>Disconnect</button>
              <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
              <button onClick={handleSignMsg}>Sign msg</button>
              <button onClick={handleSendTx}>Send tx</button>
              <button onClick={handleGetBalance}>Get Balance</button>  
            </div>
          </div>
        ) : null}
      </>
    );
  }
</file>

<file path="react/react-solana/src/components/InfoList.tsx">
import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'

interface InfoListProps {
    hash: string | undefined;
    signedMsg: string;
    balance: string;
}

export const InfoList = ({ hash, signedMsg, balance }: InfoListProps) => {
    const { themeMode, themeVariables } = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return (
    < >
        {balance && (
        <section>
            <h2>Balance: {balance}</h2>
        </section>
        )}
        {hash && (
        <section>
            <h2>Sign Tx</h2>
            <pre>
                Hash: {hash}<br />
                Status: {/* receipt?.status.toString() */}<br />
            </pre>
        </section>
        )}
        {signedMsg && (
        <section>
            <h2>Sign msg</h2>
            <pre>
                signedMsg: {signedMsg}<br />
            </pre>
        </section>
        )}
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {themeMode}<br />
                ThemeVariables: { JSON.stringify(themeVariables, null, 2)}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-solana/src/config/index.tsx">
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'


// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Create a metadata object - optional
export const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://reown.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

export const networks: [AppKitNetwork, ...AppKitNetwork[]] = [solana, solanaTestnet, solanaDevnet]

// Set up Solana Adapter
export const solanaWeb3JsAdapter = new SolanaAdapter()
</file>

<file path="react/react-solana/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

h2 {
  padding-bottom: 10px;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-solana/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'
import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'
import { useState } from 'react'
import { metadata, projectId, solanaWeb3JsAdapter } from './config'
import { ActionButtonList } from './components/ActionButtonList'
import { InfoList } from './components/InfoList'

import "./App.css"

// Create modal
createAppKit({
  projectId,
  metadata,
  themeMode: 'light',
  networks: [solana, solanaTestnet, solanaDevnet],
  adapters: [solanaWeb3JsAdapter],
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  themeVariables: {
    '--w3m-accent': '#000000'
  }
})

export function App() {
  const [transactionHash, setTransactionHash] = useState<string | undefined>(undefined);
  const [signedMsg, setSignedMsg] = useState('');
  const [balance, setBalance] = useState('');

  const receiveHash = (hash: string) => {
    setTransactionHash(hash); // Update the state with the transaction hash
  };

  const receiveSignedMsg = (signedMsg: string) => {
    setSignedMsg(signedMsg); // Update the state with the transaction hash
  };

  const receivebalance = (balance: string) => {
    setBalance(balance)
  }

  return (
    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h2>Reown AppKit + Solana</h2>
      <appkit-button />
      <ActionButtonList sendHash={receiveHash} sendSignMsg={receiveSignedMsg} sendBalance={receivebalance}/>
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList hash={transactionHash} signedMsg={signedMsg} balance={balance}/>
    </div>
  )
}

export default App
</file>

<file path="react/react-solana/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-solana/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-solana/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-solana/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

.env
</file>

<file path="react/react-solana/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-solana/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-solana/README.md">
# Reown AppKit Example using Solana Adapter (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-solana/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-solana/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-solana/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-solana/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-wagmi/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-wagmi/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-wagmi/src/components/InfoList.tsx">
import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useWaitForTransactionReceipt } from 'wagmi'

interface InfoListProps {
    hash: `0x${string}` | undefined;
    signedMsg: string;
    balance: string;
}

export const InfoList = ({ hash, signedMsg, balance }: InfoListProps) => {
    const kitTheme = useAppKitTheme(); // AppKit hook to get the theme information and theme actions 
    const state = useAppKitState(); // AppKit hook to get the state
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount(); // AppKit hook to get the account information
    const events = useAppKitEvents() // AppKit hook to get the events
    const { walletInfo } = useWalletInfo() // AppKit hook to get the wallet info

    const { data: receipt } = useWaitForTransactionReceipt({ hash, confirmations: 2,  // Wait for at least 2 confirmation
        timeout: 300000,    // Timeout in milliseconds (5 minutes)
        pollingInterval: 1000,  })

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

    useEffect(() => {
        console.log("Embedded Wallet Info: ", embeddedWalletInfo);
    }, [embeddedWalletInfo]);

  return (
    <>
        {balance && (
        <section>
            <h2>Balance: {balance}</h2>
        </section>
        )}
        {hash && (
        <section>
            <h2>Sign Tx</h2>
            <pre>
                Hash: {hash}<br />
                Status: {receipt?.status.toString()}<br />
            </pre>
        </section>
        )}
        {signedMsg && (
        <section>
            <h2>Sign msg</h2>
            <pre>
                signedMsg: {signedMsg}<br />
            </pre>
        </section>
        )}
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {JSON.stringify(walletInfo)}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-wagmi/src/components/SmartContractActionButtonList.tsx">
//
// if you are not going to read or write smart contract, you can delete this file
//

import { useAppKitNetwork, useAppKitAccount  } from '@reown/appkit/react'
import { useReadContract, useWriteContract } from 'wagmi'
import { useEffect } from 'react'
const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

const storageSC = "0xEe6D291CC60d7CeD6627fA4cd8506912245c8cA4" 

export const SmartContractActionButtonList = () => {
    const { isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { chainId } = useAppKitNetwork()
    const { writeContract, isSuccess } = useWriteContract()
    const readContract = useReadContract({
      address: storageSC,
      abi: storageABI,
      functionName: 'retrieve',
      query: {
        enabled: false, // disable the query in onload
      }
    })

    useEffect(() => {
      if (isSuccess) {
        console.log("contract write success");
      }
    }, [isSuccess])

    const handleReadSmartContract = async () => {
      console.log("Read Sepolia Smart Contract");
      const { data } = await readContract.refetch();
      console.log("data: ", data)
    }

    const handleWriteSmartContract = () => {
        console.log("Write Sepolia Smart Contract")
        writeContract({
          address: storageSC,
          abi: storageABI,
          functionName: 'store',
          args: [123n],
        })
    }


  return (
    isConnected && chainId === 11155111 && ( // Only show the buttons if the user is connected to Sepolia
    <div >
        <button onClick={handleReadSmartContract}>Read Sepolia Smart Contract</button>
        <button onClick={handleWriteSmartContract}>Write Sepolia Smart Contract</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-wagmi/src/config/index.tsx">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum, sepolia } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://reown.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [mainnet, arbitrum, sepolia] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="react/react-wagmi/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-wagmi/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-wagmi/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-wagmi/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-wagmi/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-wagmi/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-wagmi/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-wagmi/README.md">
# Reown AppKit Example using wagmi (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-wagmi/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-wagmi/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-wagmi/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-wagmi/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-wagmi-smart-session/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-wagmi-smart-session/server/config/index.ts">
export const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]
</file>

<file path="react/react-wagmi-smart-session/server/util/prepareCalls.js">
class UserOpBuilderApiError extends Error {
  constructor(status, message) {
    super(message);
    this.status = status;
    this.name = 'UserOpBuilderApiError';
  }
}

export async function prepareCalls(args) {
    const projectId = process.env["SERVER_PROJECT_ID"];
    if (!projectId) {
      throw new Error("SERVER_PROJECT_ID is not set");
    }

    // i have to find the correct URL
    const url = `https://rpc.walletconnect.org/v1/wallet?projectId=${projectId}`;
  
    return jsonRpcRequest("wallet_prepareCalls", [args], url);
  }

  export async function sendPreparedCalls(args) {
    const projectId = process.env["SERVER_PROJECT_ID"];
    if (!projectId) {
      throw new Error("SERVER_PROJECT_ID is not set");
    }
    const url = `https://rpc.walletconnect.org/v1/wallet?projectId=${projectId}`;
  
    return jsonRpcRequest("wallet_sendPreparedCalls", [args], url);
  }
  
  async function jsonRpcRequest(method, params, url) {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(
        {
          jsonrpc: "2.0",
          id: "1",
          method,
          params,
        },
        bigIntReplacer,
      ),
    });

    if (!response.ok) {
      throw new UserOpBuilderApiError(response.status, await response.text());
    }

    const data = await response.json();

    if ("error" in data) {
      throw new UserOpBuilderApiError(500, JSON.stringify(data.error));
    }

    return data.result; // Return the result if successful
  }

  export async function handleFetchReceipt(userOpHash, options = {}) {
    const { timeout = 30000, interval = 3000 } = options;
    const endTime = Date.now() + timeout;
  
    while (Date.now() < endTime) {
      const response = await getCallsStatus(userOpHash);
      if (response.status === "CONFIRMED") {
        return response;
      }
  
      await new Promise((resolve) => setTimeout(resolve, interval));
    }
  
    throw new AppError(
      ErrorCodes.TIMEOUT_ERROR,
      'Timeout: Transaction is still processing'
    );
  }

  export async function getCallsStatus(args, options = {}) {
    const projectId = process.env["SERVER_PROJECT_ID"];
    if (!projectId) {
      throw new Error("SERVER_PROJECT_ID is not set");
    }
    const url = `https://rpc.walletconnect.org/v1/wallet?projectId=${projectId}`;
  
    const { timeout = 60000, interval = 2000 } = options; // Increased timeout to 60 seconds, reduced interval to 2 seconds
    const endTime = Date.now() + timeout;
    while (Date.now() < endTime) {
      try {
        console.log("args: ", args);
        const response = await jsonRpcRequest("wallet_getCallsStatus", [args], url);
        console.log("response: ", response);
        
        // Handle different status cases
        if (response.status === "CONFIRMED") {
          return response;
        } else if (response.status === "FAILED") {
          throw new Error(`Transaction failed: ${response.error || 'Unknown error'}`);
        } else if (response.status === "PENDING") {
          // Continue polling
        } else {
          console.warn(`Unexpected status: ${response.status}`);
        }
      } catch (error) {
        console.error("Error polling transaction status:", error);
        // Continue polling on non-fatal errors
        if (error.message.includes("SERVER_PROJECT_ID") || error.message.includes("Invalid response")) {
          throw error; // Re-throw critical errors
        }
      }
  
      // Wait for the specified interval before polling again
      await new Promise((resolve) => setTimeout(resolve, interval));
    }
    throw new Error(
      `Timeout: Transaction not confirmed after ${timeout/1000} seconds. Last status: ${response?.status || 'unknown'}`
    );
  }

  export function bigIntReplacer(_key, value) {
    if (typeof value === "bigint") {
      return `0x${value.toString(16)}`;
    }
  
    return value;
  }
</file>

<file path="react/react-wagmi-smart-session/server/.env.test">
SERVER_PROJECT_ID=
APPLICATION_PRIVATE_KEY=
</file>

<file path="react/react-wagmi-smart-session/server/server.js">
import cors from 'cors';
import express from 'express';
import { isAddress, encodeFunctionData, toHex, parseEther } from "viem";
//import { SmartSessionGrantPermissionsResponse } from "@reown/appkit-experimental/smart-session";
import { privateKeyToAccount , signMessage } from "viem/accounts";
import { prepareCalls, handleFetchReceipt, sendPreparedCalls } from "./util/prepareCalls.js";
import { storageABI } from "./config/index.ts";

// get env variables
import dotenv from 'dotenv';
dotenv.config();

const app = express();

// configure cors and sessions
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:5174'], // frontend URLs
  credentials: true,
}))
app.use(express.json())


// get the signer public key
app.get('/api/signer', (_, res) => {
  try {
    const APPLICATION_PRIVATE_KEY = process.env.APPLICATION_PRIVATE_KEY;
    if (!APPLICATION_PRIVATE_KEY) {
      return res.status(400).json({ message: "Missing required environment variables" });
    }

    const serverPrivateAccount = privateKeyToAccount(APPLICATION_PRIVATE_KEY);
    res.json({ publicKey: serverPrivateAccount.publicKey });
  } catch (err) {
    console.error("Error in /api/signer endpoint:", err);
    return res.status(500).json({ 
      message: "Error getting application signer",
      error: err.message 
    });
  }
});


app.post('/api/executeFunction', async (req, res) => {
  try {
    console.log("create-smart-session server");
    const APPLICATION_PRIVATE_KEY = process.env.APPLICATION_PRIVATE_KEY;
    if (!APPLICATION_PRIVATE_KEY) {
      return res.status(400).json({ message: "Missing required environment variables" });
    }

    const { permissions, data } = req.body;

    if (!permissions) {
      return res.status(400).json({ message: "No permissions provided" });
    }

    const userAddress = permissions.address;
    const context = permissions.context;

    if (!userAddress || !isAddress(userAddress)) {
      throw new Error("Invalid User address");
    }
    
    // make the prepare calls
    const response = await makePrepareCalls(userAddress, data.chainId, data.contractAddress, storageABI, data.functionName, context);
    
    console.log("response: ", response);
    // sign the hash
    const signature = await signatureCall(APPLICATION_PRIVATE_KEY, response.signatureRequest.hash);

    // send the prepared calls
    const sendPreparedCallsResponse = await sendPreparedCalls({
      context: response.context,
      preparedCalls: response.preparedCalls,
      signature: signature,
    });

    const userOpIdentifier = sendPreparedCallsResponse[0];

    // get the receipt
    const receipt = await handleFetchReceipt(userOpIdentifier);
    const txHash = receipt.receipts?.[0]?.transactionHash;

    const finalJSON = {
      message: `OK`,
      status: receipt.receipts?.[0]?.status === '0x1' ? 'success' : 'error',
      userOpIdentifier,
      txLink: txHash
    };
    return res.status(200).json({ finalJSON });

  } catch (e) {
    console.error("Error:", e);
    return res.status(500).json({ 
      message: "An error occurred", 
      error: e.message 
    });
  }
  
  });

const signatureCall = async (privateKey, messageHash) => {
  return await signMessage({
    privateKey: privateKey,
    message: { raw: messageHash },
  });
}


const makePrepareCalls = async (userAddress, chainId, contractAddress, abi, functionName, context) => {
  const prepareCallsArgs = {
    from: userAddress,
    chainId: toHex(chainId),
    calls: [
      {
        to: contractAddress,
        data: encodeFunctionData({
          abi: abi,
          functionName: functionName,
          args: [Math.floor(Math.random() * 1000) + 1]
        }),
        value: parseEther("0") // in case of a transfer parseEther("0.0001"),
      }
    ],
    capabilities: {
      permissions: { context: context }
    }
  }
  const prepareCallsResponse = await prepareCalls(prepareCallsArgs);

  if (prepareCallsResponse.length !== 1 && prepareCallsResponse[0]) {
    throw new Error("Invalid response type");
  }
  const response = prepareCallsResponse[0];
  if (!response || response.preparedCalls.type !== "user-operation-v07") {
    throw new Error("Invalid response type");
  }

  return response;
}


// start the server
const listener = app.listen(8080, () =>
	console.log('Listening on port ' + listener.address().port),
);
</file>

<file path="react/react-wagmi-smart-session/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-wagmi-smart-session/src/components/ActionButtonList.tsx">
import { useEffect } from 'react';
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount  } from '@reown/appkit/react'
import { parseGwei, type Address } from 'viem'
import { useEstimateGas, useSendTransaction, useSignMessage, useBalance } from 'wagmi'
import { networks } from '../config'

// test transaction
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address, // vitalik address
  value: parseGwei('0.0001')
}

interface ActionButtonListProps {
  sendHash: (hash: `0x${string}` ) => void;
  sendSignMsg: (hash: string) => void;
  sendBalance: (balance: string) => void;
}

export const ActionButtonList = ({ sendHash, sendSignMsg, sendBalance }: ActionButtonListProps) => {
    const { disconnect } = useDisconnect(); // AppKit hook to disconnect
    const { open } = useAppKit(); // AppKit hook to open the modal
    const { switchNetwork } = useAppKitNetwork(); // AppKithook to switch network
    const { address, isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected

    const { data: gas } = useEstimateGas({...TEST_TX}); // Wagmi hook to estimate gas
    const { data: hash, sendTransaction, } = useSendTransaction(); // Wagmi hook to send a transaction
    const { signMessageAsync } = useSignMessage() // Wagmi hook to sign a message
    const { refetch } = useBalance({
      address: address as Address
    }); // Wagmi hook to get the balance

    
    useEffect(() => {
        if (hash) {
          sendHash(hash);
        }
    }, [hash]);

    // function to send a tx
    const handleSendTx = () => {
      try {
        sendTransaction({
          ...TEST_TX,
          gas // Add the gas to the transaction
        });
      } catch (err) {
        console.log('Error sending transaction:', err);
      }
    }

    // function to sing a msg 
    const handleSignMsg = async () => {
      const msg = "Hello Reown AppKit!" // message to sign
      const sig = await signMessageAsync({ message: msg, account: address as Address }); 
      sendSignMsg(sig);
    }

    // function to get the balance
    const handleGetBalance = async () => {
      const balance = await refetch()
      sendBalance(balance?.data?.value.toString() + " " + balance?.data?.symbol.toString())
    }

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };


  return (
    isConnected && (
    <div >
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
        <button onClick={handleSignMsg}>Sign msg</button>
        <button onClick={handleSendTx}>Send tx</button>
        <button onClick={handleGetBalance}>Get Balance</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-wagmi-smart-session/src/components/InfoList.tsx">
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useWaitForTransactionReceipt } from 'wagmi'

interface InfoListProps {
    hash: `0x${string}` | undefined;
    signedMsg: string;
    balance: string;
}

export const InfoList = ({ hash, signedMsg, balance }: InfoListProps) => {
    const kitTheme = useAppKitTheme(); // AppKit hook to get the theme information and theme actions 
    const state = useAppKitState(); // AppKit hook to get the state
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount(); // AppKit hook to get the account information
    const { walletInfo } = useWalletInfo() // AppKit hook to get the wallet info

    const { data: receipt } = useWaitForTransactionReceipt({ hash, confirmations: 2,  // Wait for at least 2 confirmation
        timeout: 300000,    // Timeout in milliseconds (5 minutes)
        pollingInterval: 1000,  })


  return (
    <>
        {balance && (
        <section>
            <h2>Balance: {balance}</h2>
        </section>
        )}
        {hash && (
        <section>
            <h2>Sign Tx</h2>
            <pre>
                Hash: {hash}<br />
                Status: {receipt?.status.toString()}<br />
            </pre>
        </section>
        )}
        {signedMsg && (
        <section>
            <h2>Sign msg</h2>
            <pre>
                signedMsg: {signedMsg}<br />
            </pre>
        </section>
        )}
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {JSON.stringify(walletInfo)}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-wagmi-smart-session/src/components/SmartContractActionButtonList.tsx">
//
// if you are not going to read or write smart contract, you can delete this file
//

import { useAppKitNetwork, useAppKitAccount  } from '@reown/appkit/react'
import { useReadContract, useWriteContract } from 'wagmi'
import { useEffect } from 'react'
const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

const storageSC = "0x2D506af8f3499b1e49aced92B72bE8C22616ed95" 

export const SmartContractActionButtonList = () => {
    const { isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { chainId } = useAppKitNetwork()
    const { writeContract, isSuccess } = useWriteContract()
    const readContract = useReadContract({
      address: storageSC,
      abi: storageABI,
      functionName: 'retrieve',
      query: {
        enabled: false, // disable the query in onload
      }
    })

    useEffect(() => {
      if (isSuccess) {
        console.log("contract write success");
      }
    }, [isSuccess])

    const handleReadSmartContract = async () => {
      console.log("Read Sepolia Smart Contract");
      const { data } = await readContract.refetch();
      console.log("data: ", data)
    }

    const handleWriteSmartContract = () => {
        console.log("Write Sepolia Smart Contract")
        writeContract({
          address: storageSC,
          abi: storageABI,
          functionName: 'store',
          args: [123n],
        })
    }


  return (
    isConnected && chainId === 11155111 && ( // Only show the buttons if the user is connected to Sepolia
    <div >
        <button onClick={handleReadSmartContract}>Read Sepolia Smart Contract</button>
        <button onClick={handleWriteSmartContract}>Write Sepolia Smart Contract</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-wagmi-smart-session/src/components/SmartSessionActionButtonList.tsx">
//
// if you are not going to read or write smart contract, you can delete this file
//

import { useAppKitNetwork, useAppKitAccount, useDisconnect  } from '@reown/appkit/react'
import { useReadContract } from 'wagmi'
import { useState } from 'react'
import { grantPermissions, SmartSessionGrantPermissionsRequest, SmartSessionGrantPermissionsResponse } from '@reown/appkit-experimental/smart-session'
import { toHex } from 'viem'

import { storageABI, storageSC, apiURL, storeFunctionName } from '../config/configSmartSession'

export const SmartSessionActionButtonList = () => {

  const [permissions, setPermissions] = useState<SmartSessionGrantPermissionsResponse>({} as SmartSessionGrantPermissionsResponse);
  const [ECDSAPublicKey, setECDSAPublicKey] = useState<string>("");
    const { isConnected, address } = useAppKitAccount() 
    const { disconnect } = useDisconnect()
    const { chainId } = useAppKitNetwork()
    const readContract = useReadContract({
      address: storageSC,
      abi: storageABI,
      functionName: 'retrieve',
      query: {
        enabled: false, // disable the query in onload
      }
    })


    // 1. Read Smart Contract
    const handleReadSmartContract = async () => {
      console.log("Read Sepolia Smart Contract");
      const { data } = await readContract.refetch();
      console.log("readContract: ", data)
    }

    // 2. Grant Permissions
    const handleGrantPermissions = async () => {
      if (isConnected) {
        console.log("Call Smart Session Grant Permissions")
        // chainId <> undefined
        const response = await fetch(`${apiURL}/api/signer`);
        const { publicKey: dAppECDSAPublicKey } = await response.json();
        setECDSAPublicKey(dAppECDSAPublicKey);
        const dataForRequest = getDataForRequest(dAppECDSAPublicKey);
        const request = generateRequest(dataForRequest);

      
        // Grant permissions for smart session
        // This step requests permission from the user's wallet to allow the dApp to make contract calls on their behalf
        // Once approved, these permissions will be used to create a smart session on the backend
        const approvedPermissions = await grantPermissions(request);

        setPermissions(approvedPermissions);
      } else {
        console.log("Please connect your wallet to call Smart Session Grant Permissions")
      }
    }



     // 3. Write Smart Contract
    const handleWriteSmartContract = async () => {
      console.log("Write Sepolia Smart Contract");

      // Call the backend API to create a smart session using the approved permissions
      // The backend will store these permissions and use them to make contract calls on behalf of the user
      // This enables automated/scheduled transactions without requiring user interaction each time
      const responseSS = await fetch(`${apiURL}/api/executeFunction`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          permissions: permissions,
          data: getDataForRequest()
        }),
      });

      console.log("response Smart Session", responseSS);
  } 

    const getDataForRequest = (publickey = "") => {
      if (publickey === "") {
        publickey = ECDSAPublicKey;
      }
      return {
        dAppECDSAPublicKey: publickey as `0x${string}`,
        contractAddress: storageSC as `0x${string}`,
        abi: storageABI,
        functionName: storeFunctionName,
        expiry: Math.floor(Date.now() / 1000) + 24 * 60 * 60, // Default 24 hours 
        userAddress: address as `0x${string}`, // Default actual address
        chainId: Number(chainId), // Default actual chain
      };
    }

    type dataForRequestType = {
      chainId: number,
      expiry: number,
      dAppECDSAPublicKey: `0x${string}`,
      userAddress: `0x${string}`,
      contractAddress: `0x${string}`,
      abi: any[],
      functionName: string
    }

    const generateRequest = (dataForRequest: dataForRequestType) => {
      const request: SmartSessionGrantPermissionsRequest = {
        expiry: dataForRequest.expiry,
        chainId: toHex(dataForRequest.chainId),
        address: dataForRequest.userAddress as `0x${string}`,
        signer: {
          type: 'keys',
          data: {
            keys :[{
            type: 'secp256k1',
            publicKey: dataForRequest.dAppECDSAPublicKey
          }]
          }
        },
        permissions: [ {
          type: 'contract-call',
          data: {
            address: dataForRequest.contractAddress,
            abi: dataForRequest.abi,
            functions: [ {
              functionName: dataForRequest.functionName
            } ]
          }
        }],
        policies: []
      }
      return request;
    }


  return (
    chainId === 84532 && (
      <div>
        <div>
          <br/>
          <b>Steps to try Smart Sessions</b><br/>
          <button onClick={handleReadSmartContract}>1. Read Smart Contract</button>
          <button onClick={handleGrantPermissions}>2. Grant Permissions</button>
          <button onClick={() => disconnect()}>3. Disconnect</button>
          <button onClick={handleWriteSmartContract}>4. Write Smart Contract without signing</button>
          <button onClick={handleReadSmartContract}>5. Read Smart Contract</button>
        </div>
      </div>
    )
  )
}
</file>

<file path="react/react-wagmi-smart-session/src/config/configSmartSession.ts">
export const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

export const storageSC = "0x2D506af8f3499b1e49aced92B72bE8C22616ed95" 
export const apiURL = "http://localhost:8080"
export const storeFunctionName = "store"
</file>

<file path="react/react-wagmi-smart-session/src/config/index.tsx">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { baseSepolia } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'http://localhost:5173/', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [baseSepolia] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="react/react-wagmi-smart-session/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-wagmi-smart-session/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'
import { useState } from 'react'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ActionButtonList } from './components/ActionButtonList'
//import { SmartContractActionButtonList } from './components/SmartContractActionButtonList'
import { SmartSessionActionButtonList } from './components/SmartSessionActionButtonList'
import { InfoList } from './components/InfoList'
import { projectId, metadata, networks, wagmiAdapter } from './config'

import "./App.css"

const queryClient = new QueryClient()

const generalConfig = {
  projectId,
  networks,
  metadata,
  themeMode: 'light' as const,
  themeVariables: {
    '--w3m-accent': '#000000',
  }
}

// Create modal
createAppKit({
  adapters: [wagmiAdapter],
  defaultAccountTypes: { eip155: "smartAccount" },
  ...generalConfig,
  features: {
    email: true,
    socials: [],
    emailShowWallets: false,
    analytics: true,
    
  },
})

export function App() {
  const [transactionHash, setTransactionHash] = useState<`0x${string}` | undefined>(undefined);
  const [signedMsg, setSignedMsg] = useState('');
  const [balance, setBalance] = useState('');

  const receiveHash = (hash: `0x${string}`) => {
    setTransactionHash(hash); // Update the state with the transaction hash
  };

  const receiveSignedMsg = (signedMsg: string) => {
    setSignedMsg(signedMsg); // Update the state with the transaction hash
  };

  const receivebalance = (balance: string) => {
    setBalance(balance)
  }


  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit Wagmi React dApp Example</h1>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
        <QueryClientProvider client={queryClient}>
            <appkit-button />
            <ActionButtonList sendHash={receiveHash} sendSignMsg={receiveSignedMsg} sendBalance={receivebalance}/>
            <SmartSessionActionButtonList />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
            <InfoList hash={transactionHash} signedMsg={signedMsg} balance={balance}/>
        </QueryClientProvider>
      </WagmiProvider>
    </div>
  )
}

export default App
</file>

<file path="react/react-wagmi-smart-session/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-wagmi-smart-session/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-wagmi-smart-session/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-wagmi-smart-session/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-wagmi-smart-session/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-wagmi-smart-session/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-wagmi-smart-session/README.md">
# Reown Smart Session Example using wagmi with smart sessions(Vite + React)

## Usage

1. Clone the repository
2. Run `pnpm install` to install dependencies
3. Run `pnpm run dev` to start the development server

4. run `cd server`
5. run `pnpm install` to install dependencies
6. run `pnpm start` to start the server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-wagmi-smart-session/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-wagmi-smart-session/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-wagmi-smart-session/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-wagmi-smart-session/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
      },
    },
  },
})
</file>

<file path="vue/vue-bitcoin/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="vue/vue-bitcoin/src/assets/main.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="vue/vue-bitcoin/src/components/ActionButton.vue">
<template>
  <div>
    <button @click="openAppKit">Open</button>
    <button @click="handleDisconnect">Disconnect</button>
    <button @click="switchToNetwork">Switch</button>
  </div>
</template>

<script>
import { useDisconnect, useAppKit, useAppKitNetwork } from "@reown/appkit/vue";
import { networks } from "../config/index";

export default {
  name: "ActionButtonList",
  setup() {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const networkData = useAppKitNetwork();

    const openAppKit = () => open();
    const switchToNetwork = () => networkData.value.switchNetwork(networks[1]);
    const handleDisconnect = async () => {
        try {
          await disconnect();
        } catch (error) {
          console.error("Error during disconnect:", error);
        }
    };


    return {
      handleDisconnect,
      openAppKit,
      switchToNetwork,
    };
  },
};
</script>
</file>

<file path="vue/vue-bitcoin/src/components/InfoList.vue">
<template>
    <section>
      <h2>useAppKit</h2>
      <pre>
Address: {{ accountInfo.address }}
caip Address: {{ accountInfo.caipAddress }}
Connected: {{ accountInfo.isConnected }}
Status: {{ accountInfo.status }}
      </pre>
    </section>

    <section>
      <h2>Theme</h2>
      <pre>
Theme: {{ kitTheme.themeMode }}
      </pre>
    </section>

    <section>
      <h2>State</h2>
      <pre>
open: {{ state.open }}
selectedNetworkId: {{ state.selectedNetworkId }}
      </pre>
    </section>

    <section>
      <h2>WalletInfo</h2>
      <pre>
Name: {{ walletInfo?.name }}<br />
      </pre>
    </section>
</template>
  
<script >
import { onMounted } from "vue";
import {
  useAppKitState,
  useAppKitTheme,
  useAppKitEvents,
  useAppKitAccount,
  useWalletInfo,
} from "@reown/appkit/vue";

export default {
  name: "InfoList",
  setup(){
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const accountInfo = useAppKitAccount();
    const events = useAppKitEvents();
    const { walletInfo }  = useWalletInfo();

    onMounted(() => {
      console.log("Events: ", events);
    });

    return {
      kitTheme,
      state,
      accountInfo,
      walletInfo,
    };
  },
};
</script>
</file>

<file path="vue/vue-bitcoin/src/config/index.ts">
import { bitcoin, bitcoinTestnet, type AppKitNetwork } from '@reown/appkit/networks'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'


export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks: [AppKitNetwork, ...AppKitNetwork[]] = [bitcoin, bitcoinTestnet]

// Set up Bitcoin Adapter
export const bitcoinAdapter = new BitcoinAdapter({
  projectId
})
</file>

<file path="vue/vue-bitcoin/src/App.vue">
<template>
  <div class="pages">
      <img src="/reown.svg" alt="Reown" width="150" height="150" />
      <h1>AppKit Bitcoin vue Example</h1>

      <appkit-button />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
   </div>
</template>


<script lang="ts">
import {
  createAppKit,
} from '@reown/appkit/vue'
import {bitcoinAdapter , networks, projectId } from './config/index'

import ActionButtonList from "./components/ActionButton.vue"
import InfoList from "./components/InfoList.vue";

// Initialize AppKit
createAppKit({
  adapters: [bitcoinAdapter],
  networks,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false
  },
  metadata: {
    name: 'AppKit Vue Example',
    description: 'AppKit Vue Example',
    url: 'https://reown.com/appkit',
    icons: ['https://avatars.githubusercontent.com/u/179229932?s=200&v=4']
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export default {
  name: "App",
  components: {
    ActionButtonList,
    InfoList
  },
};
</script>
</file>

<file path="vue/vue-bitcoin/src/main.ts">
import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'

createApp(App)
  // @ts-ignore
  .mount('#app')
</file>

<file path="vue/vue-bitcoin/src/shims-vue.d.ts">
declare module '*.vue' {
    import { DefineComponent } from 'vue';
    const component: DefineComponent<{}, {}, any>;
    export default component;
  }
</file>

<file path="vue/vue-bitcoin/.env.example">
VITE_PROJECT_ID=your_project_id
</file>

<file path="vue/vue-bitcoin/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

dist

.env
.vite

pnpm-lock.yaml
</file>

<file path="vue/vue-bitcoin/env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="vue/vue-bitcoin/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AppKit Vue Solana Example App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="vue/vue-bitcoin/README.md">
# Reown AppKit Example using Solana (Vite + Vue)

This is a [Vite](https://vitejs.dev) project together with Vue.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
- [Vue - Docs](https://vuejs.org/guide/introduction)
</file>

<file path="vue/vue-bitcoin/tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="vue/vue-bitcoin/tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
</file>

<file path="vue/vue-bitcoin/tsconfig.node.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}
</file>

<file path="vue/vue-bitcoin/vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'


// https://vite.dev/config/
export default defineConfig({
  resolve: {
    alias: {
      buffer: 'buffer/'
    }
  },
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag:any) => ['appkit-button', 'appkit-network-button'].includes(tag),
        },
      },
    }),
  ]
})
</file>

<file path="vue/vue-core/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="vue/vue-core/src/assets/main.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="vue/vue-core/src/config/index.ts">
import { sepolia, mainnet, type AppKitNetwork } from '@reown/appkit/networks'


export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks: [AppKitNetwork, ...AppKitNetwork[]] = [sepolia, mainnet]
</file>

<file path="vue/vue-core/src/App.vue">
<template>
  <div class="pages">
      <img src="/reown.svg" alt="Reown" width="150" height="150" />
      <h1>AppKit Core vue Example</h1>

      <appkit-button />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
   </div>
</template>


<script lang="ts">
import {
  createAppKit,
} from '@reown/appkit/vue'
import {bitcoinAdapter , networks, projectId } from './config/index'

import ActionButtonList from "./components/ActionButton.vue"
import InfoList from "./components/InfoList.vue";

// Initialize AppKit
createAppKit({
  adapters: [],
  networks,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    socials: [],
    email: false
  },
  metadata: {
    name: 'AppKit Vue Example',
    description: 'AppKit Vue Example',
    url: 'https://reown.com/appkit',
    icons: ['https://avatars.githubusercontent.com/u/179229932?s=200&v=4']
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export default {
  name: "App",
  components: {
    ActionButtonList,
    InfoList
  },
};
</script>
</file>

<file path="vue/vue-core/src/main.ts">
import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'

createApp(App)
  // @ts-ignore
  .mount('#app')
</file>

<file path="vue/vue-core/src/shims-vue.d.ts">
declare module '*.vue' {
    import { DefineComponent } from 'vue';
    const component: DefineComponent<{}, {}, any>;
    export default component;
  }
</file>

<file path="vue/vue-core/.env.example">
VITE_PROJECT_ID=your_project_id
</file>

<file path="vue/vue-core/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

dist

.env
.vite

pnpm-lock.yaml
</file>

<file path="vue/vue-core/env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="vue/vue-core/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AppKit Vue Solana Example App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="vue/vue-core/README.md">
# Reown AppKit Example using Solana (Vite + Vue)

This is a [Vite](https://vitejs.dev) project together with Vue.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
- [Vue - Docs](https://vuejs.org/guide/introduction)
</file>

<file path="vue/vue-core/tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="vue/vue-core/tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
</file>

<file path="vue/vue-core/tsconfig.node.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}
</file>

<file path="vue/vue-core/vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'


// https://vite.dev/config/
export default defineConfig({
  resolve: {
    alias: {
      buffer: 'buffer/'
    }
  },
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag:any) => ['appkit-button', 'appkit-network-button'].includes(tag),
        },
      },
    }),
  ]
})
</file>

<file path="vue/vue-ethers/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="vue/vue-ethers/src/assets/main.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="vue/vue-ethers/src/components/ActionButton.vue">
<template>
  <div>
    <button @click="openAppKit">Open</button>
    <button @click="handleDisconnect">Disconnect</button>
    <button @click="switchToNetwork">Switch</button>
  </div>
</template>

<script>
import { useDisconnect, useAppKit, useAppKitNetwork } from "@reown/appkit/vue";
import { networks } from "../config/index";

export default {
  name: "ActionButtonList",
  setup() {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const networkData = useAppKitNetwork();

    const openAppKit = () => open();
    const switchToNetwork = () => networkData.value.switchNetwork(networks[1]);
    const handleDisconnect = async () => {
        try {
          await disconnect();
        } catch (error) {
          console.error("Error during disconnect:", error);
        }
    };


    return {
      handleDisconnect,
      openAppKit,
      switchToNetwork,
    };
  },
};
</script>
</file>

<file path="vue/vue-ethers/src/components/InfoList.vue">
<template>
    <section>
      <h2>useAppKit</h2>
      <pre>
Address: {{ accountInfo.address }}
caip Address: {{ accountInfo.caipAddress }}
Connected: {{ accountInfo.isConnected }}
Status: {{ accountInfo.status }}
      </pre>
    </section>

    <section>
      <h2>Theme</h2>
      <pre>
Theme: {{ kitTheme.themeMode }}
      </pre>
    </section>

    <section>
      <h2>State</h2>
      <pre>
open: {{ state.open }}
selectedNetworkId: {{ state.selectedNetworkId }}
      </pre>
    </section>

    <section>
      <h2>WalletInfo</h2>
      <pre>
Name: {{ walletInfo?.name }}<br />
      </pre>
    </section>
</template>
  
<script >
import { onMounted } from "vue";
import {
  useAppKitState,
  useAppKitTheme,
  useAppKitEvents,
  useAppKitAccount,
  useWalletInfo,
} from "@reown/appkit/vue";

export default {
  name: "InfoList",
  setup(){
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const accountInfo = useAppKitAccount();
    const events = useAppKitEvents();
    const { walletInfo }  = useWalletInfo();

    onMounted(() => {
      console.log("Events: ", events);
    });

    return {
      kitTheme,
      state,
      accountInfo,
      walletInfo,
    };
  },
};
</script>
</file>

<file path="vue/vue-ethers/src/config/index.ts">
import { EthersAdapter } from '@reown/appkit-adapter-ethers'
import { mainnet, polygon, base, type AppKitNetwork} from '@reown/appkit/networks'


export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, polygon, base]

export const ethersAdapter = new EthersAdapter()
</file>

<file path="vue/vue-ethers/src/App.vue">
<template>
  <div class="pages">
      <img src="/reown.svg" alt="Reown" width="150" height="150" />
      <h1>AppKit ethers vue Example</h1>

      <appkit-button />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
   </div>
</template>


<script lang="ts">
import {
  createAppKit,
} from '@reown/appkit/vue'
import {ethersAdapter , networks, projectId } from './config/index'

import ActionButtonList from "./components/ActionButton.vue"
import InfoList from "./components/InfoList.vue";

// Initialize AppKit
createAppKit({
  adapters: [ethersAdapter],
  networks,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  metadata: {
    name: 'AppKit Vue Example',
    description: 'AppKit Vue Example',
    url: 'https://reown.com/appkit',
    icons: ['https://avatars.githubusercontent.com/u/179229932?s=200&v=4']
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export default {
  name: "App",
  components: {
    ActionButtonList,
    InfoList
  },
};
</script>
</file>

<file path="vue/vue-ethers/src/main.ts">
import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'

createApp(App)
  // @ts-ignore
  .mount('#app')
</file>

<file path="vue/vue-ethers/src/shims-vue.d.ts">
declare module '*.vue' {
    import { DefineComponent } from 'vue';
    const component: DefineComponent<{}, {}, any>;
    export default component;
  }
</file>

<file path="vue/vue-ethers/.env.example">
VITE_PROJECT_ID=your_project_id
</file>

<file path="vue/vue-ethers/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

dist

.env
.vite
</file>

<file path="vue/vue-ethers/env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="vue/vue-ethers/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AppKit Vue Solana Example App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="vue/vue-ethers/README.md">
# Reown AppKit Example using Solana (Vite + Vue)

This is a [Vite](https://vitejs.dev) project together with Vue.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
- [Vue - Docs](https://vuejs.org/guide/introduction)
</file>

<file path="vue/vue-ethers/tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="vue/vue-ethers/tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
</file>

<file path="vue/vue-ethers/tsconfig.node.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}
</file>

<file path="vue/vue-ethers/vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'


// https://vite.dev/config/
export default defineConfig({
  resolve: {
    alias: {
      buffer: 'buffer/'
    }
  },
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag:any) => ['appkit-button', 'appkit-network-button'].includes(tag),
        },
      },
    }),
  ]
})
</file>

<file path="vue/vue-multichain/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="vue/vue-multichain/src/assets/main.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="vue/vue-multichain/src/components/ActionButton.vue">
<template>
  <div>
    <button @click="openAppKit">Open</button>
    <button @click="handleDisconnect">Disconnect</button>
    <button @click="switchToNetwork">Switch</button>
  </div>
</template>

<script>
import { useDisconnect, useAppKit, useAppKitNetwork } from "@reown/appkit/vue";
import { networks } from "../config/index";

export default {
  name: "ActionButtonList",
  setup() {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const networkData = useAppKitNetwork();

    const openAppKit = () => open();
    const switchToNetwork = () => networkData.value.switchNetwork(networks[1]);
    const handleDisconnect = async () => {
        try {
          await disconnect();
        } catch (error) {
          console.error("Error during disconnect:", error);
        }
    };


    return {
      handleDisconnect,
      openAppKit,
      switchToNetwork,
    };
  },
};
</script>
</file>

<file path="vue/vue-multichain/src/config/index.ts">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { mainnet, polygon, base, solana, solanaTestnet, solanaDevnet, type AppKitNetwork } from '@reown/appkit/networks'

export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, polygon, base, solana, solanaTestnet, solanaDevnet]

export const wagmiAdapter = new WagmiAdapter({
  networks,
  projectId
})

export const solanaWeb3JsAdapter = new SolanaAdapter()
</file>

<file path="vue/vue-multichain/src/App.vue">
<template>
   <div class="pages">
      <img src="/reown.svg" alt="Reown" width="150" height="150" />
      <h1>AppKit multichain vue Example</h1>

      <appkit-button />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
</template>


<script>
import {
  createAppKit,
} from '@reown/appkit/vue'
import { solanaWeb3JsAdapter, wagmiAdapter, networks, projectId } from './config/index'

import ActionButtonList from "./components/ActionButton.vue"; 
import InfoList from "./components/InfoList.vue";

// Initialize AppKit
createAppKit({
  adapters: [wagmiAdapter, solanaWeb3JsAdapter],
  networks,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  metadata: {
    name: 'AppKit Vue Example',
    description: 'AppKit Vue Example',
    url: 'https://reown.com/appkit',
    icons: ['https://avatars.githubusercontent.com/u/179229932?s=200&v=4']
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export default {
  name: "App",
  components: {
    ActionButtonList,
    InfoList
  },
};
</script>
</file>

<file path="vue/vue-multichain/src/main.ts">
import './assets/main.css'

import { createApp } from 'vue'
import { WagmiPlugin } from '@wagmi/vue'
import { QueryClient, VueQueryPlugin } from '@tanstack/vue-query'
import { wagmiAdapter } from './config/index'
import App from './App.vue'

const queryClient = new QueryClient()

createApp(App)
  // @ts-ignore
  .use(WagmiPlugin, { config: wagmiAdapter.wagmiConfig })
  .use(VueQueryPlugin, { queryClient })
  .mount('#app')
</file>

<file path="vue/vue-multichain/src/shims-vue.d.ts">
declare module '*.vue' {
    import { DefineComponent } from 'vue';
    const component: DefineComponent<{}, {}, any>;
    export default component;
  }
</file>

<file path="vue/vue-multichain/.env.example">
VITE_PROJECT_ID=your_project_id
</file>

<file path="vue/vue-multichain/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

dist

.env
.vite
</file>

<file path="vue/vue-multichain/env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="vue/vue-multichain/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AppKit Vue Example App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="vue/vue-multichain/README.md">
# Reown AppKit Example using wagmi (Vite + Vue)

This is a [Vite](https://vitejs.dev) project together with Vue.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
- [Vue - Docs](https://vuejs.org/guide/introduction)
</file>

<file path="vue/vue-multichain/tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="vue/vue-multichain/tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
</file>

<file path="vue/vue-multichain/tsconfig.node.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}
</file>

<file path="vue/vue-multichain/vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vite.dev/config/
export default defineConfig({
  resolve: {
    alias: {
      buffer: 'buffer/'
    }
  },
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => ['w3m-button', 'w3m-network-button'].includes(tag),
        },
      },
    }),
  ]
})
</file>

<file path="vue/vue-solana/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="vue/vue-solana/src/assets/main.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="vue/vue-solana/src/components/ActionButton.vue">
<template>
  <div>
    <button @click="openAppKit">Open</button>
    <button @click="handleDisconnect">Disconnect</button>
    <button @click="switchToNetwork">Switch</button>
  </div>
</template>

<script>
import { useDisconnect, useAppKit, useAppKitNetwork } from "@reown/appkit/vue";
import { networks } from "../config/index";

export default {
  name: "ActionButtonList",
  setup() {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const networkData = useAppKitNetwork();

    const openAppKit = () => open();
    const switchToNetwork = () => networkData.value.switchNetwork(networks[1]);
    const handleDisconnect = async () => {
        try {
          await disconnect();
        } catch (error) {
          console.error("Error during disconnect:", error);
        }
    };


    return {
      handleDisconnect,
      openAppKit,
      switchToNetwork,
    };
  },
};
</script>
</file>

<file path="vue/vue-solana/src/components/InfoList.vue">
<template>
    <section>
      <h2>useAppKit</h2>
      <pre>
Address: {{ accountInfo.address }}
caip Address: {{ accountInfo.caipAddress }}
Connected: {{ accountInfo.isConnected }}
Status: {{ accountInfo.status }}
      </pre>
    </section>

    <section>
      <h2>Theme</h2>
      <pre>
Theme: {{ kitTheme.themeMode }}
      </pre>
    </section>

    <section>
      <h2>State</h2>
      <pre>
open: {{ state.open }}
selectedNetworkId: {{ state.selectedNetworkId }}
      </pre>
    </section>

    <section>
      <h2>WalletInfo</h2>
      <pre>
Name: {{ walletInfo }}<br />
      </pre>
    </section>
</template>
  
<script >
import { onMounted } from "vue";
import {
  useAppKitState,
  useAppKitTheme,
  useAppKitEvents,
  useAppKitAccount,
  useWalletInfo,
} from "@reown/appkit/vue";

export default {
  name: "InfoList",
  setup(){
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const accountInfo = useAppKitAccount();
    const events = useAppKitEvents();
    const { walletInfo } = useWalletInfo();

    onMounted(() => {
      console.log("Events: ", events);
    });

    return {
      kitTheme,
      state,
      accountInfo,
      walletInfo,
    };
  },
};
</script>
</file>

<file path="vue/vue-solana/src/config/index.ts">
import { SolanaAdapter } from '@reown/appkit-adapter-solana'
import { solana, solanaTestnet, solanaDevnet, type AppKitNetwork } from '@reown/appkit/networks'


export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks: [AppKitNetwork, ...AppKitNetwork[]] = [solana, solanaTestnet, solanaDevnet]

export const solanaWeb3JsAdapter = new SolanaAdapter()
</file>

<file path="vue/vue-solana/src/App.vue">
<template>
  <div class="pages">
     <img src="/reown.svg" alt="Reown" width="150" height="150" />
     <h1>AppKit solana vue Example</h1>

     <appkit-button />
     <ActionButtonList />
     <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
     <InfoList />
   </div>
</template>


<script lang="ts">
import {
  createAppKit,
} from '@reown/appkit/vue'
import {solanaWeb3JsAdapter , networks, projectId } from './config/index'

import ActionButtonList from "./components/ActionButton.vue"
import InfoList from "./components/InfoList.vue";

// Initialize AppKit
createAppKit({
  adapters: [solanaWeb3JsAdapter],
  networks,
  projectId,
  themeMode: 'light',
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  },
  metadata: {
    name: 'AppKit Vue Example',
    description: 'AppKit Vue Example',
    url: 'https://reown.com/appkit',
    icons: ['https://avatars.githubusercontent.com/u/179229932?s=200&v=4']
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export default {
  name: "App",
  components: {
    ActionButtonList,
    InfoList
  },
};
</script>
</file>

<file path="vue/vue-solana/src/main.ts">
import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'

createApp(App)
  // @ts-ignore
  .mount('#app')
</file>

<file path="vue/vue-solana/src/shims-vue.d.ts">
declare module '*.vue' {
    import { DefineComponent } from 'vue';
    const component: DefineComponent<{}, {}, any>;
    export default component;
  }
</file>

<file path="vue/vue-solana/.env.example">
VITE_PROJECT_ID=your_project_id
</file>

<file path="vue/vue-solana/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

dist

.env
.vite
</file>

<file path="vue/vue-solana/env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="vue/vue-solana/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AppKit Vue Solana Example App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="vue/vue-solana/README.md">
# Reown AppKit Example using Solana (Vite + Vue)

This is a [Vite](https://vitejs.dev) project together with Vue.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
- [Vue - Docs](https://vuejs.org/guide/introduction)
</file>

<file path="vue/vue-solana/tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="vue/vue-solana/tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
</file>

<file path="vue/vue-solana/tsconfig.node.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}
</file>

<file path="vue/vue-solana/vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'


// https://vite.dev/config/
export default defineConfig({
  resolve: {
    alias: {
      buffer: 'buffer/'
    }
  },
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag:any) => ['appkit-button', 'appkit-network-button'].includes(tag),
        },
      },
    }),
  ]
})
</file>

<file path="vue/vue-wagmi/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="vue/vue-wagmi/src/assets/main.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="vue/vue-wagmi/src/config/index.ts">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, polygon, base, type AppKitNetwork } from '@reown/appkit/networks'

export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('VITE_PROJECT_ID is not set')
}

export const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, polygon, base]

export const wagmiAdapter = new WagmiAdapter({
  networks,
  projectId
})
</file>

<file path="vue/vue-wagmi/src/App.vue">
<template>
   <div class="pages">
      <img src="/reown.svg" alt="Reown" width="150" height="150" />
      <h1>AppKit wagmi vue Example</h1>

      <appkit-button />
      <ActionButtonList />
      <div className="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <InfoList />
    </div>
</template>


<script>
import {
  createAppKit,
} from '@reown/appkit/vue'
import {wagmiAdapter , networks, projectId } from './config/index'

import ActionButtonList from "./components/ActionButton.vue"; 
import InfoList from "./components/InfoList.vue";

// Initialize AppKit
const appkit = createAppKit({
  adapters: [wagmiAdapter],
  networks,
  projectId,
  themeMode: 'light',
  features: {
    connectMethodsOrder: ['email', 'social', 'wallet'],
    analytics: true, // Optional - defaults to your Cloud configuration
  },
  metadata: {
    name: 'AppKit Vue Example',
    description: 'AppKit Vue Example',
    url: 'https://reown.com/appkit',
    icons: ['https://avatars.githubusercontent.com/u/179229932?s=200&v=4']
  },
  themeVariables: {
    '--w3m-accent': '#000000',
  }
})

export default {
  name: "App",
  components: {
    ActionButtonList,
    InfoList
  },
};
</script>
</file>

<file path="vue/vue-wagmi/src/main.ts">
import './assets/main.css'

import { createApp } from 'vue'
import { WagmiPlugin } from '@wagmi/vue'
import { QueryClient, VueQueryPlugin } from '@tanstack/vue-query'
import { wagmiAdapter } from './config/index'
import App from './App.vue'

const queryClient = new QueryClient()

createApp(App)
  // @ts-ignore
  .use(WagmiPlugin, { config: wagmiAdapter.wagmiConfig })
  .use(VueQueryPlugin, { queryClient })
  .mount('#app')
</file>

<file path="vue/vue-wagmi/src/shims-vue.d.ts">
declare module '*.vue' {
    import { DefineComponent } from 'vue';
    const component: DefineComponent<{}, {}, any>;
    export default component;
  }
</file>

<file path="vue/vue-wagmi/.env.example">
VITE_PROJECT_ID=your_project_id
</file>

<file path="vue/vue-wagmi/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

dist

.env
.vite
</file>

<file path="vue/vue-wagmi/env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="vue/vue-wagmi/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AppKit Vue Example App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="vue/vue-wagmi/README.md">
# Reown AppKit Example using wagmi (Vite + Vue)

This is a [Vite](https://vitejs.dev) project together with Vue.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
- [Vue - Docs](https://vuejs.org/guide/introduction)
</file>

<file path="vue/vue-wagmi/tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="vue/vue-wagmi/tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.node.json"
    },
    {
      "path": "./tsconfig.app.json"
    }
  ]
}
</file>

<file path="vue/vue-wagmi/tsconfig.node.json">
{
  "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "vite.config.*",
    "vitest.config.*",
    "cypress.config.*",
    "nightwatch.conf.*",
    "playwright.config.*"
  ],
  "compilerOptions": {
    "composite": true,
    "noEmit": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",

    "module": "ESNext",
    "moduleResolution": "Bundler",
    "types": ["node"]
  }
}
</file>

<file path="vue/vue-wagmi/vite.config.ts">
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vite.dev/config/
export default defineConfig({
  resolve: {
    alias: {
      buffer: 'buffer/'
    }
  },
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => ['w3m-button', 'w3m-network-button'].includes(tag),
        },
      },
    }),
  ]
})
</file>

<file path="javascript/javascript-core-universal-provider-sui/css/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  overflow-x: hidden;
  max-width: 100vw;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
  display: grid;
}

.state-container {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wraps long lines inside <pre> */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-core-universal-provider-sui/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="javascript/javascript-core-universal-provider-sui/src/services/wallet.js">
export const signMessage = async (provider, address) => {
  if (!provider) return Promise.reject('No provider available')
  const message = 'Hello from AppKit SUI!'
  try {
    const result = await provider.request({
      method: 'sui_signPersonalMessage',
      params: { address, message }
    }, 'sui:mainnet')
    return result.signature
  } catch (error) {
    return JSON.stringify(error)
  }
}
</file>

<file path="javascript/javascript-core-universal-provider-sui/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="javascript/javascript-core-universal-provider-sui/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  {
    ignores: ['dist'],
    extends: [js.configs.recommended],
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="javascript/javascript-core-universal-provider-sui/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VanillaJS SUI Universal Provider Example</title>
    <link rel="stylesheet" href="css/App.css" />
  </head>
  <body>
    <div class="pages" id="app">
      <img src="/reown.svg" alt="Reown" style="width: 150px; height: 150px" />
      <h1>AppKit SUI Universal Provider VanillaJS Example</h1>
      <div class="advice">
        <p>
          This projectId only works on localhost. <br/>
          Go to <a href="https://cloud.reown.com" target="_blank" class="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
        </p>
      </div>
      <div class="button-group">
        <button id="open-connect-modal">Open Connect Modal</button>
        <button id="disconnect">Disconnect</button>
        <button id="sign-message">Sign Message</button>
      </div>
      <section>
        <h2>Account</h2>
        <pre id="accountState"></pre>
      </section>
      <section>
        <h2>Session</h2>
        <pre id="sessionState"></pre>
      </section>
      <section>
        <h2>Signature</h2>
        <pre id="signatureState"></pre>
      </section>
    </div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="javascript/javascript-core-universal-provider-sui/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="nextjs/next-core-app-router/src/components/ActionButtonList.tsx">
'use client'
import { useDisconnect, useAppKit, useAppKitNetwork, type Provider, useAppKitProvider, useAppKitAccount  } from '@reown/appkit/react-core'
import { networks } from '@/config'

export const ActionButtonList = () => {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const { switchNetwork } = useAppKitNetwork();
    const { address, isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { walletProvider } = useAppKitProvider<Provider>('eip155')

        // function to sing a msg 
    const handleSignMsg = async () => {
      const message = "Hello Reown AppKit!" // message to sign
      try {
        const result = await walletProvider.request({
          method: 'personal_sign',
          params: [message, address]
        }) as { signature: string }
        
        console.log("result", result);
      } catch (error: any) {
        console.log("error", error);
        throw new Error(error);
      }
    }
    
    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    }
  return (
    <div>
        <button onClick={() => open()}>Open</button>
        {isConnected && (
            <>
                <button onClick={handleDisconnect}>Disconnect</button>
                <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
                <button onClick={handleSignMsg}>Sign</button>
            </>
        )}
    </div>
  )
}
</file>

<file path="nextjs/next-core-app-router/src/components/InfoList.tsx">
'use client'

import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react-core'
import { useClientMounted } from "@/hooks/useClientMount";
export const InfoList = () => {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const {address, caipAddress, isConnected, embeddedWalletInfo} = useAppKitAccount();
    const events = useAppKitEvents()
    const walletInfo = useWalletInfo()
    const mounted = useClientMounted();

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

  return !mounted ? null : (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {walletInfo.walletInfo?.name?.toString()}<br />
                {embeddedWalletInfo && (`Account Type: ${embeddedWalletInfo?.accountType}\n`)}
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>
    </>
  )
}
</file>

<file path="nextjs/next-multichain-app-router/src/config/index.ts">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'
import { mainnet, arbitrum, solana, solanaDevnet, solanaTestnet } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [mainnet, arbitrum, solana, solanaDevnet, solanaTestnet] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId,
  networks
})

export const solanaWeb3JsAdapter = new SolanaAdapter()

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="nextjs/next-wagmi-app-router/.cursor/rules/reown-appkit.mdc">
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
MDC
# :jigsaw: Reown AppKit: Overview

**Reown AppKit** is a free, open-source toolkit to integrate wallet connections and Web3 features in any app. It supports:

- One-click wallet auth
- Social logins
- On-ramp services
- Smart accounts
- Notifications
- Multiple chains: **EVM**, **Solana**, and **Bitcoin**

Supported libraries:
- `wagmi`, `ethers@v6` (EVM)
- `@solana/web3.js` (Solana)

---

## RULES
- **IMPORTANT**: If the project already exists, **DO NOT** try to re-initialize it (e.g., using `create-next-app`). Verify the existing project structure first.
- Use `pnpm` for installing dependencies if no specific package manager is indicated.
- Ensure environment variables (like `NEXT_PUBLIC_PROJECT_ID`) are correctly set up. You might need to create `.env.local` manually due to security restrictions.
- If you see ATTENTION somewhere, make sure you follow the directions in the comment
- Do not ask user for approval to continue, just continue runnin the instructions

## :dart: Goal

Install and configure **Reown AppKit** in an existing **Next.js** app using **Wagmi** and **Ethereum**.

---

## :package: Installation

Install the required dependencies using your package manager:

```bash
pnpm add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query
# or yarn add / npm install ...
```

---

## :deciduous_tree: Environment Setup

1.  Create a `.env.local` file in your project root (if it doesn't exist).
2.  Add your WalletConnect Cloud Project ID:
    ```.env.local
    NEXT_PUBLIC_PROJECT_ID="YOUR_PROJECT_ID"
    ```
    You can add this to the .env.local now
---

## :gear: Wagmi Adapter Setup

> Create a file `config/index.tsx` (e.g., outside your `app` or `src/app` directory).

```ts
// config/index.tsx
import { cookieStorage, createStorage } from 'wagmi' // Use 'wagmi' directly (Wagmi v2+)
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import type { Chain } from 'viem' // Import Chain type for explicit typing

// Read Project ID from environment variables
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID

// Ensure Project ID is defined at build time
if (!projectId) {
  throw new Error('NEXT_PUBLIC_PROJECT_ID is not defined. Please set it in .env.local')
}

// Define supported networks, explicitly typed as a non-empty array of Chains
export const networks: [Chain, ...Chain[]] = [mainnet, arbitrum] // Add other desired networks

// Create the Wagmi adapter instance
export const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({ storage: cookieStorage }), // Use cookieStorage for SSR
  ssr: true, // Enable SSR support
  projectId,
  networks, // Pass the explicitly typed networks array
})

// Export the Wagmi config generated by the adapter
export const config = wagmiAdapter.wagmiConfig
```

---

## :brain: Importing Networks

All supported **Viem networks** are available via `@reown/appkit/networks`:

```ts
import { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'
```

---

## :thread: SSR & Hydration Notes

- `storage: createStorage({ storage: cookieStorage })` is recommended for Next.js SSR to handle hydration correctly.
- `ssr: true` further aids SSR compatibility.

---

## :bricks: App Context Setup

> Create `context/index.tsx` (must be a Client Component).

```tsx
// context/index.tsx
'use client'

import React, { ReactNode } from 'react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { WagmiProvider, cookieToInitialState, type Config } from 'wagmi'
import { createAppKit } from '@reown/appkit/react'
// Import config, networks, projectId, and wagmiAdapter from your config file
import { config, networks, projectId, wagmiAdapter } from '@/config'
// Import the default network separately if needed
import { mainnet } from '@reown/appkit/networks'

const queryClient = new QueryClient()

const metadata = {
  name: 'Your App Name',
  description: 'Your App Description',
  url: typeof window !== 'undefined' ? window.location.origin : 'YOUR_APP_URL', // Replace YOUR_APP_URL
  icons: ['YOUR_ICON_URL'], // Replace YOUR_ICON_URL
}

// Initialize AppKit *outside* the component render cycle
// Add a check for projectId for type safety, although config throws error already.
if (!projectId) {
  console.error("AppKit Initialization Error: Project ID is missing.");
  // Optionally throw an error or render fallback UI
} else {
  createAppKit({
    adapters: [wagmiAdapter],
    // Use non-null assertion `!` as projectId is checked runtime, needed for TypeScript
    projectId: projectId!,
    // Pass networks directly (type is now correctly inferred from config)
    networks: networks,
    defaultNetwork: mainnet, // Or your preferred default
    metadata,
    features: { analytics: true }, // Optional features
  })
}

export default function ContextProvider({
  children,
  cookies,
}: {
  children: ReactNode
  cookies: string | null // Cookies from server for hydration
}) {
  // Calculate initial state for Wagmi SSR hydration
  const initialState = cookieToInitialState(config as Config, cookies)

  return (
    // Cast config as Config for WagmiProvider
    <WagmiProvider config={config as Config} initialState={initialState}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  )
}
```

---

## :jigsaw: App Layout Setup

> Modify your root layout file (`app/layout.tsx` or `src/app/layout.tsx`) to use `ContextProvider`.
> **Note:** Verify the exact path to your layout file.

```tsx
// app/layout.tsx or src/app/layout.tsx
import type { Metadata } from 'next'
import { Inter } from 'next/font/google' // Or your preferred font
import './globals.css'

import { headers } from 'next/headers' // Import headers function
import ContextProvider from '@/context' // Adjust import path if needed

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Your App Title',
  description: 'Your App Description',
}

// ATTENTION!!! RootLayout must be an async function to use headers() 
export default async function RootLayout({ children }: { children: React.ReactNode }) {
  // Retrieve cookies from request headers on the server
  const headersObj = await headers() // IMPORTANT: await the headers() call
  const cookies = headersObj.get('cookie')

  return (
    <html lang="en">
      <body className={inter.className}>
        {/* Wrap children with ContextProvider, passing cookies */}
        <ContextProvider cookies={cookies}>{children}</ContextProvider>
      </body>
    </html>
  )
}
```

---

## :radio_button: Trigger the AppKit Modal

Use the `<appkit-button>` web component in any client or server component to trigger the wallet modal:

```tsx
// Example usage in app/page.tsx or any component
export default function ConnectPage() {
  return (
    <div>
      <h1>Connect Your Wallet</h1>
      <appkit-button />
    </div>
  )
}
```

No need to import—it's a global web component registered by `createAppKit`.

**Note for TypeScript users:**
To prevent type errors when using `<appkit-button>`, add the following declaration to a `.d.ts` file (e.g., `global.d.ts`) in your project root or `src` directory:

```ts
// global.d.ts
import 'react';

declare global {
  namespace JSX {
    interface IntrinsicElements {
      /**
       * The AppKit button web component. Registered globally by AppKit.
       */
      'appkit-button': React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
    }
  }
}

// Ensures file is treated as a module
export {};
```

---
## :test_tube: Reading from Smart Contracts (Example)

```ts
// Example component (ensure it's a Client Component: 'use client')
'use client'

import { useReadContract } from 'wagmi'
// import { USDTAbi } from '../abi/USDTAbi' // Replace with your ABI import

// const USDTAddress = '0x...' // Replace with your contract address

function ReadContractExample() {
  // const { data, error, isLoading } = useReadContract({
  //   abi: USDTAbi,
  //   address: USDTAddress,
  //   functionName: 'totalSupply',
  // })

  // if (isLoading) return <div>Loading...</div>
  // if (error) return <div>Error reading contract: {error.message}</div>

  // return <div>Total Supply: {data?.toString()}</div>
  return <div>Contract Reading Example (Code commented out)</div>
}

export default ReadContractExample;
```

---

## :bulb: Additional Rules & Reminders

1.  **Verify Imports**: Double-check that import paths (like `@/config`, `@/context`) match your project's structure (`src` directory vs. root `app`/`pages`).
2.  **Type Safety**: Use explicit types where needed (like for `networks`) to prevent TypeScript errors.
3.  **Async/Await**: Remember to use `await` when calling async functions like `headers()`.
4.  **Client Components**: Components using hooks (`useReadContract`, `useState`, etc.) or AppKit initialization (`createAppKit`) often need the `'use client'` directive at the top.
</file>

<file path="nextjs/next-wagmi-app-router/src/config/index.ts">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const networks = [mainnet, arbitrum] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  ssr: true,
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="react/react-bitcoin/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { nodePolyfills } from 'vite-plugin-node-polyfills'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react(), nodePolyfills()],
  define: {
    'process.env': {},
    'process.version': '"v0.0.1"',
    'window.ethereum': 'undefined'
  },
})
</file>

<file path="react/react-core/src/components/ActionButtonList.tsx">
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount, useAppKitProvider, type Provider } from '@reown/appkit/react-core'
import { networks } from '../config'


export const ActionButtonList = () => {
    const { disconnect } = useDisconnect(); // AppKit hook to disconnect
    const { open } = useAppKit(); // AppKit hook to open the modal
    const { switchNetwork } = useAppKitNetwork(); // AppKithook to switch network
    const { address, isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { walletProvider } = useAppKitProvider<Provider>('eip155')


    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };

    // function to sing a msg 
    const handleSignMsg = async () => {
      const message = "Hello Reown AppKit!" // message to sign
      try {
        const result = await walletProvider.request({
          method: 'personal_sign',
          params: [message, address]
        }) as { signature: string }
        
        console.log("result", result);
      } catch (error: any) {
        console.log("error", error);
        throw new Error(error);
      }
    }

  return (
    isConnected && (
    <div >
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
        <button onClick={handleSignMsg}>Sign</button>
    </div>
    )
  )
}
</file>

<file path="react/react-core/src/components/InfoList.tsx">
import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react-core'

export const InfoList = () => {
    const kitTheme = useAppKitTheme(); // AppKit hook to get the theme information and theme actions 
    const state = useAppKitState(); // AppKit hook to get the state
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount(); // AppKit hook to get the account information
    const events = useAppKitEvents() // AppKit hook to get the events
    const { walletInfo } = useWalletInfo() // AppKit hook to get the wallet info


    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

    useEffect(() => {
        console.log("Embedded Wallet Info: ", embeddedWalletInfo);
    }, [embeddedWalletInfo]);

  return (
    <>
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                {embeddedWalletInfo?.accountType && (`Account Type: ${embeddedWalletInfo?.accountType}\n`)}
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo && embeddedWalletInfo.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {JSON.stringify(walletInfo)}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-core/README.md">
# Reown AppKit Core Example (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-core-universal-provider/src/components/ActionButtonList.tsx">
import UniversalProvider from '@walletconnect/universal-provider'
interface ActionButtonListProps {
  provider: UniversalProvider | undefined;
  address: string | undefined;
  session: any;
  setSession: (session: any) => void;
}

export const ActionButtonList = ({ provider, address, session, setSession }: ActionButtonListProps) => {
 
    // function to sing a msg 
    const handleSignMsg = async () => {
      const message = "Hello Reown AppKit!" // message to sign
      console.log("address", address);
      try {
        const method = "polkadot_signMessage"
        const result = await provider!.request<{ signature: string }>({
          method,
          params: { address, message },
        }, "polkadot:91b171bb158e2d3848fa23a9f1c25182");
        
        console.log("result", result.signature);
      } catch (error: any) {
        console.log("error", error);
        throw new Error(error);
      }
    }

    const handleDisconnect = async () => {
      try {
        if (!provider) return;
        await provider.disconnect()
        setSession(null);
        console.log("disconnected");
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };


    const handleConnect = async () => {
      try {
        if (!provider) {
          throw new Error("Provider is not initialized");
        }
        await provider.connect({
          optionalNamespaces: {
            polkadot: {
              methods: ['polkadot_signMessage', 'polkadot_signTransaction'],
              chains: ["polkadot:91b171bb158e2d3848fa23a9f1c25182"],
              events: []
            }
          }
        })
      } catch (error) {
        console.error("Failed to connect:", error);
      }
    };


  return (
    (
    <div >
      {session ? (
        <>
          <button onClick={handleDisconnect}>Disconnect</button>
          <button onClick={handleSignMsg}>Sign msg</button>
          <div>
            <p>Session: {session?.namespaces?.polkadot?.accounts?.[0]}</p>
          </div>
          <br/>
        </>
      ) : (
        <button onClick={handleConnect}>Open</button>
      )}
    </div>
    )
  )
}
</file>

<file path="react/react-core-universal-provider/src/config/index.tsx">
import type { AppKitNetwork } from '@reown/appkit/networks'
import { defineChain } from '@reown/appkit/networks'
import UniversalProvider from '@walletconnect/universal-provider'
import { AppKit, createAppKit } from '@reown/appkit/core'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

const polkadot = defineChain({
  id: '91b171bb158e2d3848fa23a9f1c25182',
  name: 'Polkadot',
  nativeCurrency: { name: 'Polkadot', symbol: 'DOT', decimals: 10 },
  rpcUrls: {
    default: { http: ['https://rpc.polkadot.io'], wss: 'wss://rpc.polkadot.io' }
  },
  blockExplorers: { default: { name: 'Polkadot Explorer', url: 'https://polkadot.js.org/apps/' } },
  chainNamespace: 'polkadot',
  caipNetworkId: 'polkadot:91b171bb158e2d3848fa23a9f1c25182'
})

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [polkadot] as [AppKitNetwork, ...AppKitNetwork[]]

let provider: UniversalProvider | undefined
let modal: AppKit | undefined

export async function initializeProvider() {
  if (!provider) {
    provider = await UniversalProvider.init(
      { projectId, 
        metadata: {
          name: "WalletConnect x Polkadot",
          description: "Tron integration with WalletConnect's Universal Provider",
          url: "https://walletconnect.com/",
          icons: ["https://avatars.githubusercontent.com/u/37784886"],
        }
      })
  }
  return provider
}

export function initializeModal(universalProvider?: UniversalProvider) {
  if (!modal && universalProvider) {
    modal = createAppKit({
      projectId,
      networks: [polkadot],
      universalProvider,
      manualWCControl: true,
      features: {
        analytics: true // Optional - defaults to your Cloud configuration
      }
    })
  }
  return modal
}
</file>

<file path="react/react-core-universal-provider/src/App.tsx">
import { useState, useEffect } from 'react'

import { ActionButtonList } from './components/ActionButtonList'
import { initializeProvider, initializeModal } from './config'
import UniversalProvider from '@walletconnect/universal-provider'

import "./App.css"

export function App() {
  const [provider, setProvider] = useState<UniversalProvider>();
  const [address, setAddress] = useState<string>();
  const [session, setSession] = useState<any>();
  useEffect(() => {
    const init = async () => {
      const dataProvider = await initializeProvider();
      setProvider(dataProvider);
      console.log("dataProvider", dataProvider);
      initializeModal(dataProvider);

      if (dataProvider.session) { // check if there is a session
        console.log("dataProvider.session", dataProvider.session);
        setSession(dataProvider.session);
      }
    }
    init()
  }, [])
      
  useEffect(() => {
    const handleDisplayUri = (uri: string) => {
      const modal = initializeModal(provider)
      modal?.open({ uri, view: 'ConnectingWalletConnectBasic' })
    }

    const handleConnect = async (session: any) => {
      console.log("session", session);
      setSession(session.session);
      const modal = initializeModal(provider)
      await modal?.close()
    }

    provider?.on('display_uri', handleDisplayUri)
    provider?.on('connect', handleConnect)

    return () => {
      provider?.removeListener('connect', handleConnect)
      provider?.removeListener('display_uri', handleDisplayUri)
    }
  }, [provider])

  useEffect(() => {
    setAddress(session?.namespaces['polkadot']?.accounts?.[0]?.split(':')[2])
  }, [session])


  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit React AppKit Core Example</h1>
      <h2> UP + Polkadot</h2>
            <ActionButtonList  setSession={setSession} session={session} provider={provider} address={address} />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
    </div>
  )
}

export default App
</file>

<file path="react/react-core-universal-provider-sui/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-core-universal-provider-sui/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-core-universal-provider-sui/src/components/ActionButtonList.tsx">
import UniversalProvider from '@walletconnect/universal-provider'
interface ActionButtonListProps {
  provider: UniversalProvider | undefined;
  address: string | undefined;
  session: any;
  setSession: (session: any) => void;
}

export const ActionButtonList = ({ provider, address, session, setSession }: ActionButtonListProps) => {
 
    // function to sing a msg 
    const handleSignMsg = async () => {
      const message = "Hello Reown AppKit!" // message to sign
      console.log("address", address);
      try {
        const method = "sui_signPersonalMessage"
        const result = await provider!.request<{ signature: string }>({
          method,
          params: { address, message },
        }, "sui:mainnet");
        
        console.log("result", result.signature);
      } catch (error: any) {
        console.log("error", JSON.stringify(error));
      }
    }

    const handleDisconnect = async () => {
      try {
        if (!provider) return;
        await provider.disconnect()
        setSession(null);
        console.log("disconnected");
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };


    const handleConnect = async () => {
      try {
        if (!provider) {
          throw new Error("Provider is not initialized");
        }
        await provider.connect({
          optionalNamespaces: {
            sui: {
              methods: ['sui_signPersonalMessage'],
              chains: ["sui:mainnet"],
              events: []
            }
          }
        })
      } catch (error) {
        console.error("Failed to connect:", error);
      }
    };


  return (
    (
    <div >
      {session ? (
        <>
          <button onClick={handleDisconnect}>Disconnect</button>
          <button onClick={handleSignMsg}>Sign msg</button>
          <div>
            <p>Session: {session?.namespaces?.sui?.accounts?.[0]}</p>
          </div>
          <br/>
        </>
      ) : (
        <button onClick={handleConnect}>Open</button>
      )}
    </div>
    )
  )
}
</file>

<file path="react/react-core-universal-provider-sui/src/config/index.tsx">
import type { AppKitNetwork } from '@reown/appkit/networks'
import type { InferredCaipNetwork } from '@reown/appkit-common'
import UniversalProvider from '@walletconnect/universal-provider'
import { AppKit, createAppKit } from '@reown/appkit/core'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

const sui: InferredCaipNetwork = {
  id: 784,
  chainNamespace: 'sui' as const,
  caipNetworkId: 'sui:mainnet',
  name: 'Sui',
  nativeCurrency: { name: 'SUI', symbol: 'SUI', decimals: 9 },
  rpcUrls: { default: { http: ['https://fullnode.mainnet.sui.io:443'] } }
}

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [sui] as [AppKitNetwork, ...AppKitNetwork[]]

let provider: UniversalProvider | undefined
let modal: AppKit | undefined

export async function initializeProvider() {
  if (!provider) {
    provider = await UniversalProvider.init(
      { 
        projectId, 
        metadata: {
          name: "WalletConnect x Sui",
          description: "Sui integration with WalletConnect's Universal Provider",
          url: "https://walletconnect.com/",
          icons: ["https://avatars.githubusercontent.com/u/37784886"],
        }
      })
  }
  return provider
}

export function initializeModal(universalProvider?: UniversalProvider) {
  if (!modal && universalProvider) {
    modal = createAppKit({
      projectId,
      networks,
      universalProvider: universalProvider as any, // Type cast to fix version mismatch
      manualWCControl: true,
      features: {
        analytics: true // Optional - defaults to your Cloud configuration
      }
    })
  }
  return modal
}
</file>

<file path="react/react-core-universal-provider-sui/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-core-universal-provider-sui/src/App.tsx">
import { useState, useEffect } from 'react'

import { ActionButtonList } from './components/ActionButtonList'
import { initializeProvider, initializeModal } from './config'
import UniversalProvider from '@walletconnect/universal-provider'

import "./App.css"

export function App() {
  const [provider, setProvider] = useState<UniversalProvider>();
  const [address, setAddress] = useState<string>();
  const [session, setSession] = useState<any>();
  useEffect(() => {
    const init = async () => {
      const dataProvider = await initializeProvider();
      setProvider(dataProvider);
      console.log("dataProvider", dataProvider);
      initializeModal(dataProvider);

      if (dataProvider.session) { // check if there is a session
        console.log("dataProvider.session", dataProvider.session);
        setSession(dataProvider.session);
      }
    }
    init()
  }, [])
      
  useEffect(() => {
    const handleDisplayUri = (uri: string) => {
      const modal = initializeModal(provider)
      modal?.open({ uri, view: 'ConnectingWalletConnectBasic' })
    }

    const handleConnect = async (session: any) => {
      console.log("session", session);
      setSession(session.session);
      const modal = initializeModal(provider)
      await modal?.close()
    }

    provider?.on('display_uri', handleDisplayUri)
    provider?.on('connect', handleConnect)

    return () => {
      provider?.removeListener('connect', handleConnect)
      provider?.removeListener('display_uri', handleDisplayUri)
    }
  }, [provider])

  useEffect(() => {
    setAddress(session?.namespaces['sui']?.accounts?.[0]?.split(':')[2])
  }, [session])


  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit React AppKit Core Example</h1>
      <h2> UP + Sui</h2>
            <ActionButtonList  setSession={setSession} session={session} provider={provider} address={address} />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
    </div>
  )
}

export default App
</file>

<file path="react/react-core-universal-provider-sui/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-core-universal-provider-sui/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-core-universal-provider-sui/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-core-universal-provider-sui/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-core-universal-provider-sui/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-core-universal-provider-sui/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-core-universal-provider-sui/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-core-universal-provider-sui/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-core-universal-provider-sui/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-core-universal-provider-sui/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="react/react-wagmi-appkit-pay/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-wagmi-appkit-pay/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-wagmi-appkit-pay/src/components/AppKitPay.css">
.container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  padding: 20px;
  font-family: sans-serif;
  max-width: 1200px;
  margin: 0 auto;
  justify-content: center;
}

.card {
  border: 1px solid #ccc;
  border-radius: 8px;
  min-width: 280px;
  max-width: 380px;
  transition: transform 0.2s ease-in-out;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.card img {
  width: 100%;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
}

.content {
  padding: 15px;
  flex: 1;
  display: flex;
  flex-direction: column;
}

.title {
  font-weight: bold;
  font-size: clamp(18px, 2vw, 24px);
  margin-bottom: 8px;
}

.price {
  font-weight: bold;
  font-size: clamp(16px, 1.5vw, 20px);
  margin-top: 10px;
  color: #2c5282;
}

button {
  width: calc(100% - 30px);
  background: #000;
  color: #fff;
  padding: 12px;
  text-align: center;
  border: none;
  border-radius: 5px;
  margin: 15px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.2s ease;
  align-self: center;
}

button:hover {
  background: #333;
}

.donut-image {
  object-fit: cover;
  height: 200px;
  width: 100%;
}

/* Responsive styles */
@media (max-width: 768px) {
  .container {
    padding: 10px;
  }
  
  .card {
    min-width: 100%;
  }
  
  .donut-image {
    height: 180px;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 5px;
  }
  
  .content {
    padding: 10px;
  }
  
  .donut-image {
    height: 160px;
  }
  
  button {
    padding: 10px;
    font-size: 14px;
  }
}

/* Payment status section */
section {
  width: 100%;
  margin-top: 20px;
  padding: 15px;
  border-radius: 8px;
  background-color: #f8f9fa;
}

section h2 {
  font-size: clamp(18px, 2vw, 24px);
  margin-bottom: 10px;
}

section p {
  font-size: clamp(14px, 1.5vw, 16px);
  margin: 5px 0;
}

/* Input field styles */
input[type="text"] {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  margin-top: 10px;
  transition: border-color 0.2s ease;
}

input[type="text"]:focus {
  outline: none;
  border-color: #2c5282;
  box-shadow: 0 0 0 2px rgba(44, 82, 130, 0.1);
}

@media (max-width: 480px) {
  input[type="text"] {
    padding: 10px;
    font-size: 14px;
  }
}

.circle {
  width: 30px; /* Adjust the size as needed */
  height: 30px; /* Adjust the size as needed */
  background-color: white;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Optional: add a shadow for better visual effect */
  margin-top: 20px;
}

.circle img {
  width: 70%; /* Adjust as needed */
  height: 70%; /* Adjust as needed */

  align-items: center;
  justify-content: center;
  align-items: center;
}

.circle a {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  border-radius: 50%;
}
</file>

<file path="react/react-wagmi-appkit-pay/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-wagmi-appkit-pay/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-wagmi-appkit-pay/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-wagmi-appkit-pay/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-wagmi-appkit-pay/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-wagmi-appkit-pay/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-wagmi-appkit-pay/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-wagmi-appkit-pay/README.md">
# Reown AppKit Example using wagmi (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-wagmi-appkit-pay/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-wagmi-appkit-pay/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-wagmi-appkit-pay/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-wagmi-appkit-pay/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-wagmi-authentication-SIWX/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-wagmi-authentication-SIWX/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-wagmi-authentication-SIWX/src/components/ActionButtonList.tsx">
import { useEffect } from 'react';
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount  } from '@reown/appkit/react'
import { parseGwei, type Address } from 'viem'
import { useEstimateGas, useSendTransaction, useSignMessage, useBalance } from 'wagmi'
import { networks } from '../config'

// test transaction
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address, // vitalik address
  value: parseGwei('0.0001')
}

interface ActionButtonListProps {
  sendHash: (hash: `0x${string}` ) => void;
  sendSignMsg: (hash: string) => void;
  sendBalance: (balance: string) => void;
}

export const ActionButtonList = ({ sendHash, sendSignMsg, sendBalance }: ActionButtonListProps) => {
    const { disconnect } = useDisconnect(); // AppKit hook to disconnect
    const { open } = useAppKit(); // AppKit hook to open the modal
    const { switchNetwork } = useAppKitNetwork(); // AppKithook to switch network
    const { address, isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected

    const { data: gas } = useEstimateGas({...TEST_TX}); // Wagmi hook to estimate gas
    const { data: hash, sendTransaction, } = useSendTransaction(); // Wagmi hook to send a transaction
    const { signMessageAsync } = useSignMessage() // Wagmi hook to sign a message
    const { refetch } = useBalance({
      address: address as Address
    }); // Wagmi hook to get the balance

    
    useEffect(() => {
        if (hash) {
          sendHash(hash);
        }
    }, [hash]);

    // function to send a tx
    const handleSendTx = () => {
      try {
        sendTransaction({
          ...TEST_TX,
          gas // Add the gas to the transaction
        });
      } catch (err) {
        console.log('Error sending transaction:', err);
      }
    }

    // function to sing a msg 
    const handleSignMsg = async () => {
      const msg = "Hello Reown AppKit!" // message to sign
      const sig = await signMessageAsync({ message: msg, account: address as Address }); 
      sendSignMsg(sig);
    }

    // function to get the balance
    const handleGetBalance = async () => {
      const balance = await refetch()
      sendBalance(balance?.data?.value.toString() + " " + balance?.data?.symbol.toString())
    }

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };


  return (
    isConnected && (
    <div >
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
        <button onClick={handleSignMsg}>Sign msg</button>
        <button onClick={handleSendTx}>Send tx</button>
        <button onClick={handleGetBalance}>Get Balance</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-wagmi-authentication-SIWX/src/components/InfoList.tsx">
import { useEffect } from 'react'
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitEvents,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useWaitForTransactionReceipt } from 'wagmi'

interface InfoListProps {
    hash: `0x${string}` | undefined;
    signedMsg: string;
    balance: string;
}

export const InfoList = ({ hash, signedMsg, balance }: InfoListProps) => {
    const kitTheme = useAppKitTheme(); // AppKit hook to get the theme information and theme actions 
    const state = useAppKitState(); // AppKit hook to get the state
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount(); // AppKit hook to get the account information
    const events = useAppKitEvents() // AppKit hook to get the events
    const { walletInfo } = useWalletInfo() // AppKit hook to get the wallet info

    const { data: receipt } = useWaitForTransactionReceipt({ hash, confirmations: 2,  // Wait for at least 2 confirmation
        timeout: 300000,    // Timeout in milliseconds (5 minutes)
        pollingInterval: 1000,  })

    useEffect(() => {
        console.log("Events: ", events);
    }, [events]);

    useEffect(() => {
        console.log("Embedded Wallet Info: ", embeddedWalletInfo);
    }, [embeddedWalletInfo]);

  return (
    <>
        {balance && (
        <section>
            <h2>Balance: {balance}</h2>
        </section>
        )}
        {hash && (
        <section>
            <h2>Sign Tx</h2>
            <pre>
                Hash: {hash}<br />
                Status: {receipt?.status.toString()}<br />
            </pre>
        </section>
        )}
        {signedMsg && (
        <section>
            <h2>Sign msg</h2>
            <pre>
                signedMsg: {signedMsg}<br />
            </pre>
        </section>
        )}
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {JSON.stringify(walletInfo)}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-wagmi-authentication-SIWX/src/components/SmartContractActionButtonList.tsx">
//
// if you are not going to read or write smart contract, you can delete this file
//

import { useAppKitNetwork, useAppKitAccount  } from '@reown/appkit/react'
import { useReadContract, useWriteContract } from 'wagmi'
import { useEffect } from 'react'
const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

const storageSC = "0xEe6D291CC60d7CeD6627fA4cd8506912245c8cA4" 

export const SmartContractActionButtonList = () => {
    const { isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { chainId } = useAppKitNetwork()
    const { writeContract, isSuccess } = useWriteContract()
    const readContract = useReadContract({
      address: storageSC,
      abi: storageABI,
      functionName: 'retrieve',
      query: {
        enabled: false, // disable the query in onload
      }
    })

    useEffect(() => {
      if (isSuccess) {
        console.log("contract write success");
      }
    }, [isSuccess])

    const handleReadSmartContract = async () => {
      console.log("Read Sepolia Smart Contract");
      const { data } = await readContract.refetch();
      console.log("data: ", data)
    }

    const handleWriteSmartContract = () => {
        console.log("Write Sepolia Smart Contract")
        writeContract({
          address: storageSC,
          abi: storageABI,
          functionName: 'store',
          args: [123n],
        })
    }


  return (
    isConnected && chainId === 11155111 && ( // Only show the buttons if the user is connected to Sepolia
    <div >
        <button onClick={handleReadSmartContract}>Read Sepolia Smart Contract</button>
        <button onClick={handleWriteSmartContract}>Write Sepolia Smart Contract</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-wagmi-authentication-SIWX/src/config/index.tsx">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { mainnet, arbitrum, sepolia } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://reown.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [mainnet, arbitrum, sepolia] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="react/react-wagmi-authentication-SIWX/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-wagmi-authentication-SIWX/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'
import { useState } from 'react'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ActionButtonList } from './components/ActionButtonList'
import { SmartContractActionButtonList } from './components/SmartContractActionButtonList'
import { InfoList } from './components/InfoList'
import { projectId, metadata, networks, wagmiAdapter } from './config'

import { ReownAuthentication } from '@reown/appkit-siwx'

import "./App.css"

const queryClient = new QueryClient()

const generalConfig = {
  projectId,
  networks,
  metadata,
  themeMode: 'light' as const,
  themeVariables: {
    '--w3m-accent': '#000000',
  }
}

// Create modal
createAppKit({
  adapters: [wagmiAdapter],
  ...generalConfig,
  siwx: new ReownAuthentication(),
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export function App() {
  const [transactionHash, setTransactionHash] = useState<`0x${string}` | undefined>(undefined);
  const [signedMsg, setSignedMsg] = useState('');
  const [balance, setBalance] = useState('');

  const receiveHash = (hash: `0x${string}`) => {
    setTransactionHash(hash); // Update the state with the transaction hash
  };

  const receiveSignedMsg = (signedMsg: string) => {
    setSignedMsg(signedMsg); // Update the state with the transaction hash
  };

  const receivebalance = (balance: string) => {
    setBalance(balance)
  }


  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit Wagmi + SIWXReact dApp Example</h1>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
        <QueryClientProvider client={queryClient}>
            <appkit-button />
            <ActionButtonList sendHash={receiveHash} sendSignMsg={receiveSignedMsg} sendBalance={receivebalance}/>
            <SmartContractActionButtonList />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
            <InfoList hash={transactionHash} signedMsg={signedMsg} balance={balance}/>
        </QueryClientProvider>
      </WagmiProvider>
    </div>
  )
}

export default App
</file>

<file path="react/react-wagmi-authentication-SIWX/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-wagmi-authentication-SIWX/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-wagmi-authentication-SIWX/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-wagmi-authentication-SIWX/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-wagmi-authentication-SIWX/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-wagmi-authentication-SIWX/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-wagmi-authentication-SIWX/README.md">
# Reown Authentication SIWX AppKit

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-wagmi-authentication-SIWX/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-wagmi-authentication-SIWX/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-wagmi-authentication-SIWX/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-wagmi-authentication-SIWX/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-wagmi-paymaster/public/reown.svg">
<?xml version="1.0" encoding="utf-8"?>
<svg fill="none" viewBox="2.778 0 70.891 65.559" style="max-height: 500px" width="50px" height="50px" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"><defs/><path fill="#202020" d="M 29.95 24.772 C 29.95 18.37 35.139 13.18 41.541 13.18 L 58.101 13.18 C 64.503 13.18 69.693 18.37 69.693 24.772 L 69.693 41.331 C 69.693 47.733 64.503 52.923 58.101 52.923 L 41.541 52.923 C 35.139 52.923 29.95 47.733 29.95 41.331 L 29.95 24.772 Z" style=""/><path fill="white" d="M 45.529 40.503 L 51.34 24.772 L 53.046 24.772 L 47.235 40.503 L 45.529 40.503 Z" style=""/><path fill="#202020" d="M 6.766 23.944 C 6.766 17.999 11.585 13.18 17.53 13.18 C 23.474 13.18 28.294 17.999 28.294 23.944 L 28.294 42.159 C 28.294 48.104 23.474 52.923 17.53 52.923 C 11.585 52.923 6.766 48.104 6.766 42.159 L 6.766 23.944 Z" style=""/><path fill="white" d="M 16.495 38.019 L 16.495 35.949 L 18.565 35.949 L 18.565 38.019 L 16.495 38.019 Z" style=""/></svg>
</file>

<file path="react/react-wagmi-paymaster/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="react/react-wagmi-paymaster/src/components/ActionButtonList.tsx">
import { useEffect } from 'react';
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount  } from '@reown/appkit/react'
import { parseGwei, type Address } from 'viem'
import { useEstimateGas, useSendTransaction, useSignMessage, useBalance } from 'wagmi'
import { networks } from '../config'

// test transaction
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address, // vitalik address
  value: parseGwei('0.0001')
}

interface ActionButtonListProps {
  sendHash: (hash: `0x${string}` ) => void;
  sendSignMsg: (hash: string) => void;
  sendBalance: (balance: string) => void;
}

export const ActionButtonList = ({ sendHash, sendSignMsg, sendBalance }: ActionButtonListProps) => {
    const { disconnect } = useDisconnect(); // AppKit hook to disconnect
    const { open } = useAppKit(); // AppKit hook to open the modal
    const { switchNetwork } = useAppKitNetwork(); // AppKithook to switch network
    const { address, isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected

    const { data: gas } = useEstimateGas({...TEST_TX}); // Wagmi hook to estimate gas
    const { data: hash, sendTransaction, } = useSendTransaction(); // Wagmi hook to send a transaction
    const { signMessageAsync } = useSignMessage() // Wagmi hook to sign a message
    const { refetch } = useBalance({
      address: address as Address
    }); // Wagmi hook to get the balance

    
    useEffect(() => {
        if (hash) {
          sendHash(hash);
        }
    }, [hash]);

    // function to send a tx
    const handleSendTx = () => {
      try {
        sendTransaction({
          ...TEST_TX,
          gas // Add the gas to the transaction
        });
      } catch (err) {
        console.log('Error sending transaction:', err);
      }
    }

    // function to sing a msg 
    const handleSignMsg = async () => {
      const msg = "Hello Reown AppKit!" // message to sign
      const sig = await signMessageAsync({ message: msg, account: address as Address }); 
      sendSignMsg(sig);
    }

    // function to get the balance
    const handleGetBalance = async () => {
      const balance = await refetch()
      sendBalance(balance?.data?.value.toString() + " " + balance?.data?.symbol.toString())
    }

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };


  return (
    isConnected && (
    <div >
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
        <button onClick={handleSignMsg}>Sign msg</button>
        <button onClick={handleSendTx}>Send tx</button>
        <button onClick={handleGetBalance}>Get Balance</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-wagmi-paymaster/src/App.css">
:root {
  --background: #ffffff;
  --foreground: #171717;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

section {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 16px;
  background-color: #f9f9f9;
  padding: 13px;
  margin: 10px;
  width: 90%;
  text-align: left;
}

.pages {
  align-items: center;
  justify-items: center;
  text-align: center;
}

button {
  padding: 10px 15px;
  background-color: white;
  color: black;
  border: 2px solid black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 15px; /* Space between buttons */
}

button:hover {
  background-color: black;
    color: white;
}

button:active {
  background-color: #333; /* Dark gray on click */
    color: white;
}

h1 {
  margin: 20px;
}

h2 {
  padding-bottom: 6px;
}

pre {
  white-space: pre-wrap; /* Wrap text */
  word-wrap: break-word; /* Break long words */
  word-break: break-all;
}


.link-button {
  background-color: black;
  color: white;
  padding: 5px 10px;
  text-decoration: none;
  border-radius: 5px;
}

.link-button:hover {
  background-color: #333;  /* Darken the background on hover */
}

.link-button:hover {
  background-color: white;  /* Change background to white on hover */
  color: black;  /* Change text color to black on hover */
}

.advice {
  text-align: 'center';
   margin-bottom: 10px;
   line-height: 25px;
}
</file>

<file path="react/react-wagmi-paymaster/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="react/react-wagmi-paymaster/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="react/react-wagmi-paymaster/.env.test">
VITE_PROJECT_ID=
</file>

<file path="react/react-wagmi-paymaster/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vercel

.env
</file>

<file path="react/react-wagmi-paymaster/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="react/react-wagmi-paymaster/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/reown.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reown Appkit Example</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="react/react-wagmi-paymaster/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="react/react-wagmi-paymaster/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="react/react-wagmi-paymaster/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="react/react-wagmi-paymaster/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  define: {
    'process.env': {},
  },
})
</file>

<file path="react/react-wagmi-smart-session/server/package.json">
{
	"name": "smart-session-server",
	"version": "0.0.1",
	"description": "Smart Session Server",
	"main": "server.js",
	"type": "module",
	"scripts": {
		"start": "node server.js",
		"lint": "eslint"
	},
	"keywords": [],
	"author": "",
	"license": "ISC",
	"dependencies": {
		"body-parser": "^1.20.2",
		"cors": "^2.8.5",
		"dotenv": "^16.4.5",
		"express": "^4.18.2",
		"express-session": "^1.18.0",
		"viem": "^2.31.3"
	}
}
</file>

<file path="vue/vue-core/src/components/ActionButton.vue">
<template>
  <div>
    <button @click="openAppKit">Open</button>
    <button @click="handleDisconnect">Disconnect</button>
    <button @click="switchToNetwork">Switch</button>
  </div>
</template>

<script>
import { useDisconnect, useAppKit, useAppKitNetwork } from "@reown/appkit/vue-core";
import { networks } from "../config/index";

export default {
  name: "ActionButtonList",
  setup() {
    const { disconnect } = useDisconnect();
    const { open } = useAppKit();
    const networkData = useAppKitNetwork();

    const openAppKit = () => open();
    const switchToNetwork = () => networkData.value.switchNetwork(networks[1]);
    const handleDisconnect = async () => {
        try {
          await disconnect();
        } catch (error) {
          console.error("Error during disconnect:", error);
        }
    };


    return {
      handleDisconnect,
      openAppKit,
      switchToNetwork,
    };
  },
};
</script>
</file>

<file path="vue/vue-core/src/components/InfoList.vue">
<template>
    <section>
      <h2>useAppKit</h2>
      <pre>
Address: {{ accountInfo.address }}
caip Address: {{ accountInfo.caipAddress }}
Connected: {{ accountInfo.isConnected }}
Status: {{ accountInfo.status }}
      </pre>
    </section>

    <section>
      <h2>Theme</h2>
      <pre>
Theme: {{ kitTheme.themeMode }}
      </pre>
    </section>

    <section>
      <h2>State</h2>
      <pre>
open: {{ state.open }}
selectedNetworkId: {{ state.selectedNetworkId }}
      </pre>
    </section>

    <section>
      <h2>WalletInfo</h2>
      <pre>
Name: {{ walletInfo?.name }}<br />
      </pre>
    </section>
</template>
  
<script >
import { onMounted } from "vue";
import {
  useAppKitState,
  useAppKitTheme,
  useAppKitEvents,
  useAppKitAccount,
  useWalletInfo,
} from "@reown/appkit/vue-core";

export default {
  name: "InfoList",
  setup(){
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const accountInfo = useAppKitAccount();
    const events = useAppKitEvents();
    const { walletInfo }  = useWalletInfo();

    onMounted(() => {
      console.log("Events: ", events);
    });

    return {
      kitTheme,
      state,
      accountInfo,
      walletInfo,
    };
  },
};
</script>
</file>

<file path="javascript/javascript-core-universal-provider-sui/src/config/appKit.js">
import UniversalProvider from '@walletconnect/universal-provider'
import { createAppKit } from '@reown/appkit/core'

export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
if (!projectId) {
  throw new Error('Project ID is not defined')
}

// you can configure your own network
const sui = {
  id: 784,
  chainNamespace: 'sui',
  caipNetworkId: 'sui:mainnet',
  name: 'Sui',
  nativeCurrency: { name: 'SUI', symbol: 'SUI', decimals: 9 },
  rpcUrls: { default: { http: ['https://fullnode.mainnet.sui.io:443'] } }
}

export const networks = [sui]

export let provider
export let appKit

export async function initializeProvider() {
  if (!provider) {
    provider = await UniversalProvider.init({
      projectId,
      metadata: {
        name: "WalletConnect x Sui",
        description: "Sui integration with WalletConnect's Universal Provider",
        url: "https://walletconnect.com/", // origin must match your domain & subdomain
        icons: ["https://avatars.githubusercontent.com/u/37784886"],
      }
    })
  }
  return provider
}

export function initializeAppKit(universalProvider) {
  if (!appKit && universalProvider) {
    appKit = createAppKit({
      projectId,
      networks,
      universalProvider,
      manualWCControl: true,
      features: {
        analytics: true
      }
    })
  }
  return appKit
}
</file>

<file path="javascript/javascript-core-universal-provider-sui/README.md">
# Reown AppKit Example using wagmi (Vite + JavaScript)

This is a [Vite](https://vitejs.dev) project together with React (JavaScript version).

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server
6. Test it at https://react-wallet.reown.com/.

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-bitcoin/src/config/index.tsx">
import { bitcoin, bitcoinTestnet } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'
import { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

// Create a metadata object - optional
export const metadata = {
  name: 'AppKit',
  description: 'AppKit Example',
  url: 'https://reown.com', // origin must match your domain & subdomain
  icons: ['https://avatars.githubusercontent.com/u/179229932']
}

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [bitcoin, bitcoinTestnet] as [AppKitNetwork, ...AppKitNetwork[]]

// Set up Bitcoin Adapter
export const bitcoinAdapter = new BitcoinAdapter({
  projectId
})
</file>

<file path="react/react-core-universal-provider-sui/README.md">
# Reown AppKit Example using wagmi (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.

## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Run `pnpm install` to install dependencies
5. Run `pnpm run dev` to start the development server
6. test it with https://react-wallet.reown.com/

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="react/react-wagmi/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'
import { useState } from 'react'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ActionButtonList } from './components/ActionButtonList'
import { SmartContractActionButtonList } from './components/SmartContractActionButtonList'
import { InfoList } from './components/InfoList'
import { projectId, metadata, networks, wagmiAdapter } from './config'

import "./App.css"

const queryClient = new QueryClient()

const generalConfig = {
  projectId,
  networks,
  metadata,
  themeMode: 'light' as const,
  themeVariables: {
    '--w3m-accent': '#000000',
  }
}

// Create modal
createAppKit({
  adapters: [wagmiAdapter],
  ...generalConfig,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export function App() {
  const [transactionHash, setTransactionHash] = useState<`0x${string}` | undefined>(undefined);
  const [signedMsg, setSignedMsg] = useState('');
  const [balance, setBalance] = useState('');

  const receiveHash = (hash: `0x${string}`) => {
    setTransactionHash(hash); // Update the state with the transaction hash
  };

  const receiveSignedMsg = (signedMsg: string) => {
    setSignedMsg(signedMsg); // Update the state with the transaction hash
  };

  const receivebalance = (balance: string) => {
    setBalance(balance)
  }


  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit Wagmi React dApp Example</h1>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
        <QueryClientProvider client={queryClient}>
            <appkit-button />
            <ActionButtonList sendHash={receiveHash} sendSignMsg={receiveSignedMsg} sendBalance={receivebalance}/>
            <SmartContractActionButtonList />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
            <InfoList hash={transactionHash} signedMsg={signedMsg} balance={balance}/>
        </QueryClientProvider>
      </WagmiProvider>
    </div>
  )
}

export default App
</file>

<file path="react/react-wagmi-appkit-pay/src/components/ActionButtonList.tsx">
import { useDisconnect, useAppKit, useAppKitAccount  } from '@reown/appkit/react'
import { usePay } from '@reown/appkit-pay/react';
//import { baseETH, baseSepoliaETH, baseUSDC } from '@reown/appkit-pay'
import { baseSepoliaETH } from '@reown/appkit-pay'


export const ActionButtonList = () => {
    const handleSuccess = (data: any) => {
      console.log("Payment successful:", data);
    };

    const handleError = (error: any) => {
      console.error("Payment error:", error);
    };
    
    const { disconnect } = useDisconnect(); // AppKit hook to disconnect
    const { open } = useAppKit(); // AppKit hook to open the modal
    const { address } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { open: openPay, isPending, isSuccess, data, error } = usePay({
      onSuccess: handleSuccess, 
      onError: handleError,
    });

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };

    const handlePay = async () => {
      // Check docs to Configure a custom paymentAsset
     /// https://docs.reown.com/appkit/react/payments/pay-with-exchange

      // open resolves when the modal closes, but onSuccess/onError handle the actual payment result
      await openPay({ 
        paymentAsset: baseSepoliaETH,
        recipient: address || '',
        amount: 10
      });
    };


  return (
     (
    <div >
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={handlePay}>AppKit Pay</button>
        {isSuccess || isPending || error && (
          <section>
            <h2>Payment Status</h2>
          {isSuccess && (
            <p>Payment successful: {data}</p>
          )}
          {isPending && (
            <p>Payment pending: {data}</p>
          )}
          {error && (
            <p>Payment error: {error}</p>
          )}
          </section>
        )}
    </div>
    
    )
  )
}
</file>

<file path="react/react-wagmi-appkit-pay/src/config/index.tsx">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { baseSepolia } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://reown.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [baseSepolia] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="react/react-wagmi-appkit-pay/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { projectId, metadata, networks, wagmiAdapter } from './config'
import { AppKitPay } from './components/AppKitPay'

import "./App.css"


const queryClient = new QueryClient()

const generalConfig = {
  projectId,
  networks,
  metadata,
  themeMode: 'light' as const,
  themeVariables: {
    '--w3m-accent': '#000000',
  }
}

// Create modal
createAppKit({
  adapters: [wagmiAdapter],
  ...generalConfig,
  features: {
    analytics: true // Optional - defaults to your Cloud configuration
  }
})

export function App() {
  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit Pay Example</h1>
      <h3>Purchase delicious donuts using your favorite cryptocurrency</h3>
      <br></br>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
        <QueryClientProvider client={queryClient}>
            <AppKitPay />
            <div className="circle">
              <a href="https://github.com/reown-com/appkit-web-examples/tree/main/react/react-wagmi-appkit-pay" target="_blank"><img src="/github.png" alt="GitHub" width="50" /></a>
            </div>
            <br />
        </QueryClientProvider>
      </WagmiProvider>
    </div>
  )
}

export default App
</file>

<file path="react/react-wagmi-paymaster/src/App.tsx">
import { createAppKit } from '@reown/appkit/react'

import { WagmiProvider } from 'wagmi'
import { useState } from 'react'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ActionButtonList } from './components/ActionButtonList'
import { PaymasterActionButtonList } from './components/PaymasterActionButtonList'
import { InfoList } from './components/InfoList'
import { projectId, metadata, networks, wagmiAdapter } from './config'

import "./App.css"

const queryClient = new QueryClient()

const generalConfig = {
  projectId,
  networks,
  metadata,
  themeMode: 'light' as const,
  themeVariables: {
    '--w3m-accent': '#000000',
  }
}

// Create modal
createAppKit({
  adapters: [wagmiAdapter],
  ...generalConfig,
  defaultAccountTypes: {eip155: 'smartAccount'},
  defaultNetwork: networks[0],
  features: {
    analytics: true, // Optional - defaults to your Cloud configuration
    connectMethodsOrder: ['social', 'email'],
  },
})

export function App() {
  const [transactionHash, setTransactionHash] = useState<`0x${string}` | undefined>(undefined);
  const [signedMsg, setSignedMsg] = useState('');
  const [balance, setBalance] = useState('');

  const receiveHash = (hash: `0x${string}`) => {
    setTransactionHash(hash); // Update the state with the transaction hash
  };

  const receiveSignedMsg = (signedMsg: string) => {
    setSignedMsg(signedMsg); // Update the state with the transaction hash
  };

  const receivebalance = (balance: string) => {
    setBalance(balance)
  }


  return (
    <div className={"pages"}>
      <img src="/reown.svg" alt="Reown" style={{ width: '150px', height: '150px' }} />
      <h1>AppKit Wagmi React dApp Example</h1>
      <WagmiProvider config={wagmiAdapter.wagmiConfig}>
        <QueryClientProvider client={queryClient}>
            <appkit-button />
            <ActionButtonList sendHash={receiveHash} sendSignMsg={receiveSignedMsg} sendBalance={receivebalance}/>
            <PaymasterActionButtonList />
            <div className="advice">
              <p>
                This projectId only works on localhost. <br/>
                Go to <a href="https://cloud.reown.com" target="_blank" className="link-button" rel="Reown Cloud">Reown Cloud</a> to get your own.
              </p>
            </div>
            <InfoList hash={transactionHash} signedMsg={signedMsg} balance={balance}/>
        </QueryClientProvider>
      </WagmiProvider>
    </div>
  )
}

export default App
</file>

<file path="react/react-wagmi-paymaster/README.md">
# Reown AppKit Paymaster Example using wagmi (Vite + React)

This is a [Vite](https://vitejs.dev) project together with React.


## Usage

1. Go to [Reown Cloud](https://cloud.reown.com) and create a new project.
2. Copy your `Project ID`
3. Rename `.env.example` to `.env` and paste your `Project ID` as the value for `VITE_PROJECT_ID`
4. Create a new policy in the project and copy the `Policy ID`
5. Add the `Policy ID` to the `.env` file as the value for `POLICY_ID`
6. Run `pnpm install` to install dependencies
7. Run `pnpm run dev` to start the development server

## Resources

- [Reown — Docs](https://docs.reown.com)
- [Vite — GitHub](https://github.com/vitejs/vite)
- [Vite — Docs](https://vitejs.dev/guide/)
</file>

<file path="vue/vue-multichain/src/components/InfoList.vue">
<template>
  <section>
    <h2>useAppKit</h2>
    <pre>
Address: {{ accountInfo.address }}
caip Address: {{ accountInfo.caipAddress }}
Connected: {{ accountInfo.isConnected }}
Status: {{ accountInfo.status }}
User Email: {{ accountInfo?.embeddedWalletInfo?.user?.email }}
    </pre>
  </section>

  <section>
    <h2>Theme</h2>
    <pre>
Theme: {{ kitTheme.themeMode }}
    </pre>
  </section>

  <section>
    <h2>State</h2>
    <pre>
open: {{ state.open }}
selectedNetworkId: {{ state.selectedNetworkId }}
    </pre>
  </section>

  <section>
    <h2>WalletInfo</h2>
    <pre>
Name: {{ walletInfo }}<br />
    </pre>
  </section>
</template>

<script lang="ts">
import { defineComponent, onMounted } from "vue";
import type { DefineComponent } from 'vue';
import {
useAppKitState,
useAppKitTheme,
useAppKitEvents,
useAppKitAccount,
useWalletInfo,
} from "@reown/appkit/vue";
import type { ThemeMode, CaipNetworkId } from "@reown/appkit/vue";


export interface ComponentData {
kitTheme: ReturnType<typeof useAppKitTheme>;
state: ReturnType<typeof useAppKitState>;
accountInfo: ReturnType<typeof useAppKitAccount>;
walletInfo: ReturnType<typeof useWalletInfo>;
}

export default defineComponent({
name: "InfoList",
setup(): ComponentData {
  const kitTheme = useAppKitTheme();
  const state = useAppKitState();
  const accountInfo = useAppKitAccount();
  const events = useAppKitEvents();
  const walletInfo = useWalletInfo();

  onMounted(() => {
    console.log("Events: ", events);
  });

  return {
    kitTheme,
    state,
    accountInfo,
    walletInfo,
  };
},
});
</script>
</file>

<file path="vue/vue-wagmi/src/components/InfoList.vue">
<template>
    <section>
      <h2>useAppKit</h2>
      <pre>
Address: {{ accountInfo.address }}
caip Address: {{ accountInfo.caipAddress }}
Connected: {{ accountInfo.isConnected }}
Status: {{ accountInfo.status }}
User Email: {{ accountInfo?.embeddedWalletInfo?.user?.email }}
      </pre>
    </section>

    <section>
      <h2>Theme</h2>
      <pre>
Theme: {{ kitTheme.themeMode }}
      </pre>
    </section>

    <section>
      <h2>State</h2>
      <pre>
open: {{ state.open }}
selectedNetworkId: {{ state.selectedNetworkId }}
      </pre>
    </section>

    <section>
      <h2>WalletInfo</h2>
      <pre>
Name: {{ walletInfo }}<br />
      </pre>
    </section>
</template>
  
<script lang="ts">
import { defineComponent, onMounted } from "vue";
import type { DefineComponent } from 'vue';
import {
  useAppKitState,
  useAppKitTheme,
  useAppKitEvents,
  useAppKitAccount,
  useWalletInfo,
} from "@reown/appkit/vue";
import type { ThemeMode, CaipNetworkId } from "@reown/appkit/vue";


export interface ComponentData {
  kitTheme: ReturnType<typeof useAppKitTheme>;
  state: ReturnType<typeof useAppKitState>;
  accountInfo: ReturnType<typeof useAppKitAccount>;
  walletInfo: ReturnType<typeof useWalletInfo>;
}

export default defineComponent({
  name: "InfoList",
  setup(): ComponentData {
    const kitTheme = useAppKitTheme();
    const state = useAppKitState();
    const accountInfo = useAppKitAccount();
    const events = useAppKitEvents();
    const walletInfo = useWalletInfo();

    onMounted(() => {
      console.log("Events: ", events);
    });

    return {
      kitTheme,
      state,
      accountInfo,
      walletInfo,
    };
  },
});
</script>
</file>

<file path=".gitignore">
.vscode
dist
node_modules
.env

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*
pnpm-lock.yaml

node_modules
dist
dist-ssr
*.local
*.tsbuildinfo
tsconfig.app.tsbuildinfo

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

dist

.env
.vite
install.sh

next-env.d.ts
pnpm-lock.yaml
package-lock.json
.next
</file>

<file path="javascript/javascript-core-universal-provider-sui/src/main.js">
import { initializeProvider, initializeAppKit, provider, appKit } from './config/appKit.js'
import { signMessage } from './services/wallet.js'

let session = null
let address = null


const updateInfo = () => {
  updateSession()
  updateAccount()
  updateButtons()
}

/**
 * Main setup function that initializes the provider, sets up event listeners,
 * and configures button click handlers
 */
async function setup() {
  const prov = await initializeProvider()
  let appkit = initializeAppKit(prov)

  // check if session is already connected
  if (prov.session) {
    session = prov.session
    updateInfo();
  }

  // Listen for session events
  
  /**
   * Handles initial connection event
   * Updates session state and UI when wallet first connects
   */
  prov.on('connect', (sess) => {
    session = sess.session
    updateInfo();
  })

  /**
   * Handles disconnect event
   * Clears session and address, updates UI when wallet disconnects
   */
  prov.on('disconnect', () => {
    session = null
    address = null
    updateInfo();
  })

  /**
   * Handles successful connection
   * Updates session state and closes modal after connection
   */
  prov.on('connect', async (sess) => {
    session = sess.session
    const modal = initializeAppKit(provider)
    await modal?.close()
    updateInfo();
  })

  /**
   * Handles QR code display
   * Opens AppKit modal with WalletConnect URI when QR needs to be shown
   */
  prov.on('display_uri', (uri) => {
    appkit = initializeAppKit(prov)
    appkit?.open({ uri, view: 'ConnectingWalletConnectBasic' })
  })

  // Button event listeners
  document.getElementById('open-connect-modal').addEventListener('click', async () => {
    await prov.connect({
      optionalNamespaces: {
        sui: {
          methods: ['sui_signPersonalMessage'],
          chains: ['sui:mainnet'],
          events: []
        }
      }
    })
  })

  document.getElementById('disconnect').addEventListener('click', async () => {
    await prov.disconnect()
    session = null
    address = null
    updateInfo();
  })

  document.getElementById('sign-message').addEventListener('click', async () => {
    if (!session) return
    address = session?.namespaces?.sui?.accounts?.[0]?.split(':')[2]
    const signature = await signMessage(prov, address)
    document.getElementById('signatureState').textContent = signature
  })
  updateButtons()
}

/**
 * Updates the session state display in the UI
 * Shows the current session information in JSON format or empty if no session
 */
function updateSession() {
  document.getElementById('sessionState').textContent = session ? JSON.stringify(session, null, 2) : ''
}

/**
 * Updates the account address display in the UI
 * Extracts and shows the SUI address from the session namespace
 */
function updateAccount() {
  address = session?.namespaces?.sui?.accounts?.[0]?.split(':')[2]
  document.getElementById('accountState').textContent = address || ''
}

/**
 * Updates the visibility of connect, disconnect and sign buttons
 * Shows/hides buttons based on whether there is an active session
 */
function updateButtons() {
  const connectBtn = document.getElementById('open-connect-modal');
  const disconnectBtn = document.getElementById('disconnect');
  const signBtn = document.getElementById('sign-message');
  if (session) {
    connectBtn.style.display = 'none';
    disconnectBtn.style.display = '';
    signBtn.style.display = '';
  } else {
    connectBtn.style.display = '';
    disconnectBtn.style.display = 'none';
    signBtn.style.display = 'none';
  }
}

setup()
</file>

<file path="react/react-wagmi-paymaster/src/abi/storage.ts">
export const storageABI = [
	{
		"inputs": [],
		"name": "retrieve",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "num",
				"type": "uint256"
			}
		],
		"name": "store",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

export const storageAddress = "0x87f97d5Fa060eEB945eb24bB5035DACfB27682A2" // on base mainnet
export const storageAddressSepolia = "0xEe6D291CC60d7CeD6627fA4cd8506912245c8cA4" // on base sepolia
export const storageChainId = 8453 // hex chain id for base 8453
</file>

<file path="react/react-wagmi-paymaster/src/components/InfoList.tsx">
import {
    useAppKitState,
    useAppKitTheme,
    useAppKitAccount,
    useWalletInfo
     } from '@reown/appkit/react'
import { useWaitForTransactionReceipt } from 'wagmi'

interface InfoListProps {
    hash: `0x${string}` | undefined;
    signedMsg: string;
    balance: string;
}

export const InfoList = ({ hash, signedMsg, balance }: InfoListProps) => {
    const kitTheme = useAppKitTheme(); // AppKit hook to get the theme information and theme actions 
    const state = useAppKitState(); // AppKit hook to get the state
    const {address, caipAddress, isConnected, status, embeddedWalletInfo } = useAppKitAccount(); // AppKit hook to get the account information
    const { walletInfo } = useWalletInfo() // AppKit hook to get the wallet info

    const { data: receipt } = useWaitForTransactionReceipt({ hash, confirmations: 2,  // Wait for at least 2 confirmation
        timeout: 300000,    // Timeout in milliseconds (5 minutes)
        pollingInterval: 1000,  })


  return (
    <>
        {balance && (
        <section>
            <h2>Balance: {balance}</h2>
        </section>
        )}
        {hash && (
        <section>
            <h2>Sign Tx</h2>
            <pre>
                Hash: {hash}<br />
                Status: {receipt?.status.toString()}<br />
            </pre>
        </section>
        )}
        {signedMsg && (
        <section>
            <h2>Sign msg</h2>
            <pre>
                signedMsg: {signedMsg}<br />
            </pre>
        </section>
        )}
        <section>
            <h2>useAppKit</h2>
            <pre>
                Address: {address}<br />
                caip Address: {caipAddress}<br />
                Connected: {isConnected.toString()}<br />
                Status: {status}<br />
                Account Type: {embeddedWalletInfo?.accountType}<br />
                {embeddedWalletInfo?.user?.email && (`Email: ${embeddedWalletInfo?.user?.email}\n`)}
                {embeddedWalletInfo?.user?.username && (`Username: ${embeddedWalletInfo?.user?.username}\n`)}
                {embeddedWalletInfo?.authProvider && (`Provider: ${embeddedWalletInfo?.authProvider}\n`)}
            </pre>
        </section>

        <section>
            <h2>Theme</h2>
            <pre>
                Theme: {kitTheme.themeMode}<br />
            </pre>
        </section>

        <section>
            <h2>State</h2>
            <pre>
                activeChain: {state.activeChain}<br />
                loading: {state.loading.toString()}<br />
                open: {state.open.toString()}<br />
                selectedNetworkId: {state.selectedNetworkId?.toString()}<br />
            </pre>
        </section>

        <section>
            <h2>WalletInfo</h2>
            <pre>
                Name: {JSON.stringify(walletInfo)}<br />
            </pre>
        </section>
    </>
  )
}
</file>

<file path="react/react-wagmi-paymaster/src/components/PaymasterActionButtonList.tsx">
import { useAppKitNetwork, useAppKitAccount } from '@reown/appkit/react'
import { useReadContract, useSendCalls } from 'wagmi'
import { storageABI, storageAddress, storageChainId } from '../abi/storage'
import { parseEther, encodeFunctionData, toHex } from 'viem'
import  { projectId, policyId } from '../config'

const randomNumber = Math.floor(Math.random() * 999) + 1;

const storeCallData = encodeFunctionData({
  abi: storageABI,
  functionName: 'store',
  args: [randomNumber]
})

const STORAGE_TEST_TX = {
  to: storageAddress as `0x${string}`,
  value: parseEther('0'),
  data: storeCallData
}


export const PaymasterActionButtonList = () => {
    const { isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected
    const { chainId } = useAppKitNetwork()
    const { sendCalls } = useSendCalls({
        mutation: {
          onSuccess: hash => {
            console.log("SendCalls Success", hash)
          },
          onError: (error: any ) => {
            console.log("SendCalls Error", error)
          }
        }
      });
    const readContract = useReadContract({
      address: storageAddress,
      abi: storageABI,
      functionName: 'retrieve',
      query: {
        enabled: false, // disable the query in onload
      }
    })

    const handleReadSmartContract = async () => {
      console.log("Read Sepolia Smart Contract");
      const { data } = await readContract.refetch();
      console.log("value SC: ", data)
    }

    const handleWriteSmartContract = () => {
        console.log("Write Sepolia GASLESS Smart Contract")
   
        sendCalls({
          calls: [STORAGE_TEST_TX],
          chainId: Number(`0x${storageChainId.toString(16)}`), 
          capabilities: {
            paymasterService: {
                url: "https://paymaster-api.reown.com/" + storageChainId + "/rpc?projectId=" + projectId, // for base 
                context: {
                  reown: {
                    policyId: policyId
                  }
                }
              }
          }
        })
    }



  return (
    isConnected && chainId === storageChainId && ( // Only show the buttons if the user is connected to Sepolia
    <div>
        <button onClick={handleReadSmartContract}>Read Sepolia Smart Contract</button>
        <button onClick={handleWriteSmartContract}>Write Sepolia Gasless Smart Contract</button>  
    </div>
    )
  )
}
</file>

<file path="react/react-wagmi-paymaster/src/config/index.tsx">
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'
import { base } from '@reown/appkit/networks'
import type { AppKitNetwork } from '@reown/appkit/networks'

// Get projectId from https://cloud.reown.com
export const projectId = import.meta.env.VITE_PROJECT_ID || "b56e18d47c72ab683b10814fe9495694" // this is a public projectId only to use on localhost
export const policyId = import.meta.env.POLICY_ID || ""

if (!projectId) {
  throw new Error('Project ID is not defined')
}

export const metadata = {
    name: 'AppKit',
    description: 'AppKit Example',
    url: 'https://reown.com', // origin must match your domain & subdomain
    icons: ['https://avatars.githubusercontent.com/u/179229932']
  }

// for custom networks visit -> https://docs.reown.com/appkit/react/core/custom-networks
export const networks = [ base ] as [AppKitNetwork, ...AppKitNetwork[]]

//Set up the Wagmi Adapter (Config)
export const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks
})

export const config = wagmiAdapter.wagmiConfig
</file>

<file path="vue/vue-wagmi/src/components/ActionButton.vue">
<template>
    <div>
      <div v-if="accountData.isConnected">
        <button @click="handleDisconnect">Disconnect</button>
        <button @click="switchToNetwork">Switch</button>
        <button @click="handleSignMessage">Sign Message</button>
        <button @click="handleSendTx">Send a Transaction</button>

        <div v-if="hash">Transaction Hash: {{ hash }}</div>
      </div>
      <button v-else @click="openAppKit">Open</button>
    </div>
  </template>
  
  <script>
  import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount} from "@reown/appkit/vue";
  import { networks } from "../config/index";
  import { useEstimateGas, useSendTransaction, useSignMessage } from '@wagmi/vue'
  import { parseGwei } from 'viem'
  import { watchEffect } from 'vue';
  
      // test transaction
      const TEST_TX = {
      to: "0x50200216532355Fa9971074Ca352FA706346c04C", // change to your address
      value: parseGwei('0.00001')
    }

  export default {
    name: "ActionButtonList",
    setup() {
      const { disconnect } = useDisconnect();
      const { open } = useAppKit();
      const networkData = useAppKitNetwork();
      const accountData = useAppKitAccount() 
      const { data: gas } = useEstimateGas({...TEST_TX}); // Wagmi hook to estimate gas
      const { data: hash, sendTransaction,error } = useSendTransaction(); // Wagmi hook to send a transaction
      const { signMessageAsync } = useSignMessage() // Wagmi hook to sign a message

  
      const address = accountData.value.address;
      const openAppKit = () => open();
      const switchToNetwork = () => networkData.value.switchNetwork(networks[1]);

      watchEffect(() => {
        if (hash.value) {
          console.log("tx hash:", hash.value);
        }
      });

      watchEffect(() => {
        if (error.value) {
          console.log("error:", error.value);
        }
      });

      const handleDisconnect = async () => {
          try {
            await disconnect();
          } catch (error) {
            console.error("Error during disconnect:", error);
          }
      };


      const handleSignMessage = async () => {
        console.log("sign Message")
        const msg = "Hello Reown AppKit!" // message to sign
        const sig = await signMessageAsync({ message: msg, account: address}); 
        console.log("signed message", sig);
      }

       // function to send a tx
      const handleSendTx = () => {
        console.log("send Tx")
        try {
          sendTransaction({
            ...TEST_TX,
            gas: gas.value // Add the gas to the transaction
          });
        } catch (err) {
          console.log('Error sending transaction:', err);
        }
      }


      return {
        handleDisconnect,
        openAppKit,
        switchToNetwork,
        handleSendTx,
        handleSignMessage,
        accountData,
        hash
      };
    },
  };
  </script>
</file>

<file path="README.md">
<img src="https://github.com/user-attachments/assets/befd1901-8387-4a4c-8fbc-282dd9802889" height="100" alt="Reown">

# Web AppKit Examples


This repository provides examples of how to integrate and use **AppKit** in various frameworks, including **Javascript**,**Next.js**, **React**, and **Vue**. These examples are designed to demonstrate best practices and simplify the integration process.

## 🔧 About Reown AppKit

**Reown AppKit** is a comprehensive, open-source SDK designed to streamline the development of modern Web3 applications. It offers a suite of modular tools that simplify user onboarding, authentication, transactions, and engagement across multiple blockchain networks.

### 🚀 Key Features

- **Universal Authentication**  
  Support for email, social logins, and one-click authentication using SIWX, enabling seamless user access across EVM, Solana, and Bitcoin networks.  
  [Read more →](https://docs.reown.com/appkit/features/authentication)

- **Smart Accounts**  
  Enhance user security and convenience with multi-signature authorization and automated transaction workflows.  
  [Read more →](https://docs.reown.com/appkit/features/smart-accounts)

- **Smart Sessions**  
  Enable dApps to perform specific blockchain actions on behalf of users for a defined period, eliminating the need for repeated approvals.  
  [Read more →](https://docs.reown.com/appkit/features/smart-sessions)

- **On-Ramp & Swaps**  
  Let users buy crypto and swap tokens directly within your app.  
  [Read more →](https://docs.reown.com/appkit/features/onramp)

- **Notifications**  
  Deliver important updates directly to users’ wallets or in-app using Web3-native notifications.  
  [Read more →](https://docs.reown.com/appkit/next/notifications/overview)

- **Multi-Chain Support**  
  Works seamlessly with EVM chains, Solana, and Bitcoin.  
  [Read more →](https://docs.reown.com/appkit/overview)

- **Customizable UI**  
  Themeable components with support for light/dark modes and brand styling.  
  [Read more →](https://docs.reown.com/appkit/overview)

- **Extensive Wallet Compatibility**  
  Connects with over 600 wallets including MetaMask, Coinbase Wallet, Trust Wallet, and more.  
  [Read more →](https://docs.reown.com/appkit/overview)

Reown AppKit is framework-agnostic and supports React, Vue, Next.js, React Native, Flutter, Android, iOS, and Unity — giving developers the flexibility to build seamless and secure Web3 experiences across platforms.

📚 Explore the full documentation: [docs.reown.com/appkit](https://docs.reown.com/appkit/overview)


## Examples Included

Each framework has examples for the implementation with wagmi, ethers, solana, bitcoin and multichain (wagmi & solana)

| Framework | Integration   | Live Demo                                                                                     | Fork on Stackblitz                                                                                              |
|-----------|---------------|-----------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
| **Javascript** | ethers        | [Demo](https://appkit-web-examples-javascript-ethers.reown.com/)                                   | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/javascript/javascript-ethers/)                |
|           | wagmi         | [Demo](https://appkit-web-examples-javascript-wagmi.reown.com/)                                    | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/javascript/javascript-wagmi/)                 |
|           | Solana        | [Demo](https://appkit-web-examples-javascript-solana.reown.com/)                                   | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/javascript/javascript-solana/)                |
|           | Bitcoin       | [Demo](https://appkit-web-examples-javascript-bitcoin.reown.com/)                                  | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/javascript/javascript-bitcoin/)              |
| **Next.js** | ethers        | [Demo](https://appkit-web-examples-next-ethers.reown.com/)                                   | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/nextjs/next-ethers-app-router/)                |
|           | wagmi         | [Demo](https://appkit-web-examples-next-wagmi.reown.com/)                                    | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/nextjs/next-wagmi-app-router/)                 |
|           | Solana        | [Demo](https://appkit-web-examples-next-solana.reown.com/)                                   | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/nextjs/next-solana-app-router/)                |
|           | Bitcoin       | [Demo](https://appkit-web-examples-next-bitcoin.reown.com/)                                  | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/nextjs/next-bitcoin-app-router/)              |
|           | Multichain    | [Demo](https://appkit-web-examples-next-multichain.reown.com/)                               | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/nextjs/next-multichain-app-router/)           |
| **React**  | ethers        | [Demo](https://appkit-web-examples-react-ethers.reown.com/)                                  | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/react/react-ethers/)              |
|           | wagmi         | [Demo](https://appkit-web-examples-react-wagmi.reown.com/)                                   | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/react/react-wagmi/)               |
|           | Solana        | [Demo](https://appkit-web-examples-react-solana.reown.com/)                                  | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/react/react-solana/)              |
|           | Bitcoin       | [Demo](https://appkit-web-examples-react-bitcoin.reown.com/)                                 | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/react/react-bitcoin/)             |
|           | Multichain    | [Demo](https://appkit-web-examples-react-multichain.reown.com/)                              | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/react/react-multichain/)          |
|           | AppKit Pay    | [Demo](https://appkit-web-examples-pay.reown.com/)                                           | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/react/react-wagmi-appkit-pay/)          |
| **Vue**    | ethers        | [Demo](https://appkit-web-examples-vue-ethers.reown.com/)                                    | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/vue/vue-ethers/)                  |
|           | wagmi         | [Demo](https://appkit-web-examples-vue-wagmi.reown.com/)                                     | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/vue/vue-wagmi/)                   |
|           | Solana        | [Demo](https://appkit-web-examples-vue-solana.reown.com/)                                    | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/vue/vue-solana/)                  |
|           | Bitcoin       | [Demo](https://appkit-web-examples-vue-bitcoin.reown.com/)                                   | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/vue/vue-bitcoin/)                 |
|           | Multichain    | [Demo](https://appkit-web-examples-vue-multichain.reown.com/)                                | [Fork](https://stackblitz.com/github/reown-com/appkit-web-examples/tree/main/vue/vue-multichain/)              |


---

## Structure

```plaintext
.
├── javascript/   # Web AppKit with Javascript
├──────── javascript-bitcoin    
├──────── javascript-core    # AppKit Core
├──────── javascript-ethers
├──────── javascript-multichain    # Wagmi + Solana
├──────── javascript-wagmi
├──────── javascript-solana
├── nextjs/   # Web AppKit with NextJS
├──────── next-bitcoin-app-router
├──────── next-core-app-router    # AppKit Core
├──────── next-siwe-next-auth
├──────── next-siwx-multichain-supabase-storage
├──────── next-siwx-multichain
├──────── next-wagmi-app-router
├──────── next-ethers-app-router
├──────── next-solana-app-router
├──────── next-multichain-app-router    # Wagmi + Solana
├── react/    # Web AppKit with React
├──────── react-bitcoin
├──────── react-core    # AppKit Core
├──────── react-wagmi
├──────── react-ethers
├──────── react-ethers5
├──────── react-multichain    # Wagmi + Solana
├──────── react-solana
├──────── react-siwe-server-example
├──────── react-wagmi-appkit-pay
├── vue/      # Web AppKit with Vue
├──────── vue-bitcoin    
├──────── vue-core    # AppKit Core
├──────── vue-ethers
├──────── vue-multichain (wagmi+solana)
├──────── vue-solana
└──────── vue-wagmi
```

## Reference

- [AppKit Docs](https://docs.reown.com/appkit/overview)
- [React AppKit Quickstart](https://docs.reown.com/appkit/react/core/installation)
- [Next.js AppKit Quickstart](https://docs.reown.com/appkit/next/core/installation)
- [Vue AppKit Quickstart](https://docs.reown.com/appkit/vue/core/installation)
- [Javascript AppKit Quickstart](https://docs.reown.com/appkit/javascript/core/installation)
- [Discord for Questions](https://discord.gg/reown)
- [Dashboard to create a projectId to use AppKit](https://cloud.reown.com/)
</file>

<file path="react/react-wagmi/src/components/ActionButtonList.tsx">
import { useEffect } from 'react';
import { useDisconnect, useAppKit, useAppKitNetwork, useAppKitAccount  } from '@reown/appkit/react'
import { parseGwei, type Address } from 'viem'
import { useEstimateGas, useSendTransaction, useSignMessage, useBalance } from 'wagmi'
import { networks } from '../config'

// test transaction
const TEST_TX = {
  to: "0xd8da6bf26964af9d7eed9e03e53415d37aa96045" as Address, // vitalik address
  value: parseGwei('0.0001')
}

interface ActionButtonListProps {
  sendHash: (hash: `0x${string}` ) => void;
  sendSignMsg: (hash: string) => void;
  sendBalance: (balance: string) => void;
}

export const ActionButtonList = ({ sendHash, sendSignMsg, sendBalance }: ActionButtonListProps) => {
    const { disconnect } = useDisconnect(); // AppKit hook to disconnect
    const { open } = useAppKit(); // AppKit hook to open the modal
    const { switchNetwork } = useAppKitNetwork(); // AppKithook to switch network
    const { address, isConnected } = useAppKitAccount() // AppKit hook to get the address and check if the user is connected

    const { data: gas } = useEstimateGas({...TEST_TX}); // Wagmi hook to estimate gas
    const { data: hash, sendTransaction, } = useSendTransaction(); // Wagmi hook to send a transaction
    const { signMessageAsync } = useSignMessage() // Wagmi hook to sign a message
    const { refetch } = useBalance({
      address: address as Address
    }); // Wagmi hook to get the balance

    
    useEffect(() => {
        if (hash) {
          sendHash(hash);
        }
    }, [hash]);

    // function to send a tx
    const handleSendTx = () => {
      try {
        sendTransaction({
          ...TEST_TX,
          gas // Add the gas to the transaction
        });
      } catch (err) {
        console.log('Error sending transaction:', err);
      }
    }

    // function to sing a msg 
    const handleSignMsg = async () => {
      const msg = "Hello Reown AppKit!" // message to sign
      const sig = await signMessageAsync({ message: msg, account: address as Address }); 
      sendSignMsg(sig);
    }

    // function to get the balance
    const handleGetBalance = async () => {
      const balance = await refetch()
      sendBalance(balance?.data?.value.toString() + " " + balance?.data?.symbol.toString())
    }

    const handleDisconnect = async () => {
      try {
        await disconnect();
      } catch (error) {
        console.error("Failed to disconnect:", error);
      }
    };

  return (
    <div>
    {isConnected && ( 
    <>
        <button onClick={() => open()}>Open</button>
        <button onClick={handleDisconnect}>Disconnect</button>
        <button onClick={() => switchNetwork(networks[1]) }>Switch</button>
        <button onClick={handleSignMsg}>Sign msg</button>
        <button onClick={handleSendTx}>Send tx</button>
        <button onClick={handleGetBalance}>Get Balance</button>  
    </>
    )}
  </div>
  )
}
</file>

<file path="react/react-wagmi-authentication-SIWX/package.json">
{
  "name": "react-wagmi-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@reown/appkit-siwx": "1.7.20",
    "@tanstack/react-query": "^5.56.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.23.6",
    "wagmi": "^2.14.12"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^16.0.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="javascript/javascript-core-universal-provider-sui/package.json">
{
  "name": "javascript-appkit-core-universal-provider",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-common": "1.7.20",
    "@walletconnect/universal-provider": "2.21.1",
    "ethers": "6.14.1",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "4.2.1",
    "vite": "^6.3.5"
  }
}
</file>

<file path="react/react-core-universal-provider-sui/package.json">
{
  "name": "react-appkit-core-universal-provider",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-common": "1.7.20",
    "@walletconnect/universal-provider": "2.21.1",
    "ethers": "6.14.1",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "@vitejs/plugin-react": "4.6.0",
    "typescript": "^5.5.3",
    "vite": "^6.3.5"
  }
}
</file>

<file path="react/react-wagmi-appkit-pay/src/components/AppKitPay.tsx">
import { useState } from 'react';
import { baseSepoliaETH, pay } from '@reown/appkit-pay';
import './AppKitPay.css';

export const AppKitPay = () => {
    const [isSuccess, setIsSuccess] = useState(false);
    const [errorMsg, setErrorMsg] = useState<string | null>(null);

    const handleSuccess = (data: any) => {
      console.log("Payment successful:", data);
      setIsSuccess(true);
    };

    const handleError = (error: any) => {
      console.error("Payment error:", error);
      setIsSuccess(false);
      setErrorMsg(error);
    };
    


    const handlePay = async (amount: number) => {
      // Check docs to Configure a custom paymentAsset
     /// https://docs.reown.com/appkit/react/payments/pay-with-exchange
      const recipientAddress = (document.querySelector('input[name="recipientAddress"]') as HTMLInputElement)?.value || '';
      
      if (!recipientAddress) {
        alert('Please enter a recipient address');
        return;
      }
      console.log("recipientAddress:", recipientAddress);
      
      // Call the pay function to initiate a crypto payment
      // paymentAsset: The token/currency to pay with (using baseSepoliaETH here)
      // recipient: The wallet address that will receive the payment
      // amount: The payment amount in USD
      const result = await pay({ 
        paymentAsset: baseSepoliaETH,
        recipient: recipientAddress,
        amount
      });

      const { success, result: data, error } = result;
      if (success) {
        handleSuccess(data);
      } else {
        handleError(error);
      }
    };


  return (
    <div className="container">
        <div className="card">
            <img src="/donut1.webp" alt="Single Donut" className="donut-image" />
            <div className="content">
                <div className="title">Single Donut</div>
                <p>A delicious glazed donut, perfect for a quick treat.</p>
                <div className="price">$1.00</div>
            </div>
            <button onClick={() => handlePay(1)}>Pay with Crypto</button>
        </div>
        <div className="card">
        <img src="/donut2.jpg" alt="Single Donut" className="donut-image" />
            <div className="content">
                <div className="title">Box of Donuts</div>
                <p>6 donuts perfect for sharing with friends or colleagues.</p>
                <div className="price">$10.00</div>
            </div>
            <button onClick={() => handlePay(10)}>Pay with Crypto</button>
        </div> 
        <div className="card" style={{ width: '100%' }}>
            <div className="content">
                <div className="title">Destination Address</div>
                <p>Enter the recipient address for your payment.</p>
                <input 
                    type="text" 
                    name="recipientAddress"
                    placeholder="0x..." 
                    autoComplete="off"
                    data-1p-ignore
                    style={{
                        width: '100%',
                        padding: '10px',
                        border: '1px solid #ccc',
                        borderRadius: '5px',
                        marginTop: '10px'
                    }}
                />
            </div>
        </div>
        {(isSuccess || errorMsg) && (
          <section>
            <h2>Payment Status</h2>
            {isSuccess && (
              <p>Payment successful !</p>
            )} else {
              <p>Payment error: {errorMsg}</p>
            }
          </section>
        )}
    </div> 
  )
}
</file>

<file path="react/react-core-universal-provider/package.json">
{
  "name": "react-appkit-core-universal-provider",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@walletconnect/universal-provider": "2.21.1",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "ethers": "6.14.1"
  },
  "devDependencies": {
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "@vitejs/plugin-react": "4.2.1",
    "typescript": "^5.5.3",
    "vite": "^6.3.5"
  }
}
</file>

<file path="javascript/javascript-core/package.json">
{
  "name": "vanillajs-appkite-core",
  "private": true,
  "version": "0.0.1",
  "scripts": {
    "dev": "vite --port 3011",
    "build": "vite build"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20"
  },
  "devDependencies": {
    "vite": "6.2.7"
  }
}
</file>

<file path="javascript/javascript-ethers/package.json">
{
  "name": "vanillajs-ethers",
  "private": true,
  "version": "0.0.1",
  "scripts": {
    "dev": "vite --port 3011",
    "build": "vite build"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-ethers": "1.7.20",
    "ethers": "6.13.2"
  },
  "devDependencies": {
    "vite": "6.2.7"
  }
}
</file>

<file path="react/react-bitcoin/package.json">
{
  "name": "react-bitcoin-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@bitcoinerlab/secp256k1": "^1.2.0",
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-bitcoin": "1.7.20",
    "bitcoinjs-lib": "^6.1.7",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "vite-plugin-node-polyfills": "^0.23.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/node": "^22.10.3",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="react/react-ethers/package.json">
{
  "name": "react-ethers-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-ethers": "1.7.20",
    "ethers": "^6.13.2",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="react/react-ethers5/package.json">
{
  "name": "react-wagmi",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-ethers5": "1.7.20",
    "ethers": "^5.7.2",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="react/react-solana/package.json">
{
  "name": "react-solana-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "@solana/web3.js": "^1.95.8",
    "bs58": "^6.0.0",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="react/react-wagmi-paymaster/package.json">
{
  "name": "react-wagmi-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@tanstack/react-query": "^5.56.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.23.6",
    "wagmi": "^2.14.12"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^16.0.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="vue/vue-bitcoin/package.json">
{
  "name": "appkit-vue-solana-example",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-bitcoin": "1.7.20",
    "vue": "^3.5.12"
  },
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@types/node": "^20.17.0",
    "@vitejs/plugin-vue": "^5.2.0",
    "@vitejs/plugin-vue-jsx": "^4.0.1",
    "@vue/tsconfig": "^0.5.1",
    "npm-run-all2": "^7.0.1",
    "typescript": "~5.6.0",
    "vite": "^6.2.0",
    "vue-tsc": "^2.1.6"
  }
}
</file>

<file path="vue/vue-core/package.json">
{
  "name": "appkit-vue-core-example",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "vue": "^3.5.12"
  },
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@types/node": "^20.17.0",
    "@vitejs/plugin-vue": "^5.2.0",
    "@vitejs/plugin-vue-jsx": "^4.0.1",
    "@vue/tsconfig": "^0.5.1",
    "npm-run-all2": "^7.0.1",
    "typescript": "~5.6.0",
    "vite": "^6.2.0",
    "vue-tsc": "^2.1.6"
  }
}
</file>

<file path="vue/vue-ethers/package.json">
{
  "name": "appkit-vue-solana-example",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-ethers": "1.7.20",
    "ethers": "^6.13.4",
    "vue": "^3.5.12"
  },
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@types/node": "^20.17.0",
    "@vitejs/plugin-vue": "^5.2.0",
    "@vitejs/plugin-vue-jsx": "^4.0.1",
    "@vue/tsconfig": "^0.5.1",
    "npm-run-all2": "^7.0.1",
    "typescript": "~5.6.0",
    "vite": "^6.2.0",
    "vue-tsc": "^2.1.6"
  }
}
</file>

<file path="javascript/javascript-bitcoin/package.json">
{
  "name": "vanillajs-bitcoin",
  "private": true,
  "version": "0.0.1",
  "scripts": {
    "dev": "vite --port 3011",
    "build": "vite build"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-bitcoin": "1.7.20" 
  },
  "devDependencies": {
    "vite": "6.2.7"
  }
}
</file>

<file path="javascript/javascript-multichain/package.json">
{
  "name": "vanilljs-multichain",
  "private": true,
  "version": "0.0.1",
  "scripts": {
    "dev": "vite --port 3011",
    "build": "vite build"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@solana/web3.js": "^1.95.8",
    "@wagmi/core": "^2.16.3",
    "viem": "^2.31.3",
    "wagmi": "^2.13.3"
  },
  "devDependencies": {
    "vite": "6.2.7"
  },
  "pnpm": {
    "onlyBuiltDependencies": [
      "bigint-buffer",
      "bufferutil",
      "esbuild",
      "keccak",
      "utf-8-validate"
    ]
  }
}
</file>

<file path="javascript/javascript-wagmi/package.json">
{
  "name": "vanilljs-wagmi",
  "private": true,
  "version": "0.0.1",
  "scripts": {
    "dev": "vite --port 3011",
    "build": "vite build"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@wagmi/core": "^2.16.3",
    "viem": "^2.31.3",
    "wagmi": "^2.13.3"
  },
  "devDependencies": {
    "vite": "6.2.7"
  }
}
</file>

<file path="nextjs/next-bitcoin-app-router/package.json">
{
  "name": "next-bitcoin-app-router",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-bitcoin": "1.7.20",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "typescript": "^5"
  }
}
</file>

<file path="nextjs/next-core-app-router/package.json">
{
  "name": "next-appkite-core-app-router",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "typescript": "^5"
  }
}
</file>

<file path="nextjs/next-ethers-app-router/package.json">
{
  "name": "next-ethers-app-router",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-ethers": "1.7.20",
    "ethers": "^6.13.4",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "typescript": "^5"
  }
}
</file>

<file path="nextjs/next-solana-app-router/package.json">
{
  "name": "next-solana-app-router",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "@solana/web3.js": "^1.98.0",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "typescript": "^5"
  }
}
</file>

<file path="react/react-core/package.json">
{
  "name": "react-appkit-core",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@tanstack/react-query": "^5.56.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.31.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^16.0.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="react/react-multichain/package.json">
{
  "name": "react-wagmi-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@tanstack/react-query": "^5.56.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.31.3",
    "wagmi": "^2.12.14"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="react/react-siwe-server-example/server/package.json">
{
	"name": "siwe-server-demo",
	"version": "1.0.0",
	"description": "",
	"main": "server.js",
	"type": "module",
	"scripts": {
		"start": "node server.js",
		"lint": "eslint"
	},
	"keywords": [],
	"author": "",
	"license": "ISC",
	"dependencies": {
		"@reown/appkit-siwe": "1.7.20",
		"body-parser": "^1.20.2",
		"cors": "^2.8.5",
		"dotenv": "^16.4.5",
		"express": "^4.18.2",
		"express-session": "^1.18.0",
		"siwe": "^2.3.2",
		"viem": "^2.31.3"
	},
	"devDependencies": {
		"zlib-browserify": "^0.0.3"
	}
}
</file>

<file path="react/react-siwe-server-example/package.json">
{
  "name": "appkit-siwe-react",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite --port 5174",
    "build": "tsc -b && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.53.1",
    "@wagmi/core": "^2.13.4",
		"@reown/appkit-siwe": "1.7.20",
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.31.3",
    "wagmi": "^2.12.7"
  },
  "devDependencies": {
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^8.3.0",
    "@typescript-eslint/parser": "^8.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.11",
    "typescript": "^5.2.4",
    "vite": "^6.2.1"
  }
}
</file>

<file path="react/react-wagmi-smart-session/package.json">
{
  "name": "react-wagmi-appkit-smart-session",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@reown/appkit-experimental": "1.7.20",
    "@tanstack/react-query": "^5.56.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.23.6",
    "wagmi": "^2.14.12"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^16.0.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="javascript/javascript-solana/package.json">
{
  "name": "vanillajs-solana",
  "private": true,
  "version": "0.0.1",
  "scripts": {
    "dev": "vite --port 3011",
    "build": "vite build"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "@solana/web3.js": "^1.95.8"
  },
  "devDependencies": {
    "vite": "6.2.7"
  }
}
</file>

<file path="nextjs/next-siwe-next-auth/package.json">
{
  "name": "next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.53.1",
		"@reown/appkit-siwe": "1.7.20",
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "next": "15.3.3",
    "next-auth": "^4.24.11",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.31.3",
    "wagmi": "^2.14.15"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^22.5.1",
    "@types/react": "19.0.12",
    "@types/react-dom": "19.0.4",
    "eslint": "^9.9.1",
    "eslint-config-next": "14.2.7"
  }
}
</file>

<file path="nextjs/next-siwx-multichain/package.json">
{
  "name": "next-siwx-multichain",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-bitcoin": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@reown/appkit-siwx": "1.7.20",
    "@tanstack/react-query": "^5.64.2",
    "bip322-js": "^2.0.0",
    "bs58": "^6.0.0",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tweetnacl": "^1.0.3",
    "viem": "^2.31.3",
    "wagmi": "^2.14.9"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "typescript": "^5"
  }
}
</file>

<file path="nextjs/next-siwx-multichain-supabase-storage/package.json">
{
  "name": "next-siwx-multichain-supabase-storage",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-bitcoin": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@reown/appkit-siwx": "1.7.20",
    "@supabase/supabase-js": "^2.49.1",
    "@tanstack/react-query": "^5.64.2",
    "bip322-js": "^2.0.0",
    "bs58": "^6.0.0",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "tweetnacl": "^1.0.3",
    "viem": "^2.31.3",
    "wagmi": "^2.14.9"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "19.0.0",
    "@types/react-dom": "19.0.0",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "typescript": "^5"
  }
}
</file>

<file path="vue/vue-multichain/package.json">
{
  "name": "appkit-vue-wagmi-example",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@tanstack/vue-query": "5.75.4",
    "@wagmi/vue": "0.1.18",
    "viem": "^2.31.3",
    "vue": "^3.5.12"
  },
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@types/node": "^20.17.0",
    "@vitejs/plugin-vue": "^5.1.4",
    "@vitejs/plugin-vue-jsx": "^4.0.1",
    "@vue/tsconfig": "0.7.0",
    "npm-run-all2": "8.0.1",
    "typescript": "5.8.3",
    "vite": "6.3.5",
    "vue-tsc": "^2.1.6"
  }
}
</file>

<file path="vue/vue-solana/package.json">
{
  "name": "appkit-vue-solana-example",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "viem": "^2.31.3",
    "vue": "^3.5.12"
  },
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@types/node": "^20.17.0",
    "@vitejs/plugin-vue": "^5.2.0",
    "@vitejs/plugin-vue-jsx": "^4.0.1",
    "@vue/tsconfig": "^0.5.1",
    "npm-run-all2": "^7.0.1",
    "typescript": "~5.6.0",
    "vite": "^6.2.0",
    "vue-tsc": "^2.1.6"
  }
}
</file>

<file path="nextjs/next-wagmi-app-router/package.json">
{
  "name": "next-wagmi-app-router",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@tanstack/react-query": "^5.59.20",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "^2.31.3",
    "wagmi": "^2.12.31"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "typescript": "^5"
  }
}
</file>

<file path="nextjs/next-multichain-app-router/package.json">
{
  "name": "next-wagmi-app-router",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-solana": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@solana/web3.js": "^1.98.0",
    "@tanstack/react-query": "5.62.8",
    "next": "15.3.3",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "2.34.0",
    "wagmi": "^2.12.31"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^8",
    "eslint-config-next": "15.1.3",
    "typescript": "^5"
  }
}
</file>

<file path="react/react-wagmi/package.json">
{
  "name": "react-wagmi-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@tanstack/react-query": "^5.56.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "2.34.0",
    "wagmi": "^2.15.6"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^16.0.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="react/react-wagmi-appkit-pay/package.json">
{
  "name": "react-wagmi-appkit",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@reown/appkit-pay": "1.7.20",
    "@tanstack/react-query": "^5.56.2",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "viem": "2.34.0",
    "wagmi": "^2.16.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^16.0.0",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^6.2.0"
  }
}
</file>

<file path="vue/vue-wagmi/package.json">
{
  "name": "appkit-vue-wagmi-example",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build --force"
  },
  "dependencies": {
    "@reown/appkit": "1.7.20",
    "@reown/appkit-adapter-wagmi": "1.7.20",
    "@tanstack/vue-query": "5.75.4",
    "@wagmi/vue": "0.1.20",
    "viem": "^2.31.3",
    "vue": "^3.5.12"
  },
  "devDependencies": {
    "@tsconfig/node20": "^20.1.4",
    "@types/node": "^20.17.0",
    "@vitejs/plugin-vue": "^5.1.4",
    "@vitejs/plugin-vue-jsx": "^4.0.1",
    "@vue/tsconfig": "^0.7.0",
    "npm-run-all2": "^8.0.1",
    "typescript": "~5.8.3",
    "vite": "^6.2.0",
    "vue-tsc": "^2.1.6"
  }
}
</file>

</files>

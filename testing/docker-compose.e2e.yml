version: '3.8'

services:
  # PostgreSQL database for E2E testing
  postgres-e2e:
    image: postgres:15
    environment:
      - POSTGRES_DB=cirx_e2e_test
      - POSTGRES_USER=cirx_test
      - POSTGRES_PASSWORD=test_password_123
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_e2e_data:/var/lib/postgresql/data
      - ./data/e2e-setup.sql:/docker-entrypoint-initdb.d/01-setup.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cirx_test -d cirx_e2e_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e2e-network

  # Redis for session management and caching
  redis-e2e:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_e2e_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - e2e-network

  # Backend API service
  backend-e2e:
    build:
      context: ../backend
      dockerfile: ../testing/docker/backend.e2e.Dockerfile
    environment:
      - APP_ENV=e2e_testing
      - APP_DEBUG=true
      - E2E_TESTING_ENABLED=true
      - TESTNET_MODE=true
      
      # Database configuration
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres-e2e
      - DB_PORT=5432
      - DB_DATABASE=cirx_e2e_test
      - DB_USERNAME=cirx_test
      - DB_PASSWORD=test_password_123
      
      # Redis configuration
      - REDIS_HOST=redis-e2e
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      
      # Blockchain configuration
      - SEPOLIA_RPC_URL=${SEPOLIA_RPC_URL}
      - SEPOLIA_CHAIN_ID=11155111
      - SEPOLIA_USDC_CONTRACT=0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238
      - SEPOLIA_USDT_CONTRACT=0x7169D38820dfd117C3FA1f22a697dBA58d90BA06
      
      # Test wallet configuration
      - SEED_PHRASE=${E2E_TEST_SEED_PHRASE}
      
      # API configuration
      - API_KEY=e2e-test-api-key-12345
      - JWT_SECRET=e2e-test-jwt-secret-67890
      
      # Timeouts and limits
      - TRANSACTION_TIMEOUT_SECONDS=300
      - MAX_GAS_PRICE_GWEI=50
      - TEST_WALLET_FUNDING_THRESHOLD=0.01
      
      # Logging
      - LOG_LEVEL=debug
      - LOG_CHANNEL=single
      
    ports:
      - "8081:8080"
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
    volumes:
      - ../backend:/app
      - ../backend/storage/logs:/app/storage/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - e2e-network

  # Frontend application
  frontend-e2e:
    build:
      context: ../ui
      dockerfile: ../testing/docker/frontend.e2e.Dockerfile
    environment:
      - NODE_ENV=test
      - NUXT_API_BASE_URL=http://backend-e2e:8080
      - NUXT_PUBLIC_API_BASE_URL=http://localhost:8081
      - E2E_TESTING_MODE=true
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    ports:
      - "3001:3000"
    depends_on:
      backend-e2e:
        condition: service_healthy
    volumes:
      - ../ui:/app
      - /app/node_modules
      - /app/.nuxt
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - e2e-network

  # Playwright test runner
  playwright-e2e:
    build:
      context: ../ui
      dockerfile: ../testing/docker/playwright.Dockerfile
    environment:
      - NODE_ENV=test
      - BASE_URL=http://frontend-e2e:3000
      - API_BASE_URL=http://backend-e2e:8080
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    depends_on:
      frontend-e2e:
        condition: service_healthy
      backend-e2e:
        condition: service_healthy
    volumes:
      - ../ui:/app
      - playwright_cache:/ms-playwright
      - ../ui/test-results:/app/test-results
      - ../ui/playwright-report:/app/playwright-report
    networks:
      - e2e-network
    profiles:
      - testing

  # PHPUnit backend test runner
  phpunit-e2e:
    build:
      context: ../backend
      dockerfile: ../testing/docker/backend.e2e.Dockerfile
    environment:
      - APP_ENV=e2e_testing
      - E2E_TESTING_ENABLED=true
      - DB_HOST=postgres-e2e
      - DB_DATABASE=cirx_e2e_test
      - DB_USERNAME=cirx_test
      - DB_PASSWORD=test_password_123
      - REDIS_HOST=redis-e2e
      - SEPOLIA_RPC_URL=${SEPOLIA_RPC_URL}
      - SEED_PHRASE=${E2E_TEST_SEED_PHRASE}
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
    volumes:
      - ../backend:/app
      - ../backend/reports:/app/reports
    command: php vendor/bin/phpunit --configuration=../testing/phpunit.e2e.xml --testdox
    networks:
      - e2e-network
    profiles:
      - testing

  # Nginx reverse proxy for integration testing
  nginx-e2e:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ../docker/nginx/e2e.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend-e2e
      - backend-e2e
    networks:
      - e2e-network

  # Monitoring and observability
  prometheus-e2e:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ../docker/prometheus/e2e.yml:/etc/prometheus/prometheus.yml
      - prometheus_e2e_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - e2e-network
    profiles:
      - monitoring

  grafana-e2e:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_e2e_data:/var/lib/grafana
      - ../docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - e2e-network
    profiles:
      - monitoring

volumes:
  postgres_e2e_data:
    driver: local
  redis_e2e_data:
    driver: local
  playwright_cache:
    driver: local
  prometheus_e2e_data:
    driver: local
  grafana_e2e_data:
    driver: local

networks:
  e2e-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
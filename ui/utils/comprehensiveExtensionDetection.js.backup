/**
 * Comprehensive browser extension detection
 * Logs all findings to console for debugging
 */

export const detectAllExtensions = () => {
  console.log('🔍 Starting comprehensive extension detection...')
  
  const detected = {
    wallets: [],
    privacy: [],
    passwords: [],
    developer: [],
    productivity: [],
    shopping: [],
    unknown: []
  }

  // === WALLET EXTENSIONS ===
  console.log('\n💳 Checking for wallet extensions...')
  
  // MetaMask
  if (window.ethereum?.isMetaMask) {
    detected.wallets.push('MetaMask')
    console.log('✅ MetaMask detected via window.ethereum.isMetaMask')
  }
  
  // Phantom
  if (window.phantom?.solana || window.solana?.isPhantom) {
    detected.wallets.push('Phantom')
    console.log('✅ Phantom detected via window.phantom/window.solana')
  }
  
  // Coinbase Wallet
  if (window.ethereum?.isCoinbaseWallet || window.coinbaseWalletExtension) {
    detected.wallets.push('Coinbase Wallet')
    console.log('✅ Coinbase Wallet detected')
  }
  
  // Rabby
  if (window.ethereum?.isRabby) {
    detected.wallets.push('Rabby')
    console.log('✅ Rabby detected via window.ethereum.isRabby')
  }
  
  // Trust Wallet
  if (window.ethereum?.isTrust) {
    detected.wallets.push('Trust Wallet')
    console.log('✅ Trust Wallet detected')
  }
  
  // Rainbow
  if (window.ethereum?.isRainbow) {
    detected.wallets.push('Rainbow')
    console.log('✅ Rainbow detected')
  }
  
  // Brave Wallet
  if (window.ethereum?.isBraveWallet) {
    detected.wallets.push('Brave Wallet')
    console.log('✅ Brave Wallet detected')
  }
  
  // Exodus
  if (window.exodus) {
    detected.wallets.push('Exodus')
    console.log('✅ Exodus detected')
  }
  
  // Math Wallet
  if (window.ethereum?.isMathWallet) {
    detected.wallets.push('MathWallet')
    console.log('✅ MathWallet detected')
  }
  
  // Saturn Wallet - comprehensive detection
  const saturnChecks = {
    'window.saturn': !!window.saturn,
    'window.extension': !!window.extension,
    'window.ethereum?.isSaturn': !!(window.ethereum?.isSaturn),
    'saturn in ethereum providers': !!(window.ethereum?.providers?.some?.(p => p.isSaturn)),
    'document saturn elements': !!document.querySelector('[data-saturn], [class*="saturn"], [id*="saturn"]')
  }
  
  console.log('🪐 Saturn Wallet detection checks:', saturnChecks)
  
  if (Object.values(saturnChecks).some(Boolean)) {
    detected.wallets.push('Saturn Wallet')
    console.log('✅ Saturn Wallet detected!')
    console.log('   Active detection methods:', Object.entries(saturnChecks).filter(([k, v]) => v).map(([k]) => k))
  }
  
  // Generic extension property analysis
  if (window.extension && typeof window.extension === 'object') {
    console.log('🔍 window.extension object analysis:')
    console.log('   Type:', typeof window.extension)
    console.log('   Constructor:', window.extension.constructor?.name)
    console.log('   Properties:', Object.keys(window.extension))
    
    // Check if this extension object has wallet-like properties
    const extensionProps = Object.keys(window.extension)
    const walletIndicators = ['request', 'send', 'enable', 'isConnected', 'selectedAddress', 'chainId']
    const hasWalletProps = walletIndicators.some(prop => extensionProps.includes(prop))
    
    if (hasWalletProps) {
      console.log('   ⚡ This extension has wallet-like properties!')
      console.log('   Matching properties:', extensionProps.filter(prop => walletIndicators.includes(prop)))
    }
  }

  // === PRIVACY & AD BLOCKERS ===
  console.log('\n🛡️ Checking for privacy extensions...')
  
  // uBlock Origin - test with ad element
  const testAd = document.createElement('div')
  testAd.innerHTML = '&nbsp;'
  testAd.className = 'ads ad adsbox doubleclick ad-placement carbon-ads'
  testAd.style.cssText = 'position: absolute !important; left: -10000px !important; width: 1px !important; height: 1px !important;'
  document.body.appendChild(testAd)
  
  if (testAd.offsetHeight === 0 || testAd.offsetWidth === 0) {
    detected.privacy.push('Ad Blocker (uBlock/AdBlock)')
    console.log('✅ Ad blocker detected (element blocked)')
  }
  document.body.removeChild(testAd)
  
  // Ghostery
  if (window.ghostery || window.__ghostery) {
    detected.privacy.push('Ghostery')
    console.log('✅ Ghostery detected')
  }
  
  // DuckDuckGo Privacy Essentials
  if (window.DDG || document.querySelector('[data-ddg]')) {
    detected.privacy.push('DuckDuckGo Privacy Essentials')
    console.log('✅ DuckDuckGo Privacy Essentials detected')
  }
  
  // Privacy Badger
  if (window.PRIVACY_BADGER_HEURISTICS) {
    detected.privacy.push('Privacy Badger')
    console.log('✅ Privacy Badger detected')
  }

  // === PASSWORD MANAGERS ===
  console.log('\n🔐 Checking for password managers...')
  
  // 1Password
  if (document.querySelector('[data-1p-ignore]') || window.OnePassword || document.querySelector('[data-onepassword-extension]')) {
    detected.passwords.push('1Password')
    console.log('✅ 1Password detected')
  }
  
  // LastPass
  if (document.querySelector('[data-lastpass-icon-root]') || window.lpData || document.querySelector('#lp-pom-root')) {
    detected.passwords.push('LastPass')
    console.log('✅ LastPass detected')
  }
  
  // Bitwarden
  if (document.querySelector('[data-bw-ignore]') || window.BitwardenExtension || document.querySelector('[data-bitwarden-notification]')) {
    detected.passwords.push('Bitwarden')
    console.log('✅ Bitwarden detected')
  }
  
  // Dashlane
  if (window.Dashlane || document.querySelector('[data-dashlane-rid]')) {
    detected.passwords.push('Dashlane')
    console.log('✅ Dashlane detected')
  }
  
  // Keeper
  if (window.keeper || document.querySelector('[data-keeper-extension]')) {
    detected.passwords.push('Keeper')
    console.log('✅ Keeper detected')
  }

  // === DEVELOPER TOOLS ===
  console.log('\n⚛️ Checking for developer tools...')
  
  // React DevTools
  if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
    detected.developer.push('React Developer Tools')
    console.log('✅ React Developer Tools detected')
  }
  
  // Vue DevTools
  if (window.__VUE_DEVTOOLS_GLOBAL_HOOK__) {
    detected.developer.push('Vue.js Developer Tools')
    console.log('✅ Vue.js Developer Tools detected')
  }
  
  // Redux DevTools
  if (window.__REDUX_DEVTOOLS_EXTENSION__) {
    detected.developer.push('Redux DevTools')
    console.log('✅ Redux DevTools detected')
  }
  
  // Apollo Client DevTools
  if (window.__APOLLO_CLIENT__ || window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {
    detected.developer.push('Apollo Client DevTools')
    console.log('✅ Apollo Client DevTools detected')
  }

  // === PRODUCTIVITY ===
  console.log('\n📝 Checking for productivity extensions...')
  
  // Grammarly
  if (document.querySelector('[data-grammarly-extension]') || window.grammarly || document.querySelector('grammarly-extension')) {
    detected.productivity.push('Grammarly')
    console.log('✅ Grammarly detected')
  }
  
  // Loom
  if (window.loom || document.querySelector('[data-loom-extension]')) {
    detected.productivity.push('Loom')
    console.log('✅ Loom detected')
  }
  
  // Notion Web Clipper
  if (window.notion || document.querySelector('[data-notion-extension]')) {
    detected.productivity.push('Notion Web Clipper')
    console.log('✅ Notion Web Clipper detected')
  }

  // === SHOPPING ===
  console.log('\n🛒 Checking for shopping extensions...')
  
  // Honey
  if (window.honey || document.querySelector('#honey-extension-root') || window.paypal?.honey) {
    detected.shopping.push('Honey')
    console.log('✅ Honey detected')
  }
  
  // Capital One Shopping
  if (window.capitalone || document.querySelector('[data-capitalone-extension]')) {
    detected.shopping.push('Capital One Shopping')
    console.log('✅ Capital One Shopping detected')
  }
  
  // Rakuten
  if (window.rakuten || document.querySelector('[data-rakuten-extension]')) {
    detected.shopping.push('Rakuten')
    console.log('✅ Rakuten detected')
  }

  // === SCAN WINDOW OBJECT FOR UNKNOWN EXTENSIONS ===
  console.log('\n🔍 Scanning window object for potential extensions...')
  
  const allWindowProps = Object.keys(window)
  console.log(`Total window properties: ${allWindowProps.length}`)
  
  // Filter out common framework/library properties
  const frameworkProps = [
    '__NUXT', '__VUE', '_walletConnect', '__REACT', '__APOLLO', '__REDUX',
    'webpackChunk', 'webpackHotUpdate', '__webpack', 'HMR', 'module'
  ]
  
  const suspiciousProps = allWindowProps.filter(key => {
    const lowerKey = key.toLowerCase()
    
    // Skip known framework properties
    if (frameworkProps.some(framework => lowerKey.includes(framework.toLowerCase()))) {
      return false
    }
    
    // Look for extension-like patterns
    return (
      (lowerKey.includes('extension') && !lowerKey.includes('__vue') && !lowerKey.includes('__nuxt')) ||
      lowerKey.includes('wallet') ||
      (lowerKey.includes('crypto') && lowerKey !== 'crypto') ||
      lowerKey.includes('saturn') ||
      lowerKey.includes('solana') ||
      lowerKey.includes('ethereum') ||
      (typeof window[key] === 'object' && window[key]?.isExtension) ||
      (lowerKey.endsWith('provider') && !lowerKey.includes('__'))
    )
  })
  
  if (suspiciousProps.length > 0) {
    console.log('🤔 Potential extension properties found:')
    suspiciousProps.forEach(prop => {
      const value = window[prop]
      const type = typeof value
      const constructor = value?.constructor?.name
      console.log(`   ${prop}: ${type} ${constructor ? `(${constructor})` : ''}`)
      
      // Deep dive into interesting objects
      if (type === 'object' && value && !Array.isArray(value)) {
        const objKeys = Object.keys(value).slice(0, 5) // First 5 properties
        if (objKeys.length > 0) {
          console.log(`     Properties: ${objKeys.join(', ')}${objKeys.length < Object.keys(value).length ? '...' : ''}`)
        }
      }
    })
    detected.unknown = suspiciousProps
  }

  // === CHECK DOM FOR EXTENSION MARKERS ===
  console.log('\n🏷️ Scanning DOM for extension markers...')
  
  const extensionSelectors = [
    '[data-extension-id]',
    '[class*="extension"]',
    '[id*="extension"]',
    '[data-chrome-extension]',
    'div[id^="chrome-extension"]',
    'script[src*="chrome-extension"]',
    'link[href*="chrome-extension"]'
  ]
  
  extensionSelectors.forEach(selector => {
    const elements = document.querySelectorAll(selector)
    if (elements.length > 0) {
      console.log(`📍 Found ${elements.length} elements matching ${selector}`)
      elements.forEach(el => {
        console.log('  Element:', el.tagName, el.className || el.id || 'no identifier')
      })
    }
  })

  // === ETHEREUM PROVIDER ANALYSIS ===
  if (window.ethereum) {
    console.log('\n⚡ Ethereum provider analysis:')
    console.log('Provider properties:', Object.keys(window.ethereum))
    
    if (window.ethereum.providers) {
      console.log(`Multiple providers detected: ${window.ethereum.providers.length}`)
      window.ethereum.providers.forEach((provider, index) => {
        console.log(`  Provider ${index + 1}:`, Object.keys(provider))
      })
    }
  }

  // === FINAL SUMMARY ===
  const totalDetected = Object.values(detected).flat().length
  console.log(`\n📊 DETECTION SUMMARY:`)
  console.log(`Total extensions detected: ${totalDetected}`)
  console.log('By category:')
  Object.entries(detected).forEach(([category, items]) => {
    if (items.length > 0) {
      console.log(`  ${category}: ${items.join(', ')}`)
    }
  })
  
  if (totalDetected === 0) {
    console.log('❌ No extensions detected')
  }
  
  return detected
}

// Auto-run detection when this module loads
if (typeof window !== 'undefined') {
  // Wait for DOM and extensions to load
  setTimeout(() => {
    detectAllExtensions()
  }, 2000)
}